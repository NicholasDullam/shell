#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 15
#define YY_END_OF_BUFFER 16
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[816] =
    {   0,
        0,    0,   16,   14,    2,    1,   14,   14,    7,   14,
        5,    3,   12,    6,   14,   14,   14,    0,   12,   14,
        0,   14,   14,    0,   14,    0,    0,   12,    8,    9,
        4,   12,   12,   12,   12,   12,   14,    0,   13,   14,
        0,   13,   14,    0,   13,   14,    0,   14,   13,    0,
       14,    0,   14,   14,    0,   12,    0,    0,    0,   12,
       12,   12,   10,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   13,   13,   13,   13,   13,   13,
       14,    0,   13,   14,    0,   13,   13,    0,   14,    0,
       14,   14,    0,   11,   12,   11,   14,    0,   14,   14,

        0,   11,   14,    0,    0,   11,   12,   12,   12,   12,
       12,   11,   12,   13,    0,    0,    0,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   13,   13,   13,   13,   13,
       13,   13,   14,    0,   13,   14,    0,   11,   13,   11,
       13,    0,   13,   13,   13,   11,   14,   13,    0,   11,
       13,   13,    0,   11,   11,   11,   11,   11,   11,   11,
       11,   14,   13,   14,    0,   11,   11,   11,   11,   11,

       11,   14,    0,   14,   14,    0,   11,   12,    0,    0,
       11,    0,   11,   11,   11,   11,   12,   12,   11,   12,
       12,   12,   12,   12,   11,   12,   12,   11,   11,   11,
       11,   11,   11,   12,   12,   12,   12,   11,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   13,   13,   13,   13,   13,   13,   11,   11,
       11,   11,   13,   13,   13,   13,   11,   13,   13,   13,

       11,   11,   11,   11,   11,   11,   14,    0,   13,   14,
        0,   11,   13,   13,   11,    0,   11,   11,   11,   13,
       13,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   13,    0,   11,    0,    0,   11,   12,
       11,   11,   11,   11,   11,   11,   11,   11,   12,   12,
       11,   12,   12,   12,   12,   11,   12,   12,   12,   12,
       12,   11,   12,   12,   12,   12,   12,   11,   12,   12,
       12,   12,   11,   12,   11,   11,   11,   11,   11,   11,
       12,   12,   12,   12,   11,   12,   12,   12,   12,   12,
       11,   12,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   12,   12,   12,   12,   11,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   11,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   11,   11,   11,   13,   13,
       13,   13,   11,   13,   11,   11,   11,   11,   13,    0,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   12,   12,   11,
       12,   12,   11,   11,   11,   11,   12,   12,   11,   12,
       12,   12,   11,   12,   12,   12,   11,   12,   12,   12,
       12,   12,   12,   11,   12,   12,   12,   11,   12,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   12,   12,   12,   12,   11,   12,   12,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   12,   12,
       12,   12,   11,   12,   12,   12,   12,   12,   11,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   12,   11,   12,   12,   12,   12,   11,   12,
       11,   11,   11,   11,   11,   11,   12,   12,   12,   12,
       11,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       13,   13,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       12,   12,   11,   12,   11,   11,   11,   11,   12,   12,
       11,   12,   12,   12,   12,   11,   12,   12,   12,   11,
       12,   12,   11,   11,   11,   11,   12,   12,   11,   12,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       12,   12,   12,   12,   12,   11,   12,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   12,
       12,   12,   12,   12,   12,   12,   11,   12,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   12,   12,   12,   11,   12,   12,   12,
       11,   12,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   12,   12,   12,   12,   11,
       12,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       12,   12,   11,   12,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    6,    1,    7,    1,    8,
        9,    1,    1,    1,    1,    1,    1,    1,    1,   10,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   11,
        1,   12,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   13,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   14,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[15] =
    {   0,
        1,    2,    2,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[888] =
    {   0,
        0,    0,  804,   14, 3724, 3724,   28,  795,   38,  776,
       47,   38,   60,    0,    0,    0,  779,    0,    0,   74,
      769,   88,  765,   99,  105,  116,  762,  118,    0,    0,
      762,    0,  131,  746,  141,  154,    0,  748,  168,  742,
      179,   12,    0,  744,    0,  740,    0,  185,  196,  736,
      202,  734,  216,  734,  230,  244,  255,  720,  258,  268,
      719,  277,    0,  290,  304,  706,  315,  328,  342,    0,
      356,  705,  366,    0,  379,    0,  692,  390,   26,   42,
      396,   49,  410,  691,  421,  427,  430,  435,    0,  677,
        0,  677,    0,  441,    0,   53,    0,   50,  455,  674,

      466,  475,  489,  500,  673,  509,  523,    0,  537,  672,
        0,  551,  565,    0,  671,  576,  670,    0,  582,  592,
      602,  612,  622,  669,    0,    0,  635,  664,  663,    0,
        0,    0,  662,  661,    0,  649,  660,    0,  670,    0,
      683,  660,    0,    0,    0,    0,  659,    0,    0,    0,
      697,  644,    0,    0,  711,    0,    0,  643,  630,  725,
        0,    0,    0,  120,    0,  629,    0,    0,  736,  742,
      751,  121,    0,  626,  762,  771,  785,  796,  625,  802,
      808,  811,  624,  820,  834,  623,    0,    0,    0,  124,
      144,    0,    0,  622,    0,    0,    0,  848,  621,  859,

        0,  868,  615,  882,  615,  896,    0,    0,  907,  614,
        0,  916,  927,  613,    0,  936,  950,  612,    0,  964,
      978,  992,  611, 1006, 1020, 1034, 1048,    0, 1062,  606,
        0,    0, 1076, 1090, 1104,  605,    0,    0,    0, 1115,
     1128, 1139, 1149, 1159, 1169,  604,    0,  603,    0, 1179,
        0,  602, 1189, 1202, 1216,  601, 1227, 1240,    0, 1254,
      596,    0,    0, 1265, 1275, 1285,    0, 1298,  595, 1309,
        0, 1322, 1336,    0,  594,  593,    0,    0,    0,  591,
        0,    0, 1350, 1364,  586, 1375, 1381, 1387, 1393, 1399,
     1405, 1411,    0,    0,  585, 1417, 1426, 1440, 1451,  584,

     1457,    0, 1466,  583, 1477,    0, 1486,  147,    0,  582,
     1497, 1506, 1517,  581,    0, 1523, 1529, 1538,  576,    0,
      575,    0, 1552,  560,  559,    0, 1566,    0,    0,  546,
        0,    0, 1580,    0, 1591,  545, 1597, 1606, 1620, 1634,
     1645,    0,  532, 1654, 1668, 1682,  531, 1696, 1710, 1724,
     1738, 1752, 1766, 1780,  518,    0,    0, 1794, 1808,  517,
      504, 1822, 1836,    0,    0,  503,  500,    0,    0, 1850,
     1864,    0,    0,    0,    0, 1878,  499,    0,    0, 1892,
        0, 1906,  484,    0,    0,    0, 1920, 1934,  483,    0,
     1948, 1962,    0, 1976,  470,    0,    0,    0, 1990, 2004,

     2018,  469,    0,    0,    0,    0, 2032,  466,    0,    0,
        0, 2046,    0,    0,    0, 2057, 2070,  465, 2081, 2091,
     2104,  450,    0,  449,    0, 2118, 2132,  436, 2143, 2156,
     2170, 2181, 2191,  435,    0, 2204,  429,  421,    0, 2218,
        0,  420, 2232, 2246, 2260, 2271,    0,    0,  405, 2284,
        0,    0,  404,    0,    0, 2295, 2301,    0, 2310, 2324,
      391, 2335, 2344, 2355, 2361, 2370,  390, 2384, 2395, 2404,
     2415, 2421,    0,  374, 2427, 2436, 2450,  373, 2461,    0,
     2470, 2484,  370, 2498,    0, 2512,    0,    0,  369,    0,
        0,    0,  368,    0, 2523,  367,    0, 2532, 2546, 2560,

      366, 2574, 2588, 2602, 2616,  365,  351, 2630, 2644,  350,
        0, 2658, 2672,    0,  337,    0, 2686,  336,    0,    0,
     2700, 2714,    0, 2728, 2742,  323,    0,    0, 2756, 2770,
     2784,  322,  319, 2798,    0,    0, 2812, 2826, 2840, 2854,
     2868,  318,    0,    0, 2882, 2896, 2910, 2924,  317,    0,
        0,    0, 2938, 2952,  316,    0,    0,    0, 2966,    0,
        0,  315,  314,    0,    0,    0, 2980,  299,    0,    0,
     2994,    0, 3008,  298,    0,    0,    0, 3022,    0,    0,
      285,    0,    0,    0, 3036, 3050,  284,    0,    0,    0,
     3061,    0,  281,    0, 3074,    0,  280,  279,    0,    0,

        0,  278,  277,    0,    0, 3088,    0,    0,    0,    0,
        0,    0,  276,    0,    0,    0,    0,    0,  272,    0,
        0,    0,    0,    0,    0,    0,    0,  271,    0,    0,
     3099, 3108, 3119, 3125, 3134, 3148,  270, 3159,    0, 3165,
     3174,  269,    0,    0,  268,    0, 3188, 3202,  267,    0,
        0, 3216,  262,    0, 3230, 3244,  261,    0,    0, 3258,
        0,    0,  260,    0,    0,  259,    0, 3272,    0,  258,
        0,    0, 3286,    0,  257,    0,    0, 3300,  239,    0,
        0, 3314,    0,  238,    0,    0,    0,  225,    0,    0,
     3328,    0, 3342,  224,    0,    0,    0, 3356,    0,  211,

      210,    0,    0,    0,    0,  197,    0,    0,    0, 3370,
     3384, 3398,    0,  196,    0,    0,    0,    0,    0,  180,
        0,    0,    0,    0, 3412,  179,    0,    0,    0,    0,
      163,    0,    0,    0,  162,  150,    0,    0, 3423,  149,
        0,    0,    0,  143,    0,    0,  142,    0,    0, 3432,
        0,  141,    0,    0, 3446,  126,    0,    0, 3460,    0,
      119,    0,    0, 3474,    0,  100,    0,    0,    0,    0,
        0,    0,    0,    0,   99,    0,    0,    0, 3488,    0,
        0,   83,    0,    0,    0,    0,    0,   82,    0,    0,
        0, 3502,    0,   69,    0,    0,    0,   68,    0,    0,

        0,   56,    0,    0,    0,    0,   55,    0,    0,    0,
        0,   48,    0,    0, 3724,   48, 3516, 3519, 3522,   47,
     3525, 3528, 3531, 3534, 3537, 3540,   17, 3543, 3546, 3549,
     3552, 3555, 3558, 3561, 3564, 3567, 3570, 3573, 3576, 3579,
     3582, 3585, 3588, 3591, 3594, 3597, 3600, 3603, 3606, 3609,
     3612, 3615, 3618, 3621, 3624, 3627, 3630, 3633, 3636, 3639,
     3642, 3645, 3648, 3651, 3654, 3657, 3660, 3663, 3666, 3669,
     3672, 3675, 3678, 3681, 3684, 3687, 3690, 3693, 3696, 3699,
     3702, 3705, 3708, 3711, 3714, 3717, 3720
    } ;

static const flex_int16_t yy_def[888] =
    {   0,
      815,    1,  815,  815,  815,  815,  815,    4,  816,    4,
      816,   11,  815,   11,    4,    7,    4,   11,   13,  815,
      817,  815,   20,  818,  815,  819,   11,  820,   11,   11,
       11,   13,  815,   13,  820,  815,   20,  817,  815,   20,
      818,  821,   20,  817,   39,   20,   41,  815,  822,   41,
      815,  823,  815,   51,  815,  815,  824,   41,  825,  826,
       35,  827,   11,  815,  815,   64,  828,  815,  815,   36,
      815,   36,  827,   36,  815,   39,   75,  829,  821,  821,
      815,  830,  815,   81,  831,  822,  829,  832,   51,  823,
       53,   51,   55,  815,   56,  833,   81,  830,  815,   81,

      831,  815,  815,  834,   55,  815,  815,   56,  815,   56,
      107,  815,  815,   86,   41,  834,   55,  107,  835,  828,
      836,  837,  838,   73,   73,   64,  815,   64,  120,   68,
       64,  127,   64,  120,   68,  815,  839,  120,  836,   68,
      815,   68,  139,   68,   56,  109,   56,  107,  113,   68,
      815,   68,  139,   68,  815,   75,   39,   75,   87,  815,
       86,   87,   81,  830,   83,   81,  101,  102,  840,  841,
      815,  830,   83,  171,  842,  815,  815,  843,  101,  844,
      845,  843,  101,  815,  815,  184,  106,  184,  112,  846,
      846,   81,   83,   81,  101,  102,  102,  815,  102,  844,

      102,  815,  847,  815,  202,  815,  184,   56,  848,  101,
      200,  815,  849,  106,  106,  815,  815,  107,  216,  815,
      815,  815,  221,  815,  815,  815,  815,  112,  815,  112,
      216,  112,  815,  815,  815,  234,  220,  233,  234,  850,
      815,  851,  852,  853,  851,  245,  217,  107,  220,  854,
      245,  245,  855,  815,  815,  254,  856,  815,  221,  815,
      221,  224,  226,  850,  856,  857,  258,  815,  258,  857,
      258,  815,  815,  268,  273,  245,  273,  234,  235,  234,
      220,  234,  815,  815,  283,  858,  859,  859,  860,  861,
      860,  861,  283,  284,  283,  858,  815,  815,  862,  296,

      863,  297,  815,  297,  863,  297,  815,  864,  284,  307,
      865,  815,  862,  296,  305,  866,  867,  815,  318,  313,
      296,  312,  815,  312,  318,  312,  815,  297,  303,  297,
      305,  297,  815,  313,  865,  318,  868,  815,  815,  815,
      869,  318,  318,  815,  815,  815,  346,  815,  815,  815,
      815,  815,  815,  815,  220,  348,  220,  815,  815,  358,
      350,  815,  815,  358,  359,  358,  350,  362,  363,  815,
      815,  350,  351,  352,  362,  815,  362,  351,  362,  815,
      363,  815,  363,  352,  380,  363,  815,  815,  387,  340,
      815,  815,  362,  815,  362,  351,  362,  380,  815,  815,

      815,  400,  348,  400,  400,  363,  815,  363,  352,  380,
      363,  815,  371,  350,  352,  870,  815,  417,  871,  870,
      815,  421,  354,  220,  220,  815,  815,  426,  872,  815,
      815,  873,  872,  417,  430,  815,  430,  417,  430,  815,
      359,  440,  815,  815,  815,  874,  420,  417,  417,  815,
      363,  382,  363,  352,  363,  875,  875,  457,  815,  815,
      459,  876,  815,  877,  878,  815,  466,  815,  879,  815,
      880,  878,  466,  466,  881,  815,  815,  476,  880,  476,
      815,  815,  481,  815,  481,  815,  476,  477,  476,  479,
      476,  472,  479,  479,  882,  484,  484,  815,  815,  815,

      500,  815,  815,  815,  815,  505,  505,  815,  815,  500,
      352,  815,  815,  500,  500,  502,  815,  352,  502,  352,
      815,  815,  498,  815,  815,  352,  502,  352,  815,  815,
      815,  530,  509,  815,  363,  508,  815,  815,  815,  815,
      815,  540,  538,  540,  815,  815,  815,  815,  547,  502,
      547,  547,  815,  815,  553,  539,  545,  553,  815,  534,
      541,  534,  500,  534,  547,  486,  815,  486,  498,  486,
      815,  547,  815,  547,  502,  547,  547,  815,  363,  554,
      363,  352,  547,  363,  815,  815,  585,  524,  571,  585,
      883,  517,  352,  352,  815,  531,  595,  537,  553,  595,

      531,  595,  537,  540,  553,  815,  508,  537,  538,  539,
      540,  541,  540,  538,  540,  545,  553,  554,  553,  539,
      545,  553,  508,  537,  539,  553,  554,  553,  539,  553,
      884,  815,  885,  886,  815,  815,  635,  885,  635,  887,
      815,  641,  513,  500,  500,  502,  815,  815,  502,  502,
      502,  815,  498,  498,  815,  815,  502,  502,  502,  815,
      508,  509,  500,  352,  513,  538,  538,  815,  517,  539,
      668,  539,  815,  517,  352,  502,  352,  815,  524,  655,
      524,  815,  513,  538,  538,  668,  517,  539,  668,  539,
      815,  545,  815,  545,  668,  545,  545,  815,  541,  698,

      500,  698,  547,  545,  693,  545,  668,  545,  545,  815,
      815,  815,  554,  712,  352,  547,  712,  547,  693,  547,
      502,  547,  547,  571,  815,  571,  655,  571,  571,  517,
      539,  539,  595,  531,  595,  537,  540,  553,  887,  638,
      638,  513,  500,  500,  502,  648,  668,  668,  668,  815,
      648,  502,  502,  502,  815,  655,  655,  655,  815,  648,
      668,  668,  668,  815,  517,  352,  502,  352,  508,  537,
      538,  539,  540,  541,  540,  538,  540,  545,  815,  547,
      693,  547,  502,  547,  547,  553,  554,  553,  539,  545,
      553,  815,  648,  502,  502,  502,  513,  538,  538,  668,

      517,  539,  668,  539,  545,  693,  545,  668,  545,  545,
      648,  668,  668,  668,    0,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815
    } ;

static const flex_int16_t yy_nxt[3739] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,    4,    4,   10,
       11,   12,   13,   14,   15,   38,   80,   73,   16,   17,
       18,   15,   15,   15,   18,   18,   19,   18,   20,   38,
       80,   21,   22,   23,   24,   20,   20,   20,   24,   24,
       20,   24,   26,   27,   30,   38,   80,   35,   18,   31,
       28,   26,   27,  169,  169,  792,   90,  170,  170,   28,
       32,  191,  779,  764,   33,   34,   35,   32,   32,   32,
       35,   35,   36,   35,   37,  759,  750,   38,   39,   40,
       41,   37,   37,   37,   41,   41,   37,   41,   43,  711,
      710,   44,   45,   46,   47,   43,   43,   43,   47,   47,

       43,   47,   38,   49,   50,   51,  691,  673,   52,   53,
       54,   55,   51,   51,   51,   55,   55,   56,   55,   21,
       57,   58,   60,   61,  169,  169,  792,   90,  170,  170,
       62,   64,  191,  660,   21,   65,   66,   67,   64,   64,
       64,   67,   67,   68,   67,   60,   61,   90,  750,  792,
      378,  169,  191,   62,   70,  170,  634,  603,   71,   72,
       73,   70,   70,   70,   73,   73,   74,   73,   75,  606,
      764,   44,   76,   77,   78,   75,   75,   75,   78,   78,
       75,   78,   38,   49,   50,   81,  578,  710,   82,   83,
       84,   85,   81,   81,   81,   85,   85,   81,   85,   44,

       86,   87,   89,  559,  779,   90,   91,   92,   93,   89,
       94,   89,   93,   93,   95,   93,   97,  378,  546,   98,
       99,  100,  101,   97,  102,   97,  101,  101,   97,  101,
       93,  779,  764,   90,  104,  105,   93,   93,  106,   93,
       93,   93,  107,   93,  108,  759,  529,   90,  109,  110,
      111,  108,  112,  108,  111,  111,  113,  111,   44,  114,
      115,   52,  116,  117,  673,  764,  759,  378,  750,  503,
      118,   21,  119,  120,  750,  378,  200,  468,  711,  711,
      121,  123,  124,  691,  603,  606,  603,  606,  673,  125,
      126,  412,  559,   38,  127,  128,  129,  126,  126,  126,

      129,  129,  130,  129,  131,  710,  399,   44,  132,  133,
      134,  131,  131,  131,  134,  134,  135,  134,   38,  137,
      138,  378,  546,  711,  710,  691,  361,  139,  140,  370,
      673,   38,  141,  142,  143,  140,  140,  140,  143,  143,
      144,  143,  145,  673,  378,   52,  146,  147,  148,  145,
      145,  145,  148,  148,  149,  148,  150,  378,  403,   21,
      151,  152,  153,  150,  150,  150,  153,  153,  154,  153,
      123,  124,  403,  378,  344,  475,  333,  327,  125,  156,
      333,  305,   38,  157,  158,  159,  156,  156,  156,  159,
      159,  156,  159,   38,  161,  162,  163,  305,  298,  164,

      165,  166,  167,  163,  168,  163,  167,  167,  163,  167,
      171,  559,  438,  172,  173,  174,  175,  171,  176,  171,
      175,  175,  171,  175,  164,  178,  179,  606,  438,  180,
       44,   86,   87,   38,  161,  162,  450,  181,   82,  182,
      183,  184,  438,  431,   90,  185,  186,  187,  184,  188,
      184,  187,  187,  189,  187,  192,  529,  143,  172,  193,
      194,  195,  192,  196,  192,  195,  195,  192,  195,  164,
      178,  179,  438,  559,  180,  197,  578,  546,  164,  198,
      199,  200,  197,  201,  197,  200,  200,  197,  200,  202,
      227,  559,  203,  204,  205,  206,  202,  207,  202,  206,

      206,  208,  206,   98,  209,  210,  546,  361,  211,  187,
      370,  361,   90,  213,  214,  187,  187,  215,  187,  187,
      187,  216,  187,  111,  370,  529,   90,  217,  218,  111,
      111,  219,  111,  111,  111,  220,  111,  221,  231,  200,
       98,  222,  223,  224,  221,  225,  221,  224,  224,  226,
      224,  228,  200,  468,   90,  229,  230,  231,  228,  232,
      228,  231,  231,  233,  231,  234,  200,  333,   90,  235,
      236,  237,  234,  238,  234,  237,  237,  239,  237,   98,
      209,  210,  464,  200,  211,   44,  240,  241,  464,  177,
      468,  464,  298,  298,  242,   38,  137,  138,  412,  243,

      143,  272,  450,  370,  139,   38,  244,  245,  431,  143,
      353,  143,  412,  399,  246,   52,  247,  248,  370,  353,
      344,  316,  103,   96,  249,   21,  250,  251,  333,  177,
      327,  316,  316,  298,  252,  254,  177,  159,   44,  255,
      256,  257,  254,  254,  254,  257,  257,  258,  257,  259,
      160,  272,   82,  260,  261,  262,  259,  259,  259,  262,
      262,  263,  262,   44,  264,  265,  227,  272,  129,  136,
      129,  136,  266,   38,  244,  245,  253,  212,   88,  227,
      212,  177,  246,  267,  103,   96,   44,  268,  269,  270,
      267,  267,  267,  270,  270,  271,  270,  273,  177,  160,

       44,  274,  275,  276,  273,  273,  273,  276,  276,  277,
      276,  278,  155,  136,   52,  279,  280,  281,  278,  278,
      278,  281,  281,  282,  281,  283,  122,   88,   82,  284,
      285,  286,  283,  283,  283,  286,  286,  283,  286,  164,
      288,  103,   96,   88,  289,  164,  291,   48,   42,   48,
      292,  293,   42,   69,  164,  294,  295,  296,  293,  297,
      293,  296,  296,  293,  296,  164,  299,  300,   63,   59,
      301,  302,   48,   42,  164,  303,  304,  305,  302,  306,
      302,  305,  305,  302,  305,  307,   25,   29,  308,  309,
      310,  311,  307,  312,  307,  311,  311,  307,  311,  172,

      313,  314,   25,  815,  315,  164,  317,  318,  815,  815,
      319,   82,  320,  321,  172,  313,  314,  815,  815,  315,
      184,  815,  815,   90,  185,  186,  187,  184,  188,  184,
      187,  187,  189,  187,  322,  815,  815,   98,  323,  324,
      325,  322,  326,  322,  325,  325,  322,  325,  328,  815,
      815,  172,  329,  330,  331,  328,  332,  328,  331,  331,
      328,  331,  164,  317,  318,  815,  815,  319,   89,  815,
      815,   90,   91,   92,   93,   89,   94,   89,   93,   93,
       95,   93,   97,  815,  815,   98,   99,  100,  101,   97,
      102,   97,  101,  101,   97,  101,   93,  815,  815,   90,

      104,  105,   93,   93,  106,   93,   93,   93,  107,   93,
      172,  334,  335,  815,  815,  336,  206,  815,  815,  203,
      337,  338,  206,  206,  339,  206,  206,  206,  340,  206,
       98,  341,  342,  815,  815,  343,  231,  815,  815,   90,
      345,  346,  231,  231,  347,  231,  231,  231,  348,  231,
      224,  815,  815,   98,  349,  350,  224,  224,  351,  224,
      224,  224,  352,  224,  237,  815,  815,   90,  354,  355,
      237,  237,  356,  237,  237,  237,  357,  237,  358,  815,
      815,  164,  359,  360,  361,  358,  362,  358,  361,  361,
      363,  361,  364,  815,  815,  172,  365,  366,  367,  364,

      368,  364,  367,  367,  369,  367,  361,  815,  815,  164,
      371,  372,  361,  361,  373,  361,  361,  361,  374,  361,
      375,  815,  815,  164,  376,  377,  378,  375,  379,  375,
      378,  378,  380,  378,  381,  815,  815,  164,  382,  383,
      384,  381,  385,  381,  384,  384,  386,  384,  387,  815,
      815,  203,  388,  389,  390,  387,  391,  387,  390,  390,
      392,  390,  393,  815,  815,   98,  394,  395,  396,  393,
      397,  393,  396,  396,  398,  396,  400,  815,  815,   90,
      401,  402,  403,  400,  404,  400,  403,  403,  405,  403,
      234,  815,  815,   90,  235,  236,  237,  234,  238,  234,

      237,  237,  239,  237,  406,  815,  815,   98,  407,  408,
      409,  406,  410,  406,  409,  409,  411,  409,   44,  264,
      265,  815,  815,  815,  815,  815,  815,  266,  129,  815,
      815,   38,  137,  138,  129,  243,  129,  129,  129,  129,
      139,  129,   38,  244,  245,  815,  815,  815,  815,  815,
      815,  246,   82,  413,  414,  815,  815,  815,  815,  815,
      815,  415,   44,  416,  417,  815,  815,  815,  815,  815,
      815,  418,   38,  244,  245,  815,  419,  815,  815,  815,
      815,  246,   44,  420,  421,  815,  815,  815,  815,  815,
      815,  422,   52,  423,  424,  815,  815,  815,  815,  815,

      815,  425,  426,  815,  815,   38,  427,  428,  429,  426,
      426,  426,  429,  429,  430,  429,  254,  815,  815,   44,
      255,  256,  257,  254,  254,  254,  257,  257,  258,  257,
       38,  432,  433,  815,  815,  815,  815,  815,  815,  434,
      435,  815,  815,   38,  436,  437,  438,  435,  435,  435,
      438,  438,  439,  438,  440,  815,  815,  172,  441,  442,
      443,  440,  444,  440,  443,  443,  445,  443,   44,  264,
      265,  815,  815,  815,  815,  815,  815,  266,   38,  432,
      433,  815,  446,  815,  815,  815,  815,  434,   38,  447,
      448,  815,  815,  815,  815,  815,  815,  449,  267,  815,

      815,   44,  268,  269,  270,  267,  267,  267,  270,  270,
      271,  270,   38,  447,  448,  815,  815,  815,  815,  815,
      815,  449,  451,  815,  815,   82,  452,  453,  454,  451,
      451,  451,  454,  454,  455,  454,  140,  815,  815,   38,
      141,  142,  143,  140,  140,  140,  143,  143,  144,  143,
      293,  815,  815,  164,  294,  295,  296,  293,  297,  293,
      296,  296,  293,  296,  171,  815,  815,  172,  173,  174,
      175,  171,  176,  171,  175,  175,  171,  175,  164,  299,
      300,  815,  815,  301,  164,  288,  815,  815,  815,  289,
      164,  288,  815,  815,  815,  289,  164,  457,  815,  815,

      815,  458,  164,  291,  815,  815,  815,  292,  164,  457,
      815,  815,  815,  458,  164,  291,  815,  815,  815,  292,
      164,  299,  300,  815,  815,  301,  302,  815,  815,  164,
      303,  304,  305,  302,  306,  302,  305,  305,  302,  305,
      459,  815,  815,  308,  460,  461,  462,  459,  463,  459,
      462,  462,  459,  462,  172,  313,  314,  815,  815,  315,
      164,  465,  466,  815,  815,  467,  328,  815,  815,  172,
      329,  330,  331,  328,  332,  328,  331,  331,  328,  331,
      164,  465,  466,  815,  815,  467,  163,  815,  815,  164,
      165,  166,  167,  163,  168,  163,  167,  167,  163,  167,

      164,  178,  179,  815,  815,  180,  197,  815,  815,  164,
      198,  199,  200,  197,  201,  197,  200,  200,  197,  200,
      172,  313,  314,  815,  815,  315,  308,  469,  470,  815,
      815,  471,  172,  472,  473,  815,  815,  474,  200,  815,
      815,  164,  317,  318,  200,  475,  319,  200,  200,  200,
      200,  200,  476,  815,  815,  172,  477,  478,  479,  476,
      480,  476,  479,  479,  476,  479,  481,  815,  815,  203,
      482,  483,  484,  481,  485,  481,  484,  484,  486,  484,
      487,  815,  815,  308,  488,  489,  490,  487,  491,  487,
      490,  490,  487,  490,  164,  178,  179,  815,  316,  180,

       98,  209,  210,  815,  815,  211,   93,  815,  815,   90,
      104,  105,   93,  212,  106,   93,   93,   93,  107,   93,
      187,  815,  815,   90,  213,  214,  187,  187,  215,  187,
      187,  187,  216,  187,  111,  815,  815,   90,  217,  218,
      111,  111,  219,  111,  111,  111,  220,  111,  172,  492,
      493,  815,  815,  494,  484,  815,  815,  203,  495,  496,
      484,  484,  497,  484,  484,  484,  498,  484,  396,  815,
      815,   98,  499,  500,  396,  396,  501,  396,  396,  396,
      502,  396,  231,  815,  815,   90,  345,  346,  231,  503,
      347,  231,  231,  231,  348,  231,  403,  815,  815,   90,

      504,  505,  403,  403,  506,  403,  403,  403,  507,  403,
      367,  815,  815,  172,  508,  509,  367,  367,  510,  367,
      367,  367,  511,  367,  361,  815,  815,  164,  371,  372,
      361,  512,  373,  361,  361,  361,  374,  361,  378,  815,
      815,  164,  513,  514,  378,  378,  515,  378,  378,  378,
      516,  378,  384,  815,  815,  164,  517,  518,  384,  384,
      519,  384,  384,  384,  520,  384,  390,  815,  815,  203,
      521,  522,  390,  390,  523,  390,  390,  390,  524,  390,
      409,  815,  815,   98,  525,  526,  409,  409,  527,  409,
      409,  409,  528,  409,  358,  815,  815,  164,  359,  360,

      361,  358,  362,  358,  361,  361,  363,  361,  440,  815,
      815,  172,  441,  442,  443,  440,  444,  440,  443,  443,
      445,  443,  375,  815,  815,  164,  376,  377,  378,  375,
      379,  375,  378,  378,  380,  378,  381,  815,  815,  164,
      382,  383,  384,  381,  385,  381,  384,  384,  386,  384,
      530,  815,  815,  308,  531,  532,  533,  530,  534,  530,
      533,  533,  535,  533,  443,  815,  815,  172,  536,  537,
      443,  443,  538,  443,  443,  443,  539,  443,  540,  815,
      815,  172,  541,  542,  543,  540,  544,  540,  543,  543,
      545,  543,  547,  815,  815,  164,  548,  549,  550,  547,

      551,  547,  550,  550,  552,  550,  553,  815,  815,  172,
      554,  555,  556,  553,  557,  553,  556,  556,  558,  556,
      108,  815,  815,   90,  109,  110,  111,  108,  112,  108,
      111,  111,  113,  111,  221,  815,  815,   98,  222,  223,
      224,  221,  225,  221,  224,  224,  226,  224,  228,  815,
      815,   90,  229,  230,  231,  228,  232,  228,  231,  231,
      233,  231,  234,  815,  815,   90,  235,  236,  237,  234,
      238,  234,  237,  237,  239,  237,  560,  815,  815,  172,
      561,  562,  563,  560,  564,  560,  563,  563,  565,  563,
      566,  815,  815,  203,  567,  568,  569,  566,  570,  566,

      569,  569,  571,  569,  400,  815,  815,   90,  401,  402,
      403,  400,  404,  400,  403,  403,  405,  403,  572,  815,
      815,   98,  573,  574,  575,  572,  576,  572,  575,  575,
      577,  575,  579,  815,  815,  172,  580,  581,  582,  579,
      583,  579,  582,  582,  584,  582,  585,  815,  815,  203,
      586,  587,  588,  585,  589,  585,  588,  588,  590,  588,
       44,  416,  417,  815,  815,  815,  815,  815,  815,  418,
      438,  815,  815,   38,  447,  448,  438,  591,  438,  438,
      438,  438,  449,  438,   82,  592,  593,  815,  815,  815,
      815,  815,  815,  594,   44,  416,  417,  815,  815,  815,

      815,  815,  815,  418,  143,  815,  815,   38,  244,  245,
      143,  419,  143,  143,  143,  143,  246,  143,  426,  815,
      815,   38,  427,  428,  429,  426,  426,  426,  429,  429,
      430,  429,  254,  815,  815,   44,  255,  256,  257,  254,
      254,  254,  257,  257,  258,  257,   38,  432,  433,  815,
      815,  815,  815,  815,  815,  434,  435,  815,  815,   38,
      436,  437,  438,  435,  435,  435,  438,  438,  439,  438,
      595,  815,  815,   82,  596,  597,  598,  595,  595,  595,
      598,  598,  599,  598,   44,  264,  265,  815,  815,  815,
      815,  815,  815,  266,   38,  432,  433,  815,  446,  815,

      815,  815,  815,  434,  267,  815,  815,   44,  268,  269,
      270,  267,  267,  267,  270,  270,  271,  270,  600,  815,
      815,  164,  601,  602,  603,  600,  604,  600,  603,  603,
      605,  603,  603,  815,  815,  164,  607,  608,  603,  603,
      609,  603,  603,  603,  610,  603,  611,  815,  815,  164,
      612,  613,  614,  611,  615,  611,  614,  614,  616,  614,
      617,  815,  815,  164,  618,  619,  620,  617,  621,  617,
      620,  620,  622,  620,   82,  623,  624,  815,  815,  815,
      815,  815,  815,  625,  626,  815,  815,   82,  627,  628,
      629,  626,  626,  626,  629,  629,  630,  629,  164,  457,

      815,  815,  815,  458,  164,  457,  815,  815,  815,  458,
      293,  815,  815,  164,  294,  295,  296,  293,  297,  293,
      296,  296,  293,  296,  171,  815,  815,  172,  173,  174,
      175,  171,  176,  171,  175,  175,  171,  175,  164,  299,
      300,  815,  815,  301,  302,  815,  815,  164,  303,  304,
      305,  302,  306,  302,  305,  305,  302,  305,  308,  631,
      632,  815,  815,  633,  172,  472,  473,  815,  815,  474,
      305,  815,  815,  164,  465,  466,  305,  634,  467,  305,
      305,  305,  305,  305,  635,  815,  815,  308,  636,  637,
      638,  635,  639,  635,  638,  638,  635,  638,  172,  313,

      314,  815,  815,  315,  167,  815,  815,  164,  178,  179,
      167,  316,  180,  167,  167,  167,  167,  167,  164,  317,
      318,  815,  815,  319,  172,  472,  473,  815,  815,  474,
      308,  640,  641,  815,  815,  642,  197,  815,  815,  164,
      198,  199,  200,  197,  201,  197,  200,  200,  197,  200,
      328,  815,  815,  172,  329,  330,  331,  328,  332,  328,
      331,  331,  328,  331,  164,  317,  318,  815,  815,  319,
      184,  815,  815,   90,  185,  186,  187,  184,  188,  184,
      187,  187,  189,  187,  322,  815,  815,   98,  323,  324,
      325,  322,  326,  322,  325,  325,  322,  325,  187,  815,

      815,   90,  213,  214,  187,  187,  215,  187,  187,  187,
      216,  187,  228,  815,  815,   90,  229,  230,  231,  228,
      232,  228,  231,  231,  233,  231,   98,  341,  342,  815,
      815,  343,  231,  815,  815,   90,  345,  346,  231,  231,
      347,  231,  231,  231,  348,  231,  563,  815,  815,  172,
      643,  644,  563,  563,  645,  563,  563,  563,  646,  563,
      378,  815,  815,  164,  513,  514,  378,  647,  515,  378,
      378,  378,  516,  378,  550,  815,  815,  164,  648,  649,
      550,  550,  650,  550,  550,  550,  651,  550,  569,  815,
      815,  203,  652,  653,  569,  569,  654,  569,  569,  569,

      655,  569,  575,  815,  815,   98,  656,  657,  575,  575,
      658,  575,  575,  575,  659,  575,  403,  815,  815,   90,
      504,  505,  403,  660,  506,  403,  403,  403,  507,  403,
      443,  815,  815,  172,  536,  537,  443,  443,  538,  443,
      443,  443,  539,  443,  361,  815,  815,  164,  371,  372,
      361,  512,  373,  361,  361,  361,  374,  361,  533,  815,
      815,  308,  661,  662,  533,  533,  663,  533,  533,  533,
      664,  533,  543,  815,  815,  172,  665,  666,  543,  543,
      667,  543,  543,  543,  668,  543,  556,  815,  815,  172,
      669,  670,  556,  556,  671,  556,  556,  556,  672,  556,

      224,  815,  815,   98,  349,  350,  224,  224,  351,  224,
      224,  224,  352,  224,  111,  815,  815,   90,  217,  218,
      111,  353,  219,  111,  111,  111,  220,  111,  237,  815,
      815,   90,  354,  355,  237,  237,  356,  237,  237,  237,
      357,  237,  582,  815,  815,  172,  674,  675,  582,  582,
      676,  582,  582,  582,  677,  582,  588,  815,  815,  203,
      678,  679,  588,  588,  680,  588,  588,  588,  681,  588,
      358,  815,  815,  164,  359,  360,  361,  358,  362,  358,
      361,  361,  363,  361,  440,  815,  815,  172,  441,  442,
      443,  440,  444,  440,  443,  443,  445,  443,  375,  815,

      815,  164,  376,  377,  378,  375,  379,  375,  378,  378,
      380,  378,  603,  815,  815,  164,  607,  608,  603,  682,
      609,  603,  603,  603,  610,  603,  614,  815,  815,  164,
      683,  684,  614,  614,  685,  614,  614,  614,  686,  614,
      620,  815,  815,  164,  687,  688,  620,  620,  689,  620,
      620,  620,  690,  620,  611,  815,  815,  164,  612,  613,
      614,  611,  615,  611,  614,  614,  616,  614,  540,  815,
      815,  172,  541,  542,  543,  540,  544,  540,  543,  543,
      545,  543,  692,  815,  815,  164,  693,  694,  695,  692,
      696,  692,  695,  695,  697,  695,  698,  815,  815,  308,

      699,  700,  701,  698,  702,  698,  701,  701,  703,  701,
      547,  815,  815,  164,  548,  549,  550,  547,  551,  547,
      550,  550,  552,  550,  704,  815,  815,  172,  705,  706,
      707,  704,  708,  704,  707,  707,  709,  707,  617,  815,
      815,  164,  618,  619,  620,  617,  621,  617,  620,  620,
      622,  620,  553,  815,  815,  172,  554,  555,  556,  553,
      557,  553,  556,  556,  558,  556,  712,  815,  815,  308,
      713,  714,  715,  712,  716,  712,  715,  715,  717,  715,
      393,  815,  815,   98,  394,  395,  396,  393,  397,  393,
      396,  396,  398,  396,  400,  815,  815,   90,  401,  402,

      403,  400,  404,  400,  403,  403,  405,  403,  718,  815,
      815,  172,  719,  720,  721,  718,  722,  718,  721,  721,
      723,  721,  724,  815,  815,  203,  725,  726,  727,  724,
      728,  724,  727,  727,  729,  727,  234,  815,  815,   90,
      235,  236,  237,  234,  238,  234,  237,  237,  239,  237,
      406,  815,  815,   98,  407,  408,  409,  406,  410,  406,
      409,  409,  411,  409,   82,  730,  731,  815,  815,  815,
      815,  815,  815,  732,  600,  815,  815,  164,  601,  602,
      603,  600,  604,  600,  603,  603,  605,  603,  733,  815,
      815,  308,  734,  735,  736,  733,  737,  733,  736,  736,

      738,  736,  172,  313,  314,  815,  815,  315,  296,  815,
      815,  164,  299,  300,  296,  464,  301,  296,  296,  296,
      296,  296,  164,  465,  466,  815,  815,  467,  308,  739,
      740,  815,  815,  741,  302,  815,  815,  164,  303,  304,
      305,  302,  306,  302,  305,  305,  302,  305,  328,  815,
      815,  172,  329,  330,  331,  328,  332,  328,  331,  331,
      328,  331,  164,  465,  466,  815,  815,  467,  172,  472,
      473,  815,  815,  474,  200,  815,  815,  164,  317,  318,
      200,  475,  319,  200,  200,  200,  200,  200,  701,  815,
      815,  308,  742,  743,  701,  701,  744,  701,  701,  701,

      745,  701,  707,  815,  815,  172,  746,  747,  707,  707,
      748,  707,  707,  707,  749,  707,  396,  815,  815,   98,
      499,  500,  396,  396,  501,  396,  396,  396,  502,  396,
      403,  815,  815,   90,  504,  505,  403,  403,  506,  403,
      403,  403,  507,  403,  721,  815,  815,  172,  751,  752,
      721,  721,  753,  721,  721,  721,  754,  721,  727,  815,
      815,  203,  755,  756,  727,  727,  757,  727,  727,  727,
      758,  727,  695,  815,  815,  164,  760,  761,  695,  695,
      762,  695,  695,  695,  763,  695,  715,  815,  815,  308,
      765,  766,  715,  715,  767,  715,  715,  715,  768,  715,

      409,  815,  815,   98,  525,  526,  409,  409,  527,  409,
      409,  409,  528,  409,  736,  815,  815,  308,  769,  770,
      736,  736,  771,  736,  736,  736,  772,  736,  773,  815,
      815,  308,  774,  775,  776,  773,  777,  773,  776,  776,
      778,  776,  704,  815,  815,  172,  705,  706,  707,  704,
      708,  704,  707,  707,  709,  707,  375,  815,  815,  164,
      376,  377,  378,  375,  379,  375,  378,  378,  380,  378,
      780,  815,  815,  308,  781,  782,  783,  780,  784,  780,
      783,  783,  785,  783,  786,  815,  815,  308,  787,  788,
      789,  786,  790,  786,  789,  789,  791,  789,  381,  815,

      815,  164,  382,  383,  384,  381,  385,  381,  384,  384,
      386,  384,  572,  815,  815,   98,  573,  574,  575,  572,
      576,  572,  575,  575,  577,  575,  172,  472,  473,  815,
      815,  474,  783,  815,  815,  308,  793,  794,  783,  783,
      795,  783,  783,  783,  796,  783,  575,  815,  815,   98,
      656,  657,  575,  575,  658,  575,  575,  575,  659,  575,
      776,  815,  815,  308,  797,  798,  776,  776,  799,  776,
      776,  776,  800,  776,  789,  815,  815,  308,  801,  802,
      789,  789,  803,  789,  789,  789,  804,  789,  805,  815,
      815,  308,  806,  807,  808,  805,  809,  805,  808,  808,

      810,  808,  808,  815,  815,  308,  811,  812,  808,  808,
      813,  808,  808,  808,  814,  808,   38,  815,   38,   41,
      815,   41,   24,  815,   24,   79,  815,   79,   78,  815,
       78,   90,  815,   90,   47,  815,   47,   55,  815,   55,
       67,  815,   67,  129,  815,  129,  159,  815,  159,  164,
      815,  164,  167,  815,  167,   85,  815,   85,  190,  815,
      190,  101,  815,  101,  134,  815,  134,  143,  815,  143,
      148,  815,  148,  153,  815,  153,  257,  815,  257,  287,
      815,  287,  290,  815,  290,  296,  815,  296,  175,  815,
      175,  200,  815,  200,  286,  815,  286,  190,  815,  190,

       90,  815,   90,  195,  815,  195,  325,  815,  325,  257,
      815,  257,  143,  815,  143,  262,  815,  262,  270,  815,
      270,  276,  815,  276,  281,  815,  281,  429,  815,  429,
      438,  815,  438,  296,  815,  296,  287,  815,  287,  456,
      815,  456,  290,  815,  290,  175,  815,  175,  305,  815,
      305,  164,  815,  164,  167,  815,  167,  311,  815,  311,
      331,  815,  331,  101,  815,  101,  479,  815,  479,  270,
      815,  270,  454,  815,  454,  429,  815,  429,  257,  815,
      257,  598,  815,  598,  456,  815,  456,  296,  815,  296,
      462,  815,  462,  331,  815,  331,  175,  815,  175,  200,

      815,  200,  490,  815,  490,  325,  815,  325,  629,  815,
      629,  175,  815,  175,  305,  815,  305,  638,  815,  638,
      331,  815,  331,    3,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815
    } ;

static const flex_int16_t yy_chk[3739] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    4,   42,   42,  827,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    7,   79,
       79,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    9,    9,   12,   80,   80,  820,  816,   12,
        9,   11,   11,   82,   98,  812,   96,   82,   98,   11,
       13,   96,  807,  802,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   20,  798,  794,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   22,  788,
      782,   22,   22,   22,   22,   22,   22,   22,   22,   22,

       22,   22,   24,   24,   24,   25,  775,  766,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   26,
       26,   26,   28,   28,  164,  172,  761,  190,  164,  172,
       28,   33,  190,  756,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   35,   35,  191,  752,  747,
      744,  308,  191,   35,   36,  308,  740,  736,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   39,  735,
      731,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   41,   41,   41,   48,  726,  720,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   49,

       49,   49,   51,  714,  706,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   53,  701,  700,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       55,  694,  688,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   56,  684,  679,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   57,   57,
       57,   59,   59,   59,  675,  670,  666,  663,  657,  653,
       59,   60,   60,   60,  649,  645,  642,  637,  628,  619,
       60,   62,   62,  613,  603,  602,  598,  597,  593,   62,
       64,  587,  581,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   65,  574,  568,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   67,   67,
       67,  563,  562,  555,  549,  542,  533,   67,   68,  532,
      526,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   69,  518,  515,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   71,  510,  507,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       73,   73,  506,  501,  496,  493,  489,  483,   73,   75,
      478,  474,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   78,   78,   78,   81,  467,  461,   81,

       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       83,  453,  449,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   85,   85,   85,  442,  438,   85,
       86,   86,   86,   87,   87,   87,  437,   87,   88,   88,
       88,   94,  434,  428,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   99,  424,  422,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,  101,
      101,  101,  418,  408,  101,  102,  402,  395,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  103,
      389,  383,  103,  103,  103,  103,  103,  103,  103,  103,

      103,  103,  103,  104,  104,  104,  377,  367,  104,  106,
      366,  361,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  107,  360,  355,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  109,  347,  343,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  112,  336,  330,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  113,  325,  324,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  116,
      116,  116,  321,  319,  116,  119,  119,  119,  314,  310,
      304,  300,  295,  285,  119,  120,  120,  120,  280,  120,

      276,  275,  269,  261,  120,  121,  121,  121,  256,  252,
      248,  246,  236,  230,  121,  122,  122,  122,  223,  218,
      214,  210,  205,  203,  122,  123,  123,  123,  199,  194,
      186,  183,  179,  174,  123,  127,  166,  159,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  136,
      158,  152,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  137,  137,  137,  147,  142,  134,  133,
      129,  128,  137,  139,  139,  139,  124,  117,  115,  110,
      105,  100,  139,  141,   92,   90,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  151,   84,   77,

      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  155,   72,   66,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  160,   61,   58,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  169,
      169,   54,   52,   50,  169,  170,  170,   46,   44,   40,
      170,  171,   38,   34,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  175,  175,  175,   31,   27,
      175,  176,   23,   21,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  177,   17,   10,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  178,

      178,  178,    8,    3,  178,  180,  180,  180,    0,    0,
      180,  181,  181,  181,  182,  182,  182,    0,    0,  182,
      184,    0,    0,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  185,    0,    0,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  198,    0,
        0,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  200,  200,  200,    0,    0,  200,  202,    0,
        0,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  204,    0,    0,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  206,    0,    0,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      209,  209,  209,    0,    0,  209,  212,    0,    0,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      213,  213,  213,    0,    0,  213,  216,    0,    0,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      217,    0,    0,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  220,    0,    0,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  221,    0,
        0,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  222,    0,    0,  222,  222,  222,  222,  222,

      222,  222,  222,  222,  222,  222,  224,    0,    0,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      225,    0,    0,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  226,    0,    0,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  227,    0,
        0,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  229,    0,    0,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  233,    0,    0,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      234,    0,    0,  234,  234,  234,  234,  234,  234,  234,

      234,  234,  234,  234,  235,    0,    0,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  240,  240,
      240,    0,    0,    0,    0,    0,    0,  240,  241,    0,
        0,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  242,  242,  242,    0,    0,    0,    0,    0,
        0,  242,  243,  243,  243,    0,    0,    0,    0,    0,
        0,  243,  244,  244,  244,    0,    0,    0,    0,    0,
        0,  244,  245,  245,  245,    0,  245,    0,    0,    0,
        0,  245,  250,  250,  250,    0,    0,    0,    0,    0,
        0,  250,  253,  253,  253,    0,    0,    0,    0,    0,

        0,  253,  254,    0,    0,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  255,    0,    0,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      257,  257,  257,    0,    0,    0,    0,    0,    0,  257,
      258,    0,    0,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  260,    0,    0,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  264,  264,
      264,    0,    0,    0,    0,    0,    0,  264,  265,  265,
      265,    0,  265,    0,    0,    0,    0,  265,  266,  266,
      266,    0,    0,    0,    0,    0,    0,  266,  268,    0,

        0,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  270,  270,  270,    0,    0,    0,    0,    0,
        0,  270,  272,    0,    0,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  273,    0,    0,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      283,    0,    0,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  284,    0,    0,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  286,  286,
      286,    0,    0,  286,  287,  287,    0,    0,    0,  287,
      288,  288,    0,    0,    0,  288,  289,  289,    0,    0,

        0,  289,  290,  290,    0,    0,    0,  290,  291,  291,
        0,    0,    0,  291,  292,  292,    0,    0,    0,  292,
      296,  296,  296,    0,    0,  296,  297,    0,    0,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      298,    0,    0,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  299,  299,  299,    0,    0,  299,
      301,  301,  301,    0,    0,  301,  303,    0,    0,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      305,  305,  305,    0,    0,  305,  307,    0,    0,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,

      311,  311,  311,    0,    0,  311,  312,    0,    0,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      313,  313,  313,    0,    0,  313,  316,  316,  316,    0,
        0,  316,  317,  317,  317,    0,    0,  317,  318,    0,
        0,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  323,    0,    0,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  327,    0,    0,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      333,    0,    0,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  335,  335,  335,    0,  335,  335,

      337,  337,  337,    0,    0,  337,  338,    0,    0,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      339,    0,    0,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  340,    0,    0,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  341,  341,
      341,    0,    0,  341,  344,    0,    0,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  345,    0,
        0,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  346,    0,    0,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  348,    0,    0,  348,

      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      349,    0,    0,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  350,    0,    0,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  351,    0,
        0,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  352,    0,    0,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  353,    0,    0,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      354,    0,    0,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  358,    0,    0,  358,  358,  358,

      358,  358,  358,  358,  358,  358,  358,  358,  359,    0,
        0,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  362,    0,    0,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  363,    0,    0,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      370,    0,    0,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  371,    0,    0,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  376,    0,
        0,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  380,    0,    0,  380,  380,  380,  380,  380,

      380,  380,  380,  380,  380,  380,  382,    0,    0,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      387,    0,    0,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  388,    0,    0,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  391,    0,
        0,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  392,    0,    0,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  394,    0,    0,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      399,    0,    0,  399,  399,  399,  399,  399,  399,  399,

      399,  399,  399,  399,  400,    0,    0,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  401,    0,
        0,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  407,    0,    0,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  412,    0,    0,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      416,  416,  416,    0,    0,    0,    0,    0,    0,  416,
      417,    0,    0,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  419,  419,  419,    0,    0,    0,
        0,    0,    0,  419,  420,  420,  420,    0,    0,    0,

        0,    0,    0,  420,  421,    0,    0,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  426,    0,
        0,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  427,    0,    0,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  429,  429,  429,    0,
        0,    0,    0,    0,    0,  429,  430,    0,    0,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      431,    0,    0,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  432,  432,  432,    0,    0,    0,
        0,    0,    0,  432,  433,  433,  433,    0,  433,    0,

        0,    0,    0,  433,  436,    0,    0,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  440,    0,
        0,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  443,    0,    0,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  444,    0,    0,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      445,    0,    0,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  446,  446,  446,    0,    0,    0,
        0,    0,    0,  446,  450,    0,    0,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  456,  456,

        0,    0,    0,  456,  457,  457,    0,    0,    0,  457,
      459,    0,    0,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  460,    0,    0,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  462,  462,
      462,    0,    0,  462,  463,    0,    0,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  464,  464,
      464,    0,    0,  464,  465,  465,  465,    0,    0,  465,
      466,    0,    0,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  468,    0,    0,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  469,  469,

      469,    0,    0,  469,  470,    0,    0,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  471,  471,
      471,    0,    0,  471,  472,  472,  472,    0,    0,  472,
      475,  475,  475,    0,    0,  475,  476,    0,    0,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      477,    0,    0,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  479,  479,  479,    0,    0,  479,
      481,    0,    0,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  482,    0,    0,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  484,    0,

        0,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  486,    0,    0,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  495,  495,  495,    0,
        0,  495,  498,    0,    0,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  499,    0,    0,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      500,    0,    0,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  502,    0,    0,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  503,    0,
        0,  503,  503,  503,  503,  503,  503,  503,  503,  503,

      503,  503,  504,    0,    0,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  505,    0,    0,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      508,    0,    0,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  509,    0,    0,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  512,    0,
        0,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  513,    0,    0,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  517,    0,    0,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,

      521,    0,    0,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  522,    0,    0,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  524,    0,
        0,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  525,    0,    0,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  529,    0,    0,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      530,    0,    0,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  531,    0,    0,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  534,    0,

        0,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  537,    0,    0,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  538,    0,    0,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      539,    0,    0,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  540,    0,    0,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  541,    0,
        0,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  545,    0,    0,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  546,    0,    0,  546,

      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      547,    0,    0,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  548,    0,    0,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  553,    0,
        0,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  554,    0,    0,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  559,    0,    0,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      567,    0,    0,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  571,    0,    0,  571,  571,  571,

      571,  571,  571,  571,  571,  571,  571,  571,  573,    0,
        0,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  578,    0,    0,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  585,    0,    0,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      586,    0,    0,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  591,  591,  591,    0,    0,    0,
        0,    0,    0,  591,  595,    0,    0,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  606,    0,
        0,  606,  606,  606,  606,  606,  606,  606,  606,  606,

      606,  606,  631,  631,  631,    0,    0,  631,  632,    0,
        0,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  633,  633,  633,    0,    0,  633,  634,  634,
      634,    0,    0,  634,  635,    0,    0,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  636,    0,
        0,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  638,  638,  638,    0,    0,  638,  640,  640,
      640,    0,    0,  640,  641,    0,    0,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  647,    0,
        0,  647,  647,  647,  647,  647,  647,  647,  647,  647,

      647,  647,  648,    0,    0,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  652,    0,    0,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      655,    0,    0,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  656,    0,    0,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  660,    0,
        0,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  668,    0,    0,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  673,    0,    0,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,

      678,    0,    0,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  682,    0,    0,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  691,    0,
        0,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  693,    0,    0,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  698,    0,    0,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      710,    0,    0,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  711,    0,    0,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  712,    0,

        0,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  725,    0,    0,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  739,  739,  739,    0,
        0,  739,  750,    0,    0,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  755,    0,    0,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      759,    0,    0,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  764,    0,    0,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  779,    0,
        0,  779,  779,  779,  779,  779,  779,  779,  779,  779,

      779,  779,  792,    0,    0,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  817,    0,  817,  818,
        0,  818,  819,    0,  819,  821,    0,  821,  822,    0,
      822,  823,    0,  823,  824,    0,  824,  825,    0,  825,
      826,    0,  826,  828,    0,  828,  829,    0,  829,  830,
        0,  830,  831,    0,  831,  832,    0,  832,  833,    0,
      833,  834,    0,  834,  835,    0,  835,  836,    0,  836,
      837,    0,  837,  838,    0,  838,  839,    0,  839,  840,
        0,  840,  841,    0,  841,  842,    0,  842,  843,    0,
      843,  844,    0,  844,  845,    0,  845,  846,    0,  846,

      847,    0,  847,  848,    0,  848,  849,    0,  849,  850,
        0,  850,  851,    0,  851,  852,    0,  852,  853,    0,
      853,  854,    0,  854,  855,    0,  855,  856,    0,  856,
      857,    0,  857,  858,    0,  858,  859,    0,  859,  860,
        0,  860,  861,    0,  861,  862,    0,  862,  863,    0,
      863,  864,    0,  864,  865,    0,  865,  866,    0,  866,
      867,    0,  867,  868,    0,  868,  869,    0,  869,  870,
        0,  870,  871,    0,  871,  872,    0,  872,  873,    0,
      873,  874,    0,  874,  875,    0,  875,  876,    0,  876,
      877,    0,  877,  878,    0,  878,  879,    0,  879,  880,

        0,  880,  881,    0,  881,  882,    0,  882,  883,    0,
      883,  884,    0,  884,  885,    0,  885,  886,    0,  886,
      887,    0,  887,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[16] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
/*
 *
 * CS-252 
 * shell.l: lexical analyzer for shell
 * You have to extend it.
 *
 */
#line 11 "shell.l"

#include <cstring>
#include "y.tab.hh"

static  void yyunput (int c,char *buf_ptr  );

void myunputc(int c) {
  unput(c);
}

void remove_character(char* s, char c) {
  int j, n = strlen(s);
  int escaped = 0; 

  for (int i = j = 0; i < n; i++) {
    if (s[i] != c || escaped) {
      s[j++] = s[i];
      escaped = 0;
    } else {
      escaped = 1;
    }
  }   

  s[j] = '\0';
}

void removeStartAndEnd(char* s) {
  int j, n = strlen(s);

  s[0] = '\0';
  for (int i = 1; i < n; i++) {
    s[i - 1] = s[i];
  }   
  s[n - 2] = '\0';
}

#line 1618 "lex.yy.cc"
#line 1619 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 51 "shell.l"


#line 1839 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 816 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3724 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 53 "shell.l"
{
  return NEWLINE;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 57 "shell.l"
{
  /* Discard spaces and tabs */
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 61 "shell.l"
{
  return GREAT;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 65 "shell.l"
{
  return GREATGREAT;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 69 "shell.l"
{
  return LESS;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 73 "shell.l"
{
  return PIPE;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 77 "shell.l"
{
  return AMPERSAND;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 81 "shell.l"
{
  return TWOGREAT;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 85 "shell.l"
{
  return GREATAMPERSAND;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 89 "shell.l"
{
  return GREATGREATAMPERSAND;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 93 "shell.l"
{ 
  remove_character(yytext, '$');
  remove_character(yytext, '(');
  remove_character(yytext, ')');

  int pin[2], pout[2];
  pipe(pin); pipe(pout);

  int ret = fork();
  if (ret == 0) {
      close(pin[1]);
      close(pout[0]);

      dup2(pin[0], 0);
      close(pin[0]);

      dup2(pout[1], 1);
      close(pout[1]);
      
      // Execute shell executable
      execvp("/proc/self/exe", NULL);
      perror("Error in Child Process");
      exit(1);
  } else if (ret < 0) {
      perror("Error Forking Child");
      exit(1);
  }

  close(pin[0]);
  close(pout[1]);

  char fromChild[100];
  write(pin[1], "ls\n", 4);
  write(pin[1], "exit\n", 6);
  close(pin[1]);

  int n = read(pout[0], fromChild, 1);
  fromChild[n] = '\0';
  close(pout[0]);

  printf("%s", fromChild);

  close(pout[0]);

  for (int i = strlen(fromChild) - 1; i >= 0; i--) {
    char c = ' ';
    if (fromChild[i] == '\n') {
      myunputc(' ');
    } else {
      myunputc(fromChild[i]);
    }
  }
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 147 "shell.l"
{ 
  remove_character(yytext, '\\');
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 153 "shell.l"
{
  removeStartAndEnd(yytext);
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 159 "shell.l"
{
  /* Assume that file names have only alpha chars */
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 164 "shell.l"
ECHO;
	YY_BREAK
#line 2066 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 816 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 816 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 815);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 164 "shell.l"
