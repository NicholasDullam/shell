#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 16
#define YY_END_OF_BUFFER 17
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1240] =
    {   0,
        0,    0,   17,   15,    2,    1,   15,   16,    7,   15,
        5,    3,   12,   16,    6,   15,   15,    0,    0,   12,
        0,   15,    0,   15,    0,    0,    0,    0,    0,    0,
       12,    0,    0,   12,    8,    9,    4,   12,   12,   12,
       12,   12,   12,   15,    0,   14,    0,    0,    0,   14,
       15,    0,   14,    0,    0,    0,   14,    0,    0,    0,
       14,    0,    0,    0,    0,    0,    0,   12,   12,   12,
       12,    0,    0,    0,   12,    0,   12,   12,   10,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   14,   14,   14,   14,   14,   14,   14,

       14,   14,    0,    0,   14,    0,    0,   14,    0,   14,
       14,    0,    0,    0,    0,    0,   11,   12,   11,    0,
        0,    0,    0,   11,    0,   12,   12,   12,   11,   12,
       12,   12,   12,   12,   12,   12,    0,    0,    0,   12,
       13,    0,    0,    0,   13,    0,   12,   12,   12,   12,
       12,   14,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,    0,    0,   14,
        0,   11,   14,   11,   14,    0,   14,   14,   11,    0,
        0,   14,    0,   13,   14,   14,   14,   13,    0,   11,
       11,   11,   11,   11,   11,   11,    0,   14,    0,   11,
       11,   11,   11,   11,    0,    0,    0,    0,   11,   12,
       12,   12,   12,   11,   12,   12,   11,   11,   11,   11,
       11,   12,   12,   12,   11,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   13,   13,   12,    0,   14,
        0,   13,   13,   13,    0,    0,    0,   12,   13,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       14,   14,   14,   14,   14,   14,   14,   14,   11,   11,
       11,   11,   14,   14,   14,   11,   14,   11,   11,   11,
       11,    0,    0,   14,    0,   11,   14,   14,   14,   13,
       14,   13,   13,    0,   14,    0,   13,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,   12,   12,

       11,   12,   12,   12,   12,   11,   12,   12,   11,   11,
       11,   11,   11,   12,   12,   12,   11,   12,   12,   12,
       12,   11,   12,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   12,   12,   12,   11,   12,   12,
       12,   12,   12,   12,   12,   12,   13,   13,   13,   13,
        0,    0,    0,   11,   12,   13,    0,    0,    0,   11,
       13,    0,   12,   12,   12,   11,   12,   12,   13,   13,
       11,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   11,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   11,   11,   11,   14,
       14,   14,   11,   11,   14,   14,   14,   13,    0,   14,
        0,   11,   13,   14,   14,   14,   11,   13,    0,   13,
       13,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   12,   12,   12,   11,   12,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   12,   12,   12,   11,   12,   12,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   12,   12,   12,   11,   12,   12,   12,
       12,   11,   12,   13,   13,   11,   11,   11,   11,   11,
       11,    0,   14,    0,   11,   13,   11,   11,   11,   11,
       11,    0,    0,    0,   11,   12,   13,   12,   12,   12,
       11,   12,   12,   12,   11,   11,   11,   11,   11,   11,
       12,   12,   12,   11,   12,   12,   12,   12,   11,   12,
       13,   13,   11,   11,   11,   11,   11,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   11,   12,   12,   11,   11,   11,   11,   11,   12,
       12,   12,   11,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   11,   11,   11,   11,
       14,   14,   14,   11,   13,   14,   13,   13,   11,   11,
       11,   11,   11,   11,    0,   14,    0,   11,   13,   13,

       13,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   12,   12,   12,   12,   11,   12,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       12,   12,   12,   11,   12,   12,   12,   12,   12,   11,
       12,   12,   12,   11,   11,   11,   11,   11,   11,   12,
       12,   12,   11,   12,   12,   12,   12,   11,   12,   12,
       12,   12,   11,   12,   12,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   12,   12,   12,   11,   12,   12,   12,   12,
       12,   11,   12,   12,   12,   11,   12,   13,   13,   11,
       11,   11,   11,   12,   12,   12,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   11,   12,   12,
       12,   12,   12,   12,   14,   14,   14,   11,   13,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,   12,   12,
       11,   12,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   12,   12,

       12,   11,   12,   12,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   12,   12,   12,   11,   12,   12,   12,   12,   12,
       11,   12,   12,   12,   11,   12,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   12,   12,   12,   11,   12,   12,   12,
       12,   12,   11,   12,   12,   12,   12,   11,   12,   12,
       12,   11,   12,   11,   11,   11,   12,   12,   12,   11,
       12,   12,   12,   11,   11,   11,   11,   11,   11,   12,

       12,   12,   11,   12,   12,   12,   12,   11,   12,   12,
       12,   12,   12,   12,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   12,   12,   12,   11,
       12,   12,   12,   12,   11,   12,   12,   12,   12,   11,
       12,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   12,   12,   11,   12,   12,   12,   12,   11,   12,

       12,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   12,   12,   12,   11,   12,   12,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    6,    1,    7,    1,    8,
        9,    1,    1,    1,    1,    1,    1,    1,    1,   10,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   11,
        1,   12,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   13,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   14,   15,   16,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[17] =
    {   0,
        1,    2,    2,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[1459] =
    {   0,
        0,    0,  658,   16, 7967, 7967,   32,   44,   58,  645,
        0,   44,   71,   83,    0,    0,    0,   46,    0,    0,
        0,   96,  647,  112,  125,  139,  149,  152,  642,  155,
      164,  173,  189,  202,    0,    0,  642,    0,  215,  227,
        0,  241,   47,    0,  643,  257,   56,    0,    0,   14,
        0,  642,    0,   61,    0,    0,  270,  638,  273,  276,
      292,  302,  637,  305,  635,  315,  321,  331,  341,  624,
      350,  359,  372,  384,  396,  412,  425,  438,    0,  451,
      467,  483,  499,  512,   84,  525,  534,    0,  550,  562,
        0,    0,   85,  576,    0,  589,  603,  613,   30,   69,

      616,  625,  619,   85,  625,  631,  637,  650,  663,    0,
        0,  624,  619,  617,  676,    0,  682,  692,  128,  607,
       86,  702,    0,  708,  714,    0,  724,  606,  734,  744,
      754,  596,  764,  774,  595,  127,  783,  796,  808,  820,
      832,  599,  845,    0,  858,  874,  886,  902,  598,  914,
      926,    0,  942,  958,  974,  986, 1002, 1018,    0, 1034,
     1047,  128,    0,    0,    0,    0,    0,  137, 1057,  591,
     1067, 1077, 1090, 1106,    0,    0, 1119,  157,    0,    0,
        0,    0, 1132,  594, 1142,    0,    0,  593, 1151,    0,
     1167,  158,    0,    0,    0, 1180, 1189, 1205, 1221, 1231,

     1245, 1255, 1258,  592, 1261, 1264,    0, 1277,  129, 1283,
     1289, 1295, 1301, 1307, 1313,  141, 1319, 1325, 1331, 1337,
     1343, 1356, 1369, 1382, 1395, 1408, 1421, 1434, 1447, 1460,
     1470, 1476,  591, 1486,  158,  171,  590,    0,    0, 1496,
        0, 1502,  588,    0, 1508,  570, 1518, 1524,  570, 1534,
     1544, 1554, 1564, 1574, 1584, 1594, 1604, 1614,  566,    0,
     1624, 1634, 1644, 1654, 1664,  565, 1674, 1684, 1694, 1704,
     1714,  564, 1724,    0,  563, 1733, 1746, 1758,  561,    0,
        0, 1771,    0, 1784, 1800, 1816,  545, 1832, 1848, 1864,
     1880,  544, 1896, 1912, 1928, 1940, 1956, 1968,  541, 1980,

     1992, 2008, 2020, 2036, 2052, 2068,    0, 2084,    0, 2100,
     2116, 2129, 2145, 2158,  168, 2171,  532, 2181, 2191, 2201,
     2211, 2221,    0, 2234,  537,    0,    0, 2250,    0, 2263,
     2273,    0,    0,  177, 2284, 2297, 2313,    0,  530,    0,
        0,  535, 2323, 2333, 2343,  534,  533,    0,    0,  529,
     2353, 2359, 2365, 2371, 2384, 2397, 2410, 2416, 2422, 2428,
     2434, 2440,  528, 2446,    0, 2452, 2458, 2464, 2470,  527,
        0, 2476,  179,    0, 2482, 2488,  526, 2494,    0, 2507,
     2520, 2533, 2546, 2562, 2578,  525, 2594, 2607, 2613,  524,
        0, 2619,    0, 2629,  507,    0, 2635, 2641, 2651, 2661,

     2671, 2681,  506, 2691,    0, 2701, 2711, 2721,    0, 2731,
      503,    0, 2741,    0, 2751,  502, 2761,    0, 2771, 2781,
     2791, 2801, 2811,    0, 2821,  498,    0,    0, 2831, 2841,
     2851, 2861,  497,  495,    0, 2871,  494,    0,    0, 2881,
     2891, 2901, 2911, 2921, 2931, 2941, 2951, 2964,    0, 2977,
     2993, 3009,  493, 3025, 3041, 3057, 3073, 3089,  478, 3105,
     3121, 3137,    0, 3153,  477, 3169, 3185, 3201,    0, 3217,
     3233,    0, 3249, 3265,  462, 3281, 3297,    0,    0,  461,
        0,    0, 3313,    0, 3329,  446,    0, 3345,    0, 3361,
        0,    0,    0,  445,    0,    0,    0, 3377,  442,    0,

        0, 3393, 3405, 3421, 3433,    0, 3449,    0, 3465, 3481,
        0, 3497, 3513, 3529, 3545, 3561, 3574,  187, 3584,  435,
     3594, 3604, 3617, 3633,    0,    0, 3646, 3656,    0,    0,
      192, 3667,  431,  200, 3677, 3687, 3697, 3707, 3717, 3730,
        0,  436, 3746, 3762,    0,    0, 3775, 3788, 3801, 3811,
     3821,  434,    0,    0,  433,    0, 3831, 3837,    0, 3843,
     3849, 3855, 3861, 3867, 3876, 3892,  432, 3908, 3924,    0,
      429, 3940, 3956,    0,    0,  428, 3972,    0, 3988,    0,
     4004, 4020, 4033, 4039, 4045,  424, 4051, 4061, 4067,  423,
     4077,  421, 4087,    0,  420, 4093, 4103, 4113, 4123,  419,

     4133, 4143,  416,    0, 4153, 4163, 4173, 4183, 4193,  415,
      411, 4203, 4213, 4223, 4233,  410, 4243, 4253, 4263,  408,
        0,  407, 4273, 4283,  406,    0, 4293,  403, 4303,    0,
      400,  399, 4313,  398,    0,    0,  397,  396, 4323, 4333,
     4343, 4353,  395, 4363, 4376, 4392, 4408,  391,    0, 4424,
     4440, 4456, 4472,  388, 4488, 4504,    0, 4520,  387,    0,
     4536, 4552, 4568,  386,    0, 4584, 4600, 4616, 4632,  385,
     4648, 4664, 4680, 4696,    0, 4712,  383,    0, 4728, 4744,
     4760, 4776,  379,    0,    0, 4792, 4808, 4824,    0,    0,
        0, 4840,    0,    0, 4856,    0,    0,    0, 4872,  377,

        0,    0, 4888, 4904,  376,    0, 4920, 4936, 4952, 4968,
        0, 4984, 5000,    0, 5016,    0,  375,    0,    0,    0,
        0,  374,    0,    0,    0, 5032,    0, 5048,    0,    0,
     5061, 5071, 5081, 5091, 5104, 5120,  373,    0,  372, 5133,
        0, 5143, 5153, 5163, 5173, 5183,  371,    0, 5193,    0,
     5203,  366, 5213,    0,    0,    0,  363,    0,    0, 5226,
        0,    0,  362,    0,    0,    0,    0,    0,    0, 5239,
      361,    0,    0,    0,  360,    0, 5249, 5255, 5261,  359,
     5270, 5286,  358, 5302, 5318, 5334,    0, 5350, 5366,    0,
     5382,  354,    0,    0, 5398,    0,  353, 5414, 5430,    0,

        0,    0, 5446, 5462,    0, 5475,    0, 5485,  352,    0,
        0, 5495, 5505, 5515,  351, 5525,    0, 5535,  350,    0,
        0, 5545, 5555, 5565,    0, 5575, 5585,  349,    0,    0,
      345,    0,    0, 5595, 5605, 5615,  344,  343,    0, 5628,
      342,    0,    0, 5644,    0,    0,  341,    0,    0, 5660,
     5676, 5692,  340, 5708, 5724, 5740,    0,    0,  335,    0,
        0,    0, 5756,    0, 5772,  334,    0, 5788, 5804,    0,
     5820,  333,    0,    0, 5836,    0, 5852,    0,    0, 5868,
     5884,  331, 5900, 5916, 5932,    0, 5948,  330,    0,    0,
        0, 5964, 5980, 5996,  325,    0,    0, 6012, 6028, 6044,

        0,    0,    0, 6060,  324,    0,    0,    0, 6076, 6092,
     6108,    0,    0,    0, 6124,    0,    0, 6140, 6156,    0,
        0, 6172,    0, 6188,    0,  323, 6204, 6220, 6236, 6252,
     6268, 6284,    0,    0,    0,  320,    0,    0,    0,    0,
        0, 6300,    0,    0, 6313, 6323, 6333, 6343, 6353,    0,
        0,  315,    0,    0, 6366, 6382,  314, 6398, 6414, 6430,
     6446,    0, 6462,    0,    0,    0, 6475, 6485,  309,    0,
     6495, 6505, 6515, 6525, 6535,  308,  307, 6545, 6555,  305,
     6565,    0, 6578, 6594,  304,    0,    0, 6610, 6626,  296,
        0, 6642, 6658,    0,    0,  295,    0,    0, 6674,    0,

      291, 6690,    0,    0,    0, 6706,  290,    0, 6722, 6738,
     6754, 6770, 6786,  288,    0,    0, 6802, 6818, 6834,    0,
        0,    0, 6850,  287,    0,    0, 6866, 6882, 6898, 6914,
        0,    0,    0, 6930,    0,    0,    0,    0,  286,    0,
        0,    0,    0, 6946,  283,    0, 6962, 6978,    0, 6994,
      281,    0,    0,    0, 7010, 7026, 7042,    0,    0,    0,
     7058,    0,    0,    0,    0,  280,    0,    0,    0, 7074,
     7090,  279,    0,    0, 7106,    0, 7122,    0,    0,    0,
        0,    0,    0,    0, 7138,    0, 7154,    0,  278,    0,
        0,    0, 7170,    0,    0,  277,    0,    0,    0,    0,

        0,  276,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  275,    0,    0, 7186,    0,  252,    0, 7202, 7215,
     7225,  251,    0,    0, 7238,    0,    0,  237,    0,    0,
     7254,    0,    0,    0,    0,    0,    0,  236,    0,    0,
        0,    0,    0,  235,    0,    0,    0, 7270,    0, 7286,
        0,    0,    0,    0,    0,    0, 7302,    0,    0,    0,
        0,    0,    0,  231,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  230,    0,    0,    0,    0, 7318,  229,
        0,    0,    0,    0, 7334,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  228,    0,    0,

        0,    0,    0,  226,    0,    0,    0, 7350,    0,    0,
        0,    0,    0,    0,  210,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  209,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  205,    0,    0,    0, 7967,  208,
     7366, 7369, 7372, 7375,  204,  203, 7378, 7381, 7384, 7387,
     7390, 7393, 7396, 7399, 7402, 7405,  195,  192, 7408,  191,
     7411,  182, 7414, 7417, 7420, 7423, 7426, 7429, 7432, 7435,
     7438, 7441, 7444, 7447, 7450, 7453, 7456, 7459, 7462,  180,
     7465,  173,  172, 7468, 7471,  163,  162,  142, 7474, 7477,
     7480,  114, 7483, 7486, 7489, 7492, 7495, 7498, 7501, 7504,

     7507, 7510, 7513, 7516, 7519, 7522, 7525, 7528, 7531, 7534,
     7537, 7540, 7543, 7546, 7549, 7552, 7555, 7558, 7561, 7564,
     7567, 7570, 7573, 7576, 7579, 7582, 7585, 7588, 7591, 7594,
     7597, 7600, 7603, 7606,  113, 7609,   64, 7612,   61,   52,
     7615, 7618, 7621, 7624, 7627, 7630, 7633, 7636, 7639, 7642,
     7645, 7648, 7651, 7654, 7657, 7660, 7663, 7666, 7669, 7672,
     7675, 7678, 7681, 7684, 7687, 7690, 7693, 7696, 7699, 7702,
     7705, 7708, 7711, 7714, 7717, 7720, 7723, 7726, 7729, 7732,
     7735, 7738, 7741, 7744, 7747, 7750, 7753, 7756, 7759,   19,
     7762, 7765, 7768, 7771, 7774, 7777, 7780, 7783, 7786, 7789,

     7792, 7795, 7798, 7801, 7804, 7807, 7810, 7813, 7816, 7819,
     7822, 7825, 7828, 7831, 7834, 7837, 7840, 7843, 7846, 7849,
     7852, 7855, 7858, 7861, 7864, 7867, 7870, 7873, 7876, 7879,
     7882, 7885, 7888, 7891, 7894, 7897, 7900, 7903, 7906, 7909,
     7912, 7915, 7918, 7921, 7924, 7927, 7930, 7933, 7936, 7939,
     7942, 7945, 7948, 7951, 7954, 7957, 7960, 7963
    } ;

static const flex_int16_t yy_def[1459] =
    {   0,
     1239,    1, 1239, 1239, 1239, 1239, 1239, 1240,    4,    4,
        9,    9, 1239, 1240,    9,    4,    7,   14,    9,   13,
       14, 1239, 1241, 1239, 1242,   22, 1242, 1243,   14, 1244,
     1245, 1246,    7,   13,    9,    9,    9,   13, 1239, 1245,
       34, 1239,   40,   22, 1241, 1239,   27,   26,   27, 1247,
       22, 1241,   46,   27,   26,   27, 1248,   27, 1249, 1250,
       46, 1251,   27, 1252, 1253, 1254, 1252, 1255, 1256,   40,
     1257, 1258, 1259, 1258, 1260,   24,   39,   42,    9, 1239,
     1239, 1239,   80, 1239,   82, 1261, 1262,   42, 1239, 1257,
       78,   42,   90, 1239,   46, 1263,   94, 1263, 1247, 1247,

     1248,   98, 1264, 1265, 1266, 1264, 1267, 1268, 1267,   61,
      101,   27,   67, 1253, 1254,   67, 1269, 1255, 1270,  106,
     1265, 1271,  106, 1272, 1273,  118, 1274,  118, 1275, 1276,
     1277,   82, 1278, 1279,   90,   90, 1280, 1281, 1280, 1282,
     1283,  109, 1284,  109, 1285, 1239, 1282, 1239,  147, 1286,
     1287,   61, 1239, 1239, 1239, 1288, 1239, 1239,   82,  157,
      154,   82,  157,  158,   82,  160,  161,   82, 1289,   82,
     1290, 1278, 1239,  158,  154,  161, 1239,  172,  154,  161,
      172,  118, 1274,  118, 1276,  147,  148,  147, 1286,  161,
     1239,  172,  154,  161,  172, 1291, 1292, 1239,   61, 1293,

      198, 1293, 1294,  202, 1295, 1296,   61, 1297, 1298, 1299,
     1297, 1300, 1301, 1302, 1303, 1298, 1299, 1303, 1304, 1305,
     1306, 1307, 1306, 1308, 1309, 1307, 1309, 1310, 1311, 1312,
     1313, 1312,  232, 1314, 1315, 1315,  211,  217,  211, 1300,
      240, 1316,  240,  240, 1317, 1318, 1319, 1317,  232, 1320,
     1321, 1322, 1321, 1323, 1324, 1325, 1314, 1326,  257,  257,
     1327, 1328, 1329, 1328, 1327,  264, 1330, 1331, 1332, 1333,
     1332,  271, 1334,  271,  271, 1335, 1336, 1337,  223,  226,
      223, 1308,  282, 1338, 1239, 1239,  285, 1239, 1239, 1239,
     1239,  290, 1239, 1239, 1239, 1339, 1239, 1339,  298, 1340,

     1337, 1239, 1340, 1239, 1239, 1239,  305, 1239,  305, 1239,
      304, 1239,  310, 1239,  312, 1330,  312, 1341, 1342, 1343,
     1342, 1344,  290, 1239,  290,  293,  304,  314,  314,  306,
     1341,  328,  314,  331, 1345, 1239,  305,  330,  271,  305,
      337,  271, 1346, 1347, 1346,  345,  298,  297,  298,  298,
     1348, 1349, 1348, 1350, 1351, 1350, 1352, 1352, 1353, 1354,
     1353, 1354,  353, 1349,  353, 1355, 1356, 1355, 1357,  368,
      368, 1358, 1359,  364, 1358, 1360,  356, 1351,  356, 1361,
     1362, 1361, 1363, 1239, 1239,  384, 1239, 1360, 1364,  388,
      388, 1365,  368, 1357,  368,  368, 1366, 1367, 1368, 1367,

     1369, 1370,  400, 1368,  400, 1369, 1370, 1371,  406, 1372,
      406,  406, 1373,  407, 1374,  407, 1373,  407, 1375, 1376,
     1375, 1377, 1378,  406, 1379,  406,  406,  417, 1380, 1381,
     1382, 1381,  432,  432,  407, 1383,  407,  417,  407, 1384,
     1385, 1386, 1386, 1385, 1387, 1387, 1388, 1389,  382, 1363,
     1239, 1239,  451, 1239, 1239, 1239, 1239, 1239,  457, 1239,
     1239, 1239,  455, 1239,  455, 1239, 1239, 1239,  456, 1239,
     1239,  468, 1239, 1239,  473, 1239, 1239,  473,  474,  473,
      476,  477, 1239,  476, 1239,  476,  476, 1239,  477, 1239,
      488,  455,  464,  455,  467,  468,  476, 1239,  476,  476,

      488, 1239, 1390, 1239, 1390,  477, 1239,  488, 1239, 1239,
      509, 1239, 1239, 1239, 1239,  513,  510,  515, 1391,  515,
     1392, 1393, 1239,  514,  510,  517,  509, 1393,  510,  517,
      528, 1394,  528,  528, 1395, 1396, 1395, 1397, 1398, 1239,
      474,  540, 1239, 1239,  509,  510, 1399, 1239, 1400, 1401,
     1400,  551,  476,  485,  476,  476, 1402, 1402,  558, 1403,
     1404, 1403, 1405, 1406, 1239, 1239,  565, 1239, 1239,  566,
      569, 1239, 1239,  565,  566,  565, 1239,  568, 1239,  573,
     1239, 1239, 1407, 1408, 1407,  585, 1409, 1410, 1409,  589,
     1411,  585, 1408,  585,  585, 1412, 1396, 1412, 1413,  551,

     1397, 1414,  601,  601, 1415, 1416, 1417, 1418, 1417,  609,
      609, 1419, 1401, 1419, 1415,  614, 1420, 1413, 1414,  618,
      618,  609, 1411, 1421,  623,  623, 1422,  609, 1423,  609,
      609,  609, 1424,  551,  613,  551,  609,  551, 1425, 1426,
     1425, 1422,  641, 1427, 1428, 1239, 1239,  646,  646, 1239,
     1239, 1239, 1239,  652, 1239, 1239,  655, 1239,  655,  655,
     1239, 1239, 1239,  662,  646, 1239, 1239, 1239, 1239,  668,
     1239, 1239, 1239, 1239,  650, 1239,  650,  650, 1239, 1239,
     1239, 1239,  681,  679,  681, 1239, 1239, 1239,  680,  686,
      656, 1239,  661,  651, 1239,  651,  680,  668, 1239,  668,

      672,  673, 1239, 1239,  703,  703, 1239, 1239, 1239, 1239,
      709, 1239, 1239,  707, 1239,  704,  715,  715,  709,  681,
      682,  681,  681,  686,  709, 1239,  709, 1239,  713,  709,
     1429, 1430, 1429, 1431, 1239, 1239,  735,  703,  733, 1430,
      733, 1432, 1431, 1433, 1432, 1434,  745,  745, 1435,  743,
     1436,  743, 1435,  743,  735,  736,  735,  703,  712, 1239,
      703,  704,  703,  703,  707,  712,  713,  707,  743, 1436,
      743,  743,  703,  704,  703,  703, 1437, 1438, 1437,  779,
     1239, 1239,  781, 1239, 1239, 1239,  785, 1239, 1239,  784,
     1239,  784,  784,  789, 1239,  782,  795, 1239, 1239,  785,

      788,  789, 1239, 1239,  803, 1439,  753, 1440,  753,  753,
      753, 1441, 1434, 1441,  814, 1442,  753, 1440,  753,  753,
      753, 1443, 1444, 1445,  770, 1445, 1442,  826,  827,  818,
      827,  827,  827, 1446, 1447, 1446,  836,  836,  798, 1239,
      798,  798,  803, 1239,  784,  791,  784,  784,  789, 1239,
     1239, 1239,  851, 1239, 1239, 1239,  851,  852,  851,  854,
      855,  856, 1239,  854, 1239,  854,  854, 1239, 1239,  855,
     1239,  855,  868,  855, 1239,  856, 1239,  869,  875, 1239,
     1239,  880, 1239, 1239, 1239,  854, 1239,  854,  854,  868,
      869, 1239, 1239, 1239,  893,  893,  893, 1239, 1239, 1239,

      899,  898,  855, 1239,  855,  868,  855,  875, 1239, 1239,
     1239,  898,  910,  856, 1239,  869,  875, 1239, 1239,  803,
      803, 1239,  803, 1239,  852,  924, 1239, 1239, 1239, 1239,
     1239, 1239,  931,  855,  871,  855,  855,  875,  931,  932,
      931, 1239,  932,  942, 1448, 1449, 1448, 1450, 1451,  924,
      852,  924,  928,  929, 1239, 1239,  955, 1239, 1239, 1239,
     1239,  960, 1239,  960,  961,  960, 1450, 1452,  967,  967,
     1453, 1454, 1455, 1456, 1455,  975,  975, 1451, 1457,  978,
     1453,  978, 1239, 1239,  983,  983,  803, 1239, 1239,  988,
      988, 1239, 1239,  983,  984,  983,  983,  803, 1239,  852,

      999, 1239,  855,  856,  927, 1239,  927,  927, 1239, 1239,
     1239, 1239, 1239, 1012, 1012, 1012, 1239, 1239, 1239, 1018,
     1017,  928, 1239,  928, 1009,  928, 1239, 1239, 1239, 1239,
     1017, 1029,  929, 1239, 1010, 1027, 1002, 1006, 1002, 1002,
     1012, 1018,  992, 1239,  992,  992, 1239, 1239, 1012, 1239,
     1012, 1012, 1012, 1017, 1239, 1239, 1239, 1056, 1056, 1018,
     1239, 1018, 1017,  855, 1023,  855, 1012,  855, 1029, 1239,
     1239, 1070, 1047, 1070, 1239, 1029, 1239, 1017, 1029,  856,
     1034, 1018, 1029,  803, 1239,  803, 1239,  852, 1087,  927,
      928,  929, 1239,  927, 1006,  927,  927, 1009, 1010,  928,

     1023,  928, 1009,  928, 1027,  929, 1034, 1010, 1027,  928,
     1023,  928,  928, 1027, 1239,  984, 1115, 1115, 1239, 1453,
     1458, 1120, 1120, 1120, 1239, 1009, 1013, 1009, 1009, 1009,
     1239, 1010, 1019, 1010, 1131, 1002, 1006, 1002, 1002, 1012,
     1018, 1009, 1013, 1009, 1009, 1009, 1131, 1239, 1017, 1239,
     1017, 1017, 1010, 1019, 1010, 1131, 1239, 1027, 1030, 1131,
     1027,  855, 1023,  855, 1012,  855, 1029, 1027, 1030, 1131,
     1027, 1012, 1013, 1012, 1012, 1012, 1017, 1047, 1239, 1047,
     1047, 1047, 1056, 1017, 1239, 1017, 1017, 1018, 1019, 1018,
     1017, 1029, 1030, 1017, 1029, 1087,  852, 1087,  927,  928,

      929,  927, 1006,  927,  927, 1009, 1010, 1239, 1131, 1150,
     1131, 1131, 1012, 1013, 1012, 1012, 1012, 1017, 1131, 1150,
     1131, 1131,  928, 1023,  928, 1009,  928, 1027, 1017, 1150,
     1017, 1017, 1009, 1013, 1009, 1009, 1009, 1131,    0, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,

     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,

     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239
    } ;

static const flex_int16_t yy_nxt[7984] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,    4,    4,   10,
       11,   12,   13,   14,   15,   14,   16,   45,  100,  503,
       17,   18,   19,   16,   16,   16,   19,   19,   20,   21,
       19,   21,   22,   45,  100,   23,   24,   25,   26,   22,
       22,   22,   26,   26,   22,   27,   26,   27,   28,   29,
       36,   30,  503,   30,   43,   37,   31,   32,   19,   32,
       43,  296,   33,   59,  301,   19,   19,   19,   59,   60,
       34,   38,   45,  100,   60,   39,   40,   41,   38,   38,
       38,   41,   41,   42,   43,   41,   43,   28,   29,  213,
      213,  162,   93,  214,  214,   31,   44,  162,   93,   45,

       46,   47,   48,   44,   44,   44,   48,   48,   44,   49,
       48,   49,   51,  276,  347,   52,   53,   54,   55,   51,
       51,   51,   55,   55,   51,   56,   55,   56,   45,   57,
       58,  114,   59,  213,   93,  162,  236,  214,   60,   48,
       93,  162,   91,   61,  162,  213,   48,   48,   48,  214,
      162,   48,   45,   57,   58,   23,   62,   63,   65,   66,
       67,  114,  301,  296,  335,  335,  236,   68,   69,   70,
      336,  336,  276,  147,  114,  518,   71,   73,   74,  236,
      137,  518,  186,  213,  531,   75,   21,  214,   21,   26,
      531,  147,  137,   76,  518,   93,   26,   26,   26,  531,

      518,   26,   41,   72,   43,  531,   77,  531,   21,   41,
       41,   41, 1208,  531,   78,   80, 1157, 1148,   23,   81,
       82,   83,   80,   80,   80,   83,   83,   84,   85,   83,
       85,   69,   70, 1125,   86, 1093, 1055, 1148, 1028,   71,
       87,   88, 1208, 1011, 1208,   89,   90,   91,   88,   88,
       88,   91,   91,   92,   93,   91,   93,   94,  972,  963,
       52,   95,   96,   97,   94,   94,   94,   97,   97,   94,
       98,   97,   98,   52,  101,  102,  104,  105,  106,   45,
      108,  109, 1157, 1157, 1125, 1093,  909, 1028, 1148,   49,
      892,   49,   97, 1011, 1157, 1148,  110, 1125,  863,   97,

       97,   97,  850,  844,   97,   52,  111,  112,  114,  115,
      116,  850,  823,  117,  607,  607,  806,  118,  121,  122,
      123,  786, 1093,  124,  114,  115,  116, 1028,  125,  117,
     1093, 1028, 1055,  118,  114,  127,  128, 1011,  674,  129,
     1028, 1011,  863,  130,   23,  131,  132,  863,  963,  850,
      430,  430,  822,  133,  134,  135,  414,  972,  409,  972,
      579,  963,  136,  138,  139,  786,  368,  930,  823,  930,
      760,  140,   21,  823,  141,   23,  143,  144,  806,  739,
      760,  909,  708,  930,  863,   27,  909,  145,  138,  139,
      892,  146,  863,  462,  850,  579,  140,   21,  844,  141,

      148,  149,  262,  414,  607,  414,  607,  607,  150,   43,
      607,  151,   55,  429,  607,  606,  152,  750,  607,   55,
       55,   55,  607,  806,   55,   83,  414,  241,  241,  153,
      230,  241,   83,   83,   83,  786,  579,  154,   91,  786,
      708,  414,  155,  760,  531,   91,   91,   91,  518,  708,
      156,  157,  674,  708,   45,  158,  159,  160,  157,  157,
      157,  160,  160,  161,  162,  160,  162,  163,  483,  483,
       52,  164,  165,  166,  163,  163,  163,  166,  166,  167,
      168,  166,  168,  162,  674,  579,   45,  169,  170,  162,
      171,  162,  162,  162,  162,  172,  173,  162,  162,  160,

      462,  617,  430,  174,  430,  606,  160,  160,  160,  617,
      606,  175,  176,  398,  564,   45,  177,  178,  179,  176,
      176,  176,  179,  179,  180,  181,  179,  181,   65,  183,
      184,  397,  579,  377,  564,  363,  296,  185,  187,  188,
      296,  262,  181,  336,  483,  518,  189,   43,  296,   43,
      190,  483,  462,   23,  191,  192,  193,  190,  190,  190,
      193,  193,  194,  195,  193,  195,  134,  135,  221,  196,
      181,  181,  262,  429,  136,  197,  198,  230,  119,   45,
      199,  200,  201,  198,  198,  198,  201,  201,  198,  202,
      201,  202,   45,  203,  204,  397,  205,  208,  230,  205,

      295,  256,  206,  201,  162,  295,  221,  207,   93,  162,
      201,  201,  201,  256,  208,  201,   45,  203,  204,   52,
      101,  102,  209,  210,  211,  119,  113,  212,  216,  217,
      218,   59,  205,  219,  209,  210,  211,   43,  220,  212,
       45,  222,  223,  119,   59,   59,   50,   50,   79,   30,
       49,   50,  224,   52,  226,  227,   35, 1239, 1239, 1239,
     1239, 1239, 1239,   98, 1239,  228,   45,  222,  223, 1239,
      229, 1239, 1239, 1239, 1239, 1239,   49, 1239,  224,  121,
      122,  123, 1239, 1239,  124,  114,  231,  232, 1239, 1239,
      233, 1239, 1239, 1239,  234,  114,  127,  128, 1239, 1239,

      129, 1239, 1239, 1239,  130,  216,  238,  239, 1239, 1239,
      240,  209,  242,  243, 1239, 1239,  244,  246,  247,  248,
     1239, 1239,  249, 1239, 1239, 1239,  250,  121,  252,  253,
     1239, 1239,  254, 1239, 1239, 1239,  255,  114,  258,  259,
     1239, 1239,  260, 1239, 1239, 1239,  261,  114,  263,  264,
     1239, 1239,  265, 1239, 1239, 1239,  266,   52,  267,  268,
     1239, 1239, 1239, 1239, 1239, 1239,  269,   45,  270,  271,
     1239, 1239, 1239, 1239, 1239, 1239,  272,   23,  273,  274,
     1239, 1239, 1239, 1239, 1239, 1239,  275,  138,  139, 1239,
     1239, 1239, 1239, 1239, 1239,  140,   21, 1239,  141,   23,

      143,  144, 1239, 1239, 1239, 1239, 1239, 1239, 1239,   27,
     1239,  145,  138,  139, 1239,  146, 1239, 1239, 1239, 1239,
      140,   21, 1239,  141,  148,  149, 1239, 1239, 1239, 1239,
     1239, 1239,  150,   43, 1239,  151,  277,   29, 1239, 1239,
     1239, 1239, 1239, 1239,  278,   21, 1239,   21,   52,  280,
      281, 1239, 1239, 1239, 1239, 1239, 1239, 1239,   56, 1239,
      282,   45,  284,   58, 1239, 1239, 1239, 1239, 1239, 1239,
     1239,   49, 1239,   49,  285, 1239, 1239,   65,  286,  287,
      285,  285,  285,  285,  285,  285,  288,   64,  285,  289,
      148,  149, 1239, 1239, 1239, 1239, 1239, 1239,  150,   43,

     1239,  151,  290, 1239, 1239,   23,  291,  292,  290,  290,
      290,  290,  290,  290,  293,   85,  290,  294,  297,  298,
     1239, 1239, 1239, 1239, 1239, 1239,  299,   93, 1239,  300,
      302,   70, 1239, 1239, 1239, 1239, 1239, 1239,  303,   43,
     1239,   43,  166, 1239, 1239,   52,  304,  165,  166,  166,
      166,  166,  166,  166,  305,  168,  166,  168,  179, 1239,
     1239,   45,  306,  178,  179,  179,  179,  179,  179,  179,
      307,  181,  179,  181,  193, 1239, 1239,   23,  308,  192,
      193,  193,  193,  193,  193,  193,  309,  195,  193,  195,
      155,   90, 1239, 1239, 1239, 1239, 1239, 1239,  156,   93,

     1239,   93,  157, 1239, 1239,   45,  158,  159,  160,  157,
      157,  157,  160,  160,  161,  162,  160,  162,  310, 1239,
     1239,   52,  311,  312,  313,  310,  310,  310,  313,  313,
      314,  315,  313,  315,  160, 1239, 1239, 1239,  174, 1239,
     1239,  160,  160,  160, 1239, 1239,  175,  176, 1239, 1239,
     1239,  177, 1239, 1239,  176,  176,  176, 1239, 1239,  180,
       52,  316,  317, 1239, 1239, 1239, 1239, 1239, 1239,  318,
      104,  320,  321, 1239, 1239, 1239, 1239, 1239, 1239,  322,
       45,  270,  271, 1239, 1239, 1239, 1239, 1239, 1239,  272,
      323, 1239, 1239,   45,  324,  325,  323,  323,  323,  323,

      323,  323,  326,  162,  323,  162,  313, 1239, 1239, 1239,
      327, 1239, 1239,  313,  313,  313, 1239, 1239,  328,  329,
     1239, 1239,   52,  330,  331,  332,  329,  329,  329,  332,
      332,  333,  334,  332,  334,  121,  252,  253, 1239, 1239,
      254, 1239, 1239, 1239,  255,  114,  263,  264, 1239, 1239,
      265, 1239, 1239, 1239,  266,  297,  298, 1239, 1239, 1239,
     1239, 1239, 1239,  299,   93, 1239,  300,  337, 1239, 1239,
       52,  338,  339,  340,  337,  337,  337,  340,  340,  341,
      342,  340,  342,   65,  344,  345, 1239, 1239, 1239, 1239,
     1239, 1239,  346,  348,  349, 1239, 1239, 1239, 1239, 1239,

     1239,  350,   93, 1239,   93,  198, 1239, 1239,   45,  199,
      200,  201,  198,  198,  198,  201,  201,  198,  202,  201,
      202,   94, 1239, 1239, 1239,   95, 1239, 1239,   94,   94,
       94, 1239, 1239,   94,   45,  203,  204, 1239,  205, 1239,
     1239, 1239, 1239, 1239,  206,  201, 1239, 1239, 1239,  207,
     1239, 1239,  201,  201,  201, 1239, 1239,  201,   45,  203,
      204,   52,  101,  102,  104,  352,  353,   45,  355,  356,
     1239, 1239, 1239, 1239, 1239, 1239, 1239,  202, 1239,  202,
      209,  210,  211, 1239, 1239,  212,  216,  217,  218, 1239,
     1239,  219,  209,  210,  211, 1239,  220,  212,  209,  242,

      243, 1239, 1239,  244,  209,  358, 1239, 1239, 1239,  359,
      209,  361, 1239, 1239, 1239,  362,  209,  364,  365, 1239,
     1239,  366,  216,  217,  218, 1239, 1239,  219,  209,  364,
      365, 1239,  367,  366,  209,  369,  370, 1239, 1239,  371,
      373,  374,  375, 1239, 1239,  376,   45,  222,  223, 1239,
     1239, 1239, 1239, 1239, 1239, 1239,   49, 1239,  224,   52,
      226,  227, 1239, 1239, 1239, 1239, 1239, 1239, 1239,   98,
     1239,  228,   45,  222,  223, 1239,  229, 1239, 1239, 1239,
     1239, 1239,   49, 1239,  224,   45,  284,   58, 1239, 1239,
     1239, 1239, 1239, 1239, 1239,   49, 1239,   49,   45,  378,

      379, 1239, 1239, 1239, 1239, 1239, 1239, 1239,  202, 1239,
      380,   52,  226,  227, 1239, 1239, 1239, 1239, 1239, 1239,
     1239,   98, 1239,  228,   45,  378,  379, 1239,  381, 1239,
     1239, 1239, 1239, 1239,  202, 1239,  380,   45,  383,  204,
     1239, 1239, 1239, 1239, 1239, 1239, 1239,  202, 1239,  202,
      104,  385,  386, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
      103, 1239,  387,  114,  231,  232, 1239, 1239,  233, 1239,
     1239, 1239,  234,  121,  389,  390, 1239, 1239,  391,  114,
      231,  232, 1239,  392,  233, 1239, 1239, 1239,  234,  114,
      258,  259, 1239, 1239,  260, 1239, 1239, 1239,  261,  209,

      242,  243, 1239, 1239,  244,  216,  394,  395, 1239, 1239,
      396,  114,  115,  116, 1239, 1239,  117, 1239, 1239, 1239,
      118,  121,  122,  123, 1239, 1239,  124,  114,  115,  116,
     1239,  125,  117, 1239, 1239, 1239,  118,  114,  127,  128,
     1239, 1239,  129, 1239, 1239, 1239,  130,  209,  399,  400,
     1239, 1239,  401, 1239, 1239, 1239,  402,  216,  404,  405,
     1239, 1239,  406, 1239, 1239, 1239,  407,  209,  399,  400,
     1239,  408,  401, 1239, 1239, 1239,  402,  209,  410,  411,
     1239, 1239,  412, 1239, 1239, 1239,  413,  209,  415,  416,
     1239, 1239,  417, 1239, 1239, 1239,  418,  246,  420,  421,

     1239, 1239,  422, 1239, 1239, 1239,  423,  114,  258,  259,
     1239, 1239,  260, 1239, 1239, 1239,  261,  121,  425,  426,
     1239, 1239,  427, 1239, 1239, 1239,  428,  114,  431,  432,
     1239, 1239,  433, 1239, 1239, 1239,  434,  114,  263,  264,
     1239, 1239,  265, 1239, 1239, 1239,  266,  121,  436,  437,
     1239, 1239,  438, 1239, 1239, 1239,  439,  114,  263,  264,
     1239,  440,  265, 1239, 1239, 1239,  266,  114,  431,  432,
     1239, 1239,  433, 1239, 1239, 1239,  434,   52,  316,  317,
     1239, 1239, 1239, 1239, 1239, 1239,  318,   45,  169,  170,
     1239,  171, 1239, 1239, 1239, 1239,  172,   45,  270,  271,

     1239, 1239, 1239, 1239, 1239, 1239,  272,   52,  441,  442,
     1239, 1239, 1239, 1239, 1239, 1239,  443,   45,  270,  271,
     1239,  335, 1239, 1239, 1239, 1239,  272,   52,  444,  445,
     1239, 1239, 1239, 1239, 1239, 1239,  446,  277,   29, 1239,
     1239, 1239, 1239, 1239, 1239,  278,   21, 1239,   21,   23,
      448,   63, 1239, 1239, 1239, 1239, 1239, 1239, 1239,   27,
     1239,   27,  302,   70, 1239, 1239, 1239, 1239, 1239, 1239,
      303,   43, 1239,   43,   45,  284,   58, 1239, 1239, 1239,
     1239, 1239, 1239, 1239,   49, 1239,   49,   52,  450,  102,
     1239, 1239, 1239, 1239, 1239, 1239, 1239,   98, 1239,   98,

      451, 1239, 1239,  114,  452,  453,  451,  451,  454,  451,
      451,  451,  455,  113,  451,  456,  457, 1239, 1239,  121,
      458,  459,  457,  457,  460,  457,  457,  457,  457,  120,
      457,  461,  463, 1239, 1239,  114,  464,  465,  463,  463,
      466,  463,  463,  463,  467,  126,  463,  468,  469, 1239,
     1239,  114,  470,  116,  469,  469,  471,  469,  469,  469,
      472,  113,  469,  113,  473, 1239, 1239,   45,  474,  475,
      473,  473,  473,  473,  473,  473,  476,  162,  473,  477,
      478, 1239, 1239,   52,  479,  480,  478,  478,  478,  478,
      478,  478,  481,  168,  478,  482,  484, 1239, 1239,   45,

      485,  486,  484,  484,  484,  484,  484,  484,  487,  181,
      484,  488,  489, 1239, 1239,   45,  490,  170,  489,  489,
      489,  489,  489,  489,  491,  162,  489,  162,  492, 1239,
     1239,   65,  493,  494,  492,  492,  492,  492,  492,  492,
      495,  182,  492,  496,  297,  298, 1239, 1239, 1239, 1239,
     1239, 1239,  299,   93, 1239,  300,  497, 1239, 1239,   23,
      498,  499,  497,  497,  497,  497,  497,  497,  500,  195,
      497,  501,  297,  298, 1239,  502, 1239, 1239, 1239, 1239,
      299,   93, 1239,  300,  504,  135, 1239, 1239, 1239, 1239,
     1239, 1239,  505,   93, 1239,   93,  302,   70, 1239, 1239,

     1239, 1239, 1239, 1239,  303,   43, 1239,   43,  506, 1239,
     1239,   23,  507,  132,  506,  506,  506,  506,  506,  506,
      508,   85,  506,   85,  504,  135, 1239, 1239, 1239, 1239,
     1239, 1239,  505,   93, 1239,   93,  313, 1239, 1239,   52,
      327,  312,  313,  313,  313,  313,  313,  313,  328,  315,
      313,  315,  179, 1239, 1239,   45,  306,  178,  179,  179,
      179,  179,  179,  179,  307,  181,  179,  181,  332, 1239,
     1239,   52,  509,  331,  332,  332,  332,  332,  332,  332,
      510,  334,  332,  334,  340, 1239, 1239,   52,  511,  339,
      340,  340,  340,  340,  340,  340,  512,  342,  340,  342,

      513, 1239, 1239,   45,  514,  515,  516,  513,  513,  513,
      516,  516,  517,  518,  516,  518,  310, 1239, 1239, 1239,
      311, 1239, 1239,  310,  310,  310, 1239, 1239,  314,  518,
     1239, 1239,   45,  519,  520,  518,  521,  518,  518,  518,
      518,  522,  523,  518,  518,  516, 1239, 1239, 1239,  524,
     1239, 1239,  516,  516,  516, 1239, 1239,  525,  526, 1239,
     1239,   45,  527,  528,  529,  526,  526,  526,  529,  529,
      530,  531,  529,  531,   52,  316,  317, 1239, 1239, 1239,
     1239, 1239, 1239,  318,   45,  532,  533, 1239, 1239, 1239,
     1239, 1239, 1239,  534,  209,  399,  400, 1239, 1239,  401,

     1239, 1239, 1239,  402,  216,  536,  537, 1239, 1239,  538,
     1239, 1239, 1239,  539,  209,  399,  400, 1239,  408,  401,
     1239, 1239, 1239,  402,  209,  415,  416, 1239, 1239,  417,
     1239, 1239, 1239,  418,  540, 1239, 1239,   52,  541,  542,
      540,  540,  540,  540,  540,  540,  543,  315,  540,  544,
      529, 1239, 1239, 1239,  545, 1239, 1239,  529,  529,  529,
     1239, 1239,  546,  329, 1239, 1239, 1239,  330, 1239, 1239,
      329,  329,  329, 1239, 1239,  333,   45,  532,  533, 1239,
      547, 1239, 1239, 1239, 1239,  534,  548,  104,  550,  551,
     1239, 1239, 1239, 1239, 1239, 1239,  552,  553, 1239, 1239,

       45,  554,  555,  553,  553,  553,  553,  553,  553,  556,
      181,  553,  181,  176, 1239, 1239, 1239,  177, 1239, 1239,
      176,  176,  176, 1239, 1239,  180,  114,  263,  264, 1239,
     1239,  265, 1239, 1239, 1239,  266,  121,  436,  437, 1239,
     1239,  438, 1239, 1239, 1239,  439,  114,  263,  264, 1239,
      440,  265, 1239, 1239, 1239,  266,  209,  364,  365, 1239,
     1239,  366,  216,  217,  218, 1239, 1239,  219,  209,  364,
      365, 1239,  367,  366,   45,  378,  379, 1239, 1239, 1239,
     1239, 1239, 1239, 1239,  202, 1239,  380,   52,  226,  227,
     1239, 1239, 1239, 1239, 1239, 1239, 1239,   98, 1239,  228,

       45,  378,  379, 1239,  381, 1239, 1239, 1239, 1239, 1239,
      202, 1239,  380,  209,  358, 1239, 1239, 1239,  359,  209,
      358, 1239, 1239, 1239,  359,  209,  558, 1239, 1239, 1239,
      559,  209,  361, 1239, 1239, 1239,  362,  209,  558, 1239,
     1239, 1239,  559,  209,  361, 1239, 1239, 1239,  362,  216,
      217,  218, 1239, 1239,  219,  209,  369,  370, 1239, 1239,
      371,  373,  561,  562, 1239, 1239,  563,  209,  369,  370,
     1239, 1239,  371,  216,  394,  395, 1239, 1239,  396,  209,
      210,  211, 1239, 1239,  212,  209,  210,  211, 1239,  220,
      212,  209,  242,  243, 1239, 1239,  244,   52,  226,  227,

     1239, 1239, 1239, 1239, 1239, 1239, 1239,   98, 1239,  228,
       45,  383,  204, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
      202, 1239,  202,  104,  566,  567, 1239, 1239, 1239, 1239,
     1239, 1239, 1239,  351, 1239,  568,   45,  383,  204, 1239,
     1239, 1239, 1239, 1239, 1239, 1239,  202, 1239,  202,   52,
      450,  102, 1239, 1239, 1239, 1239, 1239, 1239, 1239,   98,
     1239,   98,  569, 1239, 1239,  209,  570,  571,  569,  569,
      572,  569,  569,  569,  569,  208,  569,  573,  574, 1239,
     1239,  216,  575,  576,  574,  574,  577,  574,  574,  574,
      574,  215,  574,  578,  580, 1239, 1239,  209,  581,  211,

      580,  580,  582,  580,  580,  580,  580,  208,  580,  208,
      209,  242,  243, 1239, 1239,  244,  216,  584,  585, 1239,
     1239,  586,  246,  588,  589, 1239, 1239,  590, 1239, 1239,
     1239,  591,  216,  394,  395, 1239, 1239,  396,  373,  593,
      594, 1239, 1239,  595,  209,  399,  400, 1239, 1239,  401,
     1239, 1239, 1239,  402,  216,  536,  537, 1239, 1239,  538,
     1239, 1239, 1239,  539,  209,  399,  400, 1239,  408,  401,
     1239, 1239, 1239,  402,  209,  410,  411, 1239, 1239,  412,
     1239, 1239, 1239,  413,  209,  415,  416, 1239, 1239,  417,
     1239, 1239, 1239,  418,  216,  536,  537, 1239, 1239,  538,

     1239, 1239, 1239,  539,  209,  410,  411, 1239, 1239,  412,
     1239, 1239, 1239,  413,  209,  415,  416, 1239, 1239,  417,
     1239, 1239, 1239,  418,  373,  597,  598, 1239, 1239,  599,
     1239, 1239, 1239,  600,  216,  602,  603, 1239, 1239,  604,
     1239, 1239, 1239,  605,  209,  608,  609, 1239, 1239,  610,
     1239, 1239, 1239,  611,  216,  613,  614, 1239, 1239,  615,
     1239, 1239, 1239,  616,  209,  608,  609, 1239, 1239,  610,
     1239, 1239, 1239,  611,  114,  127,  128, 1239, 1239,  129,
     1239, 1239, 1239,  130,  121,  252,  253, 1239, 1239,  254,
     1239, 1239, 1239,  255,  114,  127,  128, 1239,  256,  129,

     1239, 1239, 1239,  130,  114,  258,  259, 1239, 1239,  260,
     1239, 1239, 1239,  261,  114,  263,  264, 1239, 1239,  265,
     1239, 1239, 1239,  266,  216,  619,  620, 1239, 1239,  621,
     1239, 1239, 1239,  622,  246,  624,  625, 1239, 1239,  626,
     1239, 1239, 1239,  627,  114,  431,  432, 1239, 1239,  433,
     1239, 1239, 1239,  434,  121,  629,  630, 1239, 1239,  631,
     1239, 1239, 1239,  632,  114,  431,  432, 1239,  633,  433,
     1239, 1239, 1239,  434,  216,  635,  636, 1239, 1239,  637,
     1239, 1239, 1239,  638,  246,  640,  641, 1239, 1239,  642,
     1239, 1239, 1239,  643,   52,  441,  442, 1239, 1239, 1239,

     1239, 1239, 1239,  443,   45,  532,  533, 1239,  547, 1239,
     1239, 1239, 1239,  534,   45,  532,  533, 1239, 1239, 1239,
     1239, 1239, 1239,  534,   52,  441,  442, 1239, 1239, 1239,
     1239, 1239, 1239,  443,   45,  270,  271, 1239,  335, 1239,
     1239, 1239, 1239,  272,   45,  270,  271, 1239, 1239, 1239,
     1239, 1239, 1239,  272,   45,  284,   58, 1239, 1239, 1239,
     1239, 1239, 1239, 1239,   49, 1239,   49,   52,  645,  112,
     1239, 1239, 1239, 1239, 1239, 1239, 1239,   56, 1239,   56,
       52,  450,  102, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
       98, 1239,   98,  451, 1239, 1239,  114,  452,  453,  451,

      451,  454,  451,  451,  451,  455,  113,  451,  456,  457,
     1239, 1239,  121,  458,  459,  457,  457,  460,  457,  457,
      457,  457,  120,  457,  461,  646, 1239, 1239,  114,  647,
      648,  646,  646,  649,  646,  646,  646,  650,  230,  646,
      651,  463, 1239, 1239,  114,  464,  465,  463,  463,  466,
      463,  463,  463,  467,  126,  463,  468,  469, 1239, 1239,
      114,  470,  116,  469,  469,  471,  469,  469,  469,  472,
      113,  469,  113,  569, 1239, 1239,  209,  570,  571,  569,
      569,  572,  569,  569,  569,  569,  208,  569,  573,  652,
     1239, 1239,  216,  653,  654,  652,  652,  655,  652,  652,

      652,  652,  237,  652,  656,  657, 1239, 1239,  209,  658,
      659,  657,  657,  660,  657,  657,  657,  657,  241,  657,
      661,  580, 1239, 1239,  209,  581,  211,  580,  580,  582,
      580,  580,  580,  580,  208,  580,  208,  662, 1239, 1239,
      246,  663,  664,  662,  662,  665,  662,  662,  662,  666,
      245,  662,  667,  668, 1239, 1239,  121,  669,  670,  668,
      668,  671,  668,  668,  668,  672,  251,  668,  673,  675,
     1239, 1239,  114,  676,  677,  675,  675,  678,  675,  675,
      675,  679,  257,  675,  680,  681, 1239, 1239,  114,  682,
      683,  681,  681,  684,  681,  681,  681,  685,  262,  681,

      686,  687, 1239, 1239,  114,  688,  128,  687,  687,  689,
      687,  687,  687,  690,  126,  687,  126,  691, 1239, 1239,
      121,  692,  123,  691,  691,  693,  691,  691,  691,  691,
      120,  691,  120,  694, 1239, 1239,  114,  695,  232,  694,
      694,  696,  694,  694,  694,  697,  230,  694,  230,  473,
     1239, 1239,   45,  474,  475,  473,  473,  473,  473,  473,
      473,  476,  162,  473,  477,  540, 1239, 1239,   52,  541,
      542,  540,  540,  540,  540,  540,  540,  543,  315,  540,
      544,  484, 1239, 1239,   45,  485,  486,  484,  484,  484,
      484,  484,  484,  487,  181,  484,  488,  489, 1239, 1239,

       45,  490,  170,  489,  489,  489,  489,  489,  489,  491,
      162,  489,  162,  698, 1239, 1239,  104,  699,  700,  698,
      698,  698,  698,  698,  698,  701,  319,  698,  702,  703,
     1239, 1239,   52,  704,  705,  703,  703,  703,  703,  703,
      703,  706,  334,  703,  707,  709, 1239, 1239,   45,  710,
      271,  709,  709,  709,  709,  709,  709,  711,  181,  709,
      181,  712, 1239, 1239,   52,  713,  317,  712,  712,  712,
      712,  712,  712,  714,  315,  712,  315,  715, 1239, 1239,
       52,  716,  717,  715,  715,  715,  715,  715,  715,  718,
      342,  715,  719,  720, 1239, 1239,   65,  721,  722,  720,

      720,  720,  720,  720,  720,  723,  343,  720,  724,  504,
      135, 1239, 1239, 1239, 1239, 1239, 1239,  505,   93, 1239,
       93,  725, 1239, 1239,   23,  726,  274,  725,  725,  725,
      725,  725,  725,  727,  195,  725,  195,  504,  135, 1239,
     1239, 1239, 1239, 1239, 1239,  505,   93, 1239,   93,  728,
     1239, 1239,   52,  729,  268,  728,  728,  728,  728,  728,
      728,  730,  168,  728,  168,  332, 1239, 1239,   52,  509,
      331,  332,  332,  332,  332,  332,  332,  510,  334,  332,
      334,  529, 1239, 1239,   45,  545,  528,  529,  529,  529,
      529,  529,  529,  546,  531,  529,  531,  179, 1239, 1239,

       45,  306,  178,  179,  179,  179,  179,  179,  179,  307,
      181,  179,  181,  513, 1239, 1239,   45,  514,  515,  516,
      513,  513,  513,  516,  516,  517,  518,  516,  518,  310,
     1239, 1239,   52,  311,  312,  313,  310,  310,  310,  313,
      313,  314,  315,  313,  315,  518, 1239, 1239,   45,  519,
      520,  518,  521,  518,  518,  518,  518,  522,  523,  518,
      518,  516, 1239, 1239, 1239,  524, 1239, 1239,  516,  516,
      516, 1239, 1239,  525,  526, 1239, 1239, 1239,  527, 1239,
     1239,  526,  526,  526, 1239, 1239,  530,   52,  316,  317,
     1239, 1239, 1239, 1239, 1239, 1239,  318,  104,  732,  733,

     1239, 1239, 1239, 1239, 1239, 1239,  734,   45,  532,  533,
     1239, 1239, 1239, 1239, 1239, 1239,  534,  735, 1239, 1239,
       45,  736,  737,  735,  735,  735,  735,  735,  735,  738,
      518,  735,  518,  313, 1239, 1239, 1239,  327, 1239, 1239,
      313,  313,  313, 1239, 1239,  328,  329, 1239, 1239, 1239,
      330, 1239, 1239,  329,  329,  329, 1239, 1239,  333,   45,
      532,  533, 1239,  547, 1239, 1239, 1239, 1239,  534,  548,
       52,  441,  442, 1239, 1239, 1239, 1239, 1239, 1239,  443,
      209,  740,  741, 1239, 1239,  742, 1239, 1239, 1239,  743,
      216,  536,  537, 1239, 1239,  538, 1239, 1239, 1239,  539,

      209,  740,  741, 1239,  744,  742, 1239, 1239, 1239,  743,
      209,  746,  747, 1239, 1239,  748, 1239, 1239, 1239,  749,
      209,  751,  752, 1239, 1239,  753, 1239, 1239, 1239,  754,
      755, 1239, 1239,   45,  756,  757,  755,  755,  755,  755,
      755,  755,  758,  518,  755,  759,  761, 1239, 1239,   45,
      762,  763,  761,  761,  761,  761,  761,  761,  764,  531,
      761,  765,  766, 1239, 1239,   45,  767,  520,  766,  766,
      766,  766,  766,  766,  768,  518,  766,  518,  104,  770,
      771, 1239, 1239, 1239, 1239, 1239, 1239,  772,  773, 1239,
     1239,   45,  774,  775,  773,  773,  773,  773,  773,  773,

      776,  531,  773,  531,  209,  415,  416, 1239, 1239,  417,
     1239, 1239, 1239,  418,  216,  613,  614, 1239, 1239,  615,
     1239, 1239, 1239,  616,  209,  415,  416, 1239,  617,  417,
     1239, 1239, 1239,  418,  209,  558, 1239, 1239, 1239,  559,
      209,  558, 1239, 1239, 1239,  559,  209,  364,  365, 1239,
     1239,  366,  216,  217,  218, 1239, 1239,  219,  209,  364,
      365, 1239,  367,  366,  209,  369,  370, 1239, 1239,  371,
      373,  778,  779, 1239, 1239,  780,  781, 1239, 1239,  209,
      782,  783,  781,  781,  784,  781,  781,  781,  781,  363,
      781,  785,  574, 1239, 1239,  216,  575,  576,  574,  574,

      577,  574,  574,  574,  574,  215,  574,  578,  787, 1239,
     1239,  209,  788,  365,  787,  787,  789,  787,  787,  787,
      787,  363,  787,  363,  569, 1239, 1239,  209,  570,  571,
      569,  569,  572,  569,  569,  569,  569,  208,  569,  573,
      657, 1239, 1239,  209,  658,  659,  657,  657,  660,  657,
      657,  657,  657,  241,  657,  661,  580, 1239, 1239,  209,
      581,  211,  580,  580,  582,  580,  580,  580,  580,  208,
      580,  208,  790, 1239, 1239,  209,  791,  792,  790,  790,
      793,  790,  790,  790,  790,  368,  790,  794,  795, 1239,
     1239,  373,  796,  797,  795,  795,  798,  795,  795,  795,

      795,  372,  795,  799,  800, 1239, 1239,  216,  801,  218,
      800,  800,  802,  800,  800,  800,  800,  215,  800,  215,
      803, 1239, 1239,  209,  804,  243,  803,  803,  805,  803,
      803,  803,  803,  241,  803,  241,  209,  242,  243, 1239,
     1239,  244,  216,  394,  395, 1239, 1239,  396,  209,  242,
      243, 1239,  397,  244,  114,  231,  232, 1239, 1239,  233,
     1239, 1239, 1239,  234,  121,  389,  390, 1239, 1239,  391,
      114,  231,  232, 1239,  392,  233, 1239, 1239, 1239,  234,
      114,  258,  259, 1239, 1239,  260, 1239, 1239, 1239,  261,
      216,  394,  395, 1239, 1239,  396,  209,  399,  400, 1239,

     1239,  401, 1239, 1239, 1239,  402,  216,  536,  537, 1239,
     1239,  538, 1239, 1239, 1239,  539,  209,  399,  400, 1239,
      408,  401, 1239, 1239, 1239,  402,  209,  410,  411, 1239,
     1239,  412, 1239, 1239, 1239,  413,  209,  746,  747, 1239,
     1239,  748, 1239, 1239, 1239,  749,  216,  602,  603, 1239,
     1239,  604, 1239, 1239, 1239,  605,  209,  808,  809, 1239,
     1239,  810, 1239, 1239, 1239,  811,  373,  813,  814, 1239,
     1239,  815, 1239, 1239, 1239,  816,  209,  608,  609, 1239,
     1239,  610, 1239, 1239, 1239,  611,  216,  818,  819, 1239,
     1239,  820, 1239, 1239, 1239,  821,  209,  608,  609, 1239,

      822,  610, 1239, 1239, 1239,  611,  209,  751,  752, 1239,
     1239,  753, 1239, 1239, 1239,  754,  216,  613,  614, 1239,
     1239,  615, 1239, 1239, 1239,  616,  209,  751,  752, 1239,
      823,  753, 1239, 1239, 1239,  754,  209,  808,  809, 1239,
     1239,  810, 1239, 1239, 1239,  811,  373,  825,  826, 1239,
     1239,  827, 1239, 1239, 1239,  828,  209,  410,  411, 1239,
     1239,  412, 1239, 1239, 1239,  413,  216,  602,  603, 1239,
     1239,  604, 1239, 1239, 1239,  605,  114,  258,  259, 1239,
     1239,  260, 1239, 1239, 1239,  261,  121,  425,  426, 1239,
     1239,  427, 1239, 1239, 1239,  428,  114,  431,  432, 1239,

     1239,  433, 1239, 1239, 1239,  434,  216,  830,  831, 1239,
     1239,  832, 1239, 1239, 1239,  833,  246,  835,  836, 1239,
     1239,  837, 1239, 1239, 1239,  838,  114,  263,  264, 1239,
     1239,  265, 1239, 1239, 1239,  266,  121,  436,  437, 1239,
     1239,  438, 1239, 1239, 1239,  439,  114,  263,  264, 1239,
      440,  265, 1239, 1239, 1239,  266,  114,  431,  432, 1239,
     1239,  433, 1239, 1239, 1239,  434,   45,  284,   58, 1239,
     1239, 1239, 1239, 1239, 1239, 1239,   49, 1239,   49,   52,
      450,  102, 1239, 1239, 1239, 1239, 1239, 1239, 1239,   98,
     1239,   98,  646, 1239, 1239,  114,  647,  648,  646,  646,

      649,  646,  646,  646,  650,  230,  646,  651,  839, 1239,
     1239,  121,  840,  841,  839,  839,  842,  839,  839,  839,
      839,  388,  839,  843,  675, 1239, 1239,  114,  676,  677,
      675,  675,  678,  675,  675,  675,  679,  257,  675,  680,
      694, 1239, 1239,  114,  695,  232,  694,  694,  696,  694,
      694,  694,  697,  230,  694,  230,  569, 1239, 1239,  209,
      570,  571,  569,  569,  572,  569,  569,  569,  569,  208,
      569,  573,  574, 1239, 1239,  216,  575,  576,  574,  574,
      577,  574,  574,  574,  574,  215,  574,  578,  657, 1239,
     1239,  209,  658,  659,  657,  657,  660,  657,  657,  657,

      657,  241,  657,  661,  580, 1239, 1239,  209,  581,  211,
      580,  580,  582,  580,  580,  580,  580,  208,  580,  208,
      845, 1239, 1239,  216,  846,  847,  845,  845,  848,  845,
      845,  845,  845,  393,  845,  849,  803, 1239, 1239,  209,
      804,  243,  803,  803,  805,  803,  803,  803,  803,  241,
      803,  241,  451, 1239, 1239,  114,  452,  453,  451,  451,
      454,  451,  451,  451,  455,  113,  451,  456,  457, 1239,
     1239,  121,  458,  459,  457,  457,  460,  457,  457,  457,
      457,  120,  457,  461,  463, 1239, 1239,  114,  464,  465,
      463,  463,  466,  463,  463,  463,  467,  126,  463,  468,

      469, 1239, 1239,  114,  470,  116,  469,  469,  471,  469,
      469,  469,  472,  113,  469,  113,  851, 1239, 1239,  209,
      852,  853,  851,  851,  854,  851,  851,  851,  855,  398,
      851,  856,  857, 1239, 1239,  216,  858,  859,  857,  857,
      860,  857,  857,  857,  861,  403,  857,  862,  864, 1239,
     1239,  209,  865,  866,  864,  864,  867,  864,  864,  864,
      868,  409,  864,  869,  870, 1239, 1239,  209,  871,  872,
      870,  870,  873,  870,  870,  870,  874,  414,  870,  875,
      876, 1239, 1239,  209,  877,  400,  876,  876,  878,  876,
      876,  876,  879,  398,  876,  398,  880, 1239, 1239,  246,

      881,  882,  880,  880,  883,  880,  880,  880,  884,  419,
      880,  885,  886, 1239, 1239,  121,  887,  888,  886,  886,
      889,  886,  886,  886,  890,  424,  886,  891,  893, 1239,
     1239,  114,  894,  895,  893,  893,  896,  893,  893,  893,
      897,  430,  893,  898,  899, 1239, 1239,  114,  900,  259,
      899,  899,  901,  899,  899,  899,  902,  257,  899,  257,
      681, 1239, 1239,  114,  682,  683,  681,  681,  684,  681,
      681,  681,  685,  262,  681,  686,  903, 1239, 1239,  121,
      904,  905,  903,  903,  906,  903,  903,  903,  907,  435,
      903,  908,  910, 1239, 1239,  114,  911,  264,  910,  910,

      912,  910,  910,  910,  913,  262,  910,  262,  687, 1239,
     1239,  114,  688,  128,  687,  687,  689,  687,  687,  687,
      690,  126,  687,  126,  914, 1239, 1239,  121,  915,  253,
      914,  914,  916,  914,  914,  914,  917,  251,  914,  251,
      918, 1239, 1239,  216,  919,  239,  918,  918,  920,  918,
      918,  918,  918,  237,  918,  237,  921, 1239, 1239,  121,
      922,  390,  921,  921,  923,  921,  921,  921,  921,  388,
      921,  388,  924, 1239, 1239,  216,  925,  926,  924,  924,
      927,  924,  924,  924,  928,  535,  924,  929,  761, 1239,
     1239,   45,  762,  763,  761,  761,  761,  761,  761,  761,

      764,  531,  761,  765,  703, 1239, 1239,   52,  704,  705,
      703,  703,  703,  703,  703,  703,  706,  334,  703,  707,
      931, 1239, 1239,   45,  932,  533,  931,  931,  931,  931,
      931,  931,  933,  531,  931,  531,  934, 1239, 1239,  104,
      935,  936,  934,  934,  934,  934,  934,  934,  937,  549,
      934,  938,  709, 1239, 1239,   45,  710,  271,  709,  709,
      709,  709,  709,  709,  711,  181,  709,  181,  939, 1239,
     1239,   52,  940,  442,  939,  939,  939,  939,  939,  939,
      941,  334,  939,  334,  766, 1239, 1239,   45,  767,  520,
      766,  766,  766,  766,  766,  766,  768,  518,  766,  518,

      712, 1239, 1239,   52,  713,  317,  712,  712,  712,  712,
      712,  712,  714,  315,  712,  315,  484, 1239, 1239,   45,
      485,  486,  484,  484,  484,  484,  484,  484,  487,  181,
      484,  488,  942, 1239, 1239,   52,  943,  445,  942,  942,
      942,  942,  942,  942,  944,  342,  942,  342,  489, 1239,
     1239,   45,  490,  170,  489,  489,  489,  489,  489,  489,
      491,  162,  489,  162,  209,  740,  741, 1239, 1239,  742,
     1239, 1239, 1239,  743,  216,  536,  537, 1239, 1239,  538,
     1239, 1239, 1239,  539,  209,  740,  741, 1239,  744,  742,
     1239, 1239, 1239,  743,  209,  751,  752, 1239, 1239,  753,

     1239, 1239, 1239,  754,  755, 1239, 1239,   45,  756,  757,
      755,  755,  755,  755,  755,  755,  758,  518,  755,  759,
      540, 1239, 1239,   52,  541,  542,  540,  540,  540,  540,
      540,  540,  543,  315,  540,  544,  216,  536,  537, 1239,
     1239,  538, 1239, 1239, 1239,  539,  209,  746,  747, 1239,
     1239,  748, 1239, 1239, 1239,  749,  209,  751,  752, 1239,
     1239,  753, 1239, 1239, 1239,  754,  373,  946,  947, 1239,
     1239,  948, 1239, 1239, 1239,  949,  209,  746,  747, 1239,
     1239,  748, 1239, 1239, 1239,  749,  216,  602,  603, 1239,
     1239,  604, 1239, 1239, 1239,  605,  209,  808,  809, 1239,

     1239,  810, 1239, 1239, 1239,  811,  216,  613,  614, 1239,
     1239,  615, 1239, 1239, 1239,  616,  209,  808,  809, 1239,
     1239,  810, 1239, 1239, 1239,  811,  950, 1239, 1239,  104,
      951,  952,  950,  950,  950,  950,  950,  950,  953,  731,
      950,  954,  216,  613,  614, 1239, 1239,  615, 1239, 1239,
     1239,  616,  209,  369,  370, 1239, 1239,  371,  216,  394,
      395, 1239, 1239,  396,  209,  369,  370, 1239,  564,  371,
      781, 1239, 1239,  209,  782,  783,  781,  781,  784,  781,
      781,  781,  781,  363,  781,  785,  574, 1239, 1239,  216,
      575,  576,  574,  574,  577,  574,  574,  574,  574,  215,

      574,  578,  790, 1239, 1239,  209,  791,  792,  790,  790,
      793,  790,  790,  790,  790,  368,  790,  794,  787, 1239,
     1239,  209,  788,  365,  787,  787,  789,  787,  787,  787,
      787,  363,  787,  363,  955, 1239, 1239,  373,  956,  957,
      955,  955,  958,  955,  955,  955,  955,  560,  955,  959,
      800, 1239, 1239,  216,  801,  218,  800,  800,  802,  800,
      800,  800,  800,  215,  800,  215,  960, 1239, 1239,  209,
      961,  370,  960,  960,  962,  960,  960,  960,  960,  368,
      960,  368,  845, 1239, 1239,  216,  846,  847,  845,  845,
      848,  845,  845,  845,  845,  393,  845,  849,  569, 1239,

     1239,  209,  570,  571,  569,  569,  572,  569,  569,  569,
      569,  208,  569,  573,  657, 1239, 1239,  209,  658,  659,
      657,  657,  660,  657,  657,  657,  657,  241,  657,  661,
      580, 1239, 1239,  209,  581,  211,  580,  580,  582,  580,
      580,  580,  580,  208,  580,  208,  803, 1239, 1239,  209,
      804,  243,  803,  803,  805,  803,  803,  803,  803,  241,
      803,  241,  964, 1239, 1239,  216,  965,  395,  964,  964,
      966,  964,  964,  964,  964,  393,  964,  393,  373,  968,
      969, 1239, 1239,  970, 1239, 1239, 1239,  971,  216,  818,
      819, 1239, 1239,  820, 1239, 1239, 1239,  821,  209,  410,

      411, 1239, 1239,  412, 1239, 1239, 1239,  413,  216,  602,
      603, 1239, 1239,  604, 1239, 1239, 1239,  605,  209,  410,
      411, 1239,  606,  412, 1239, 1239, 1239,  413,  209,  608,
      609, 1239, 1239,  610, 1239, 1239, 1239,  611,  216,  818,
      819, 1239, 1239,  820, 1239, 1239, 1239,  821,  373,  974,
      975, 1239, 1239,  976, 1239, 1239, 1239,  977,  373,  979,
      980, 1239, 1239,  981, 1239, 1239, 1239,  982,  209,  415,
      416, 1239, 1239,  417, 1239, 1239, 1239,  418,  209,  415,
      416, 1239,  617,  417, 1239, 1239, 1239,  418,  209,  608,
      609, 1239, 1239,  610, 1239, 1239, 1239,  611,  114,  431,

      432, 1239, 1239,  433, 1239, 1239, 1239,  434,  121,  629,
      630, 1239, 1239,  631, 1239, 1239, 1239,  632,  114,  431,
      432, 1239,  633,  433, 1239, 1239, 1239,  434,  983, 1239,
     1239,  216,  984,  985,  983,  983,  986,  983,  983,  983,
      983,  583,  983,  987,  988, 1239, 1239,  246,  989,  990,
      988,  988,  991,  988,  988,  988,  992,  587,  988,  993,
      994, 1239, 1239,  373,  995,  996,  994,  994,  997,  994,
      994,  994,  994,  592,  994,  998,  851, 1239, 1239,  209,
      852,  853,  851,  851,  854,  851,  851,  851,  855,  398,
      851,  856,  924, 1239, 1239,  216,  925,  926,  924,  924,

      927,  924,  924,  924,  928,  535,  924,  929,  864, 1239,
     1239,  209,  865,  866,  864,  864,  867,  864,  864,  864,
      868,  409,  864,  869,  870, 1239, 1239,  209,  871,  872,
      870,  870,  873,  870,  870,  870,  874,  414,  870,  875,
      876, 1239, 1239,  209,  877,  400,  876,  876,  878,  876,
      876,  876,  879,  398,  876,  398,  999, 1239, 1239,  373,
     1000, 1001,  999,  999, 1002,  999,  999,  999, 1003,  596,
      999, 1004, 1005, 1239, 1239,  216, 1006, 1007, 1005, 1005,
     1008, 1005, 1005, 1005, 1009,  601, 1005, 1010, 1012, 1239,
     1239,  209, 1013, 1014, 1012, 1012, 1015, 1012, 1012, 1012,

     1016,  607, 1012, 1017, 1018, 1239, 1239,  209, 1019,  411,
     1018, 1018, 1020, 1018, 1018, 1018, 1021,  409, 1018,  409,
     1022, 1239, 1239,  216, 1023, 1024, 1022, 1022, 1025, 1022,
     1022, 1022, 1026,  612, 1022, 1027, 1029, 1239, 1239,  209,
     1030,  416, 1029, 1029, 1031, 1029, 1029, 1029, 1032,  414,
     1029,  414, 1033, 1239, 1239,  216, 1034,  537, 1033, 1033,
     1035, 1033, 1033, 1033, 1036,  535, 1033,  535,  463, 1239,
     1239,  114,  464,  465,  463,  463,  466,  463,  463,  463,
      467,  126,  463,  468,  668, 1239, 1239,  121,  669,  670,
      668,  668,  671,  668,  668,  668,  672,  251,  668,  673,

      675, 1239, 1239,  114,  676,  677,  675,  675,  678,  675,
      675,  675,  679,  257,  675,  680,  681, 1239, 1239,  114,
      682,  683,  681,  681,  684,  681,  681,  681,  685,  262,
      681,  686,  687, 1239, 1239,  114,  688,  128,  687,  687,
      689,  687,  687,  687,  690,  126,  687,  126, 1037, 1239,
     1239,  216, 1038, 1039, 1037, 1037, 1040, 1037, 1037, 1037,
     1041,  618, 1037, 1042, 1043, 1239, 1239,  246, 1044, 1045,
     1043, 1043, 1046, 1043, 1043, 1043, 1047,  623, 1043, 1048,
      893, 1239, 1239,  114,  894,  895,  893,  893,  896,  893,
      893,  893,  897,  430,  893,  898, 1049, 1239, 1239,  121,

     1050, 1051, 1049, 1049, 1052, 1049, 1049, 1049, 1053,  628,
     1049, 1054, 1056, 1239, 1239,  114, 1057,  432, 1056, 1056,
     1058, 1056, 1056, 1056, 1059,  430, 1056,  430,  899, 1239,
     1239,  114,  900,  259,  899,  899,  901,  899,  899,  899,
      902,  257,  899,  257, 1060, 1239, 1239,  121, 1061,  426,
     1060, 1060, 1062, 1060, 1060, 1060, 1063,  424, 1060,  424,
     1064, 1239, 1239,  216, 1065, 1066, 1064, 1064, 1067, 1064,
     1064, 1064, 1068,  634, 1064, 1069, 1070, 1239, 1239,  246,
     1071, 1072, 1070, 1070, 1073, 1070, 1070, 1070, 1074,  639,
     1070, 1075,  910, 1239, 1239,  114,  911,  264,  910,  910,

      912,  910,  910,  910,  913,  262,  910,  262, 1076, 1239,
     1239,  121, 1077,  437, 1076, 1076, 1078, 1076, 1076, 1076,
     1079,  435, 1076,  435, 1080, 1239, 1239,  216, 1081,  405,
     1080, 1080, 1082, 1080, 1080, 1080, 1083,  403, 1080,  403,
      580, 1239, 1239,  209,  581,  211,  580,  580,  582,  580,
      580,  580,  580,  208,  580,  208,  800, 1239, 1239,  216,
      801,  218,  800,  800,  802,  800,  800,  800,  800,  215,
      800,  215, 1084, 1239, 1239,  216, 1085,  585, 1084, 1084,
     1086, 1084, 1084, 1084, 1084,  583, 1084,  583, 1087, 1239,
     1239,  209, 1088, 1089, 1087, 1087, 1090, 1087, 1087, 1087,

     1091,  739, 1087, 1092, 1094, 1239, 1239,  209, 1095, 1096,
     1094, 1094, 1097, 1094, 1094, 1094, 1098,  745, 1094, 1099,
     1100, 1239, 1239,  209, 1101, 1102, 1100, 1100, 1103, 1100,
     1100, 1100, 1104,  750, 1100, 1105, 1106, 1239, 1239,  209,
     1107,  741, 1106, 1106, 1108, 1106, 1106, 1106, 1109,  739,
     1106,  739, 1110, 1239, 1239,  104, 1111, 1112, 1110, 1110,
     1110, 1110, 1110, 1110, 1113,  769, 1110, 1114,  931, 1239,
     1239,   45,  932,  533,  931,  931,  931,  931,  931,  931,
      933,  531,  931,  531,  939, 1239, 1239,   52,  940,  442,
      939,  939,  939,  939,  939,  939,  941,  334,  939,  334,

      709, 1239, 1239,   45,  710,  271,  709,  709,  709,  709,
      709,  709,  711,  181,  709,  181,  209,  740,  741, 1239,
     1239,  742, 1239, 1239, 1239,  743,  216,  536,  537, 1239,
     1239,  538, 1239, 1239, 1239,  539,  209,  740,  741, 1239,
      744,  742, 1239, 1239, 1239,  743,  209,  746,  747, 1239,
     1239,  748, 1239, 1239, 1239,  749,  209,  751,  752, 1239,
     1239,  753, 1239, 1239, 1239,  754,  781, 1239, 1239,  209,
      782,  783,  781,  781,  784,  781,  781,  781,  781,  363,
      781,  785,  574, 1239, 1239,  216,  575,  576,  574,  574,
      577,  574,  574,  574,  574,  215,  574,  578,  790, 1239,

     1239,  209,  791,  792,  790,  790,  793,  790,  790,  790,
      790,  368,  790,  794,  787, 1239, 1239,  209,  788,  365,
      787,  787,  789,  787,  787,  787,  787,  363,  787,  363,
      960, 1239, 1239,  209,  961,  370,  960,  960,  962,  960,
      960,  960,  960,  368,  960,  368,  964, 1239, 1239,  216,
      965,  395,  964,  964,  966,  964,  964,  964,  964,  393,
      964,  393, 1115, 1239, 1239,  373, 1116, 1117, 1115, 1115,
     1118, 1115, 1115, 1115, 1115,  777, 1115, 1119,  209,  746,
      747, 1239, 1239,  748, 1239, 1239, 1239,  749,  216,  602,
      603, 1239, 1239,  604, 1239, 1239, 1239,  605,  209,  808,

      809, 1239, 1239,  810, 1239, 1239, 1239,  811,  373, 1121,
     1122, 1239, 1239, 1123, 1239, 1239, 1239, 1124,  209,  608,
      609, 1239, 1239,  610, 1239, 1239, 1239,  611,  216,  818,
      819, 1239, 1239,  820, 1239, 1239, 1239,  821,  209,  608,
      609, 1239,  822,  610, 1239, 1239, 1239,  611,  209,  751,
      752, 1239, 1239,  753, 1239, 1239, 1239,  754,  216,  613,
      614, 1239, 1239,  615, 1239, 1239, 1239,  616,  209,  808,
      809, 1239, 1239,  810, 1239, 1239, 1239,  811,  657, 1239,
     1239,  209,  658,  659,  657,  657,  660,  657,  657,  657,
      657,  241,  657,  661,  845, 1239, 1239,  216,  846,  847,

      845,  845,  848,  845,  845,  845,  845,  393,  845,  849,
      646, 1239, 1239,  114,  647,  648,  646,  646,  649,  646,
      646,  646,  650,  230,  646,  651,  839, 1239, 1239,  121,
      840,  841,  839,  839,  842,  839,  839,  839,  839,  388,
      839,  843,  675, 1239, 1239,  114,  676,  677,  675,  675,
      678,  675,  675,  675,  679,  257,  675,  680,  694, 1239,
     1239,  114,  695,  232,  694,  694,  696,  694,  694,  694,
      697,  230,  694,  230,  851, 1239, 1239,  209,  852,  853,
      851,  851,  854,  851,  851,  851,  855,  398,  851,  856,
      864, 1239, 1239,  209,  865,  866,  864,  864,  867,  864,

      864,  864,  868,  409,  864,  869, 1005, 1239, 1239,  216,
     1006, 1007, 1005, 1005, 1008, 1005, 1005, 1005, 1009,  601,
     1005, 1010, 1126, 1239, 1239,  209, 1127, 1128, 1126, 1126,
     1129, 1126, 1126, 1126, 1130,  807, 1126, 1131, 1132, 1239,
     1239,  209, 1133,  747, 1132, 1132, 1134, 1132, 1132, 1132,
     1135,  745, 1132,  745, 1136, 1239, 1239,  373, 1137, 1138,
     1136, 1136, 1139, 1136, 1136, 1136, 1140,  812, 1136, 1141,
     1012, 1239, 1239,  209, 1013, 1014, 1012, 1012, 1015, 1012,
     1012, 1012, 1016,  607, 1012, 1017, 1142, 1239, 1239,  216,
     1143, 1144, 1142, 1142, 1145, 1142, 1142, 1142, 1146,  817,

     1142, 1147, 1149, 1239, 1239,  209, 1150,  609, 1149, 1149,
     1151, 1149, 1149, 1149, 1152,  607, 1149,  607, 1018, 1239,
     1239,  209, 1019,  411, 1018, 1018, 1020, 1018, 1018, 1018,
     1021,  409, 1018,  409, 1153, 1239, 1239,  216, 1154,  603,
     1153, 1153, 1155, 1153, 1153, 1153, 1156,  601, 1153,  601,
     1022, 1239, 1239,  216, 1023, 1024, 1022, 1022, 1025, 1022,
     1022, 1022, 1026,  612, 1022, 1027, 1158, 1239, 1239,  209,
     1159,  752, 1158, 1158, 1160, 1158, 1158, 1158, 1161,  750,
     1158,  750, 1162, 1239, 1239,  373, 1163, 1164, 1162, 1162,
     1165, 1162, 1162, 1162, 1166,  824, 1162, 1167, 1029, 1239,

     1239,  209, 1030,  416, 1029, 1029, 1031, 1029, 1029, 1029,
     1032,  414, 1029,  414, 1168, 1239, 1239,  216, 1169,  614,
     1168, 1168, 1170, 1168, 1168, 1168, 1171,  612, 1168,  612,
     1033, 1239, 1239,  216, 1034,  537, 1033, 1033, 1035, 1033,
     1033, 1033, 1036,  535, 1033,  535,  886, 1239, 1239,  121,
      887,  888,  886,  886,  889,  886,  886,  886,  890,  424,
      886,  891,  893, 1239, 1239,  114,  894,  895,  893,  893,
      896,  893,  893,  893,  897,  430,  893,  898,  899, 1239,
     1239,  114,  900,  259,  899,  899,  901,  899,  899,  899,
      902,  257,  899,  257, 1172, 1239, 1239,  216, 1173, 1174,

     1172, 1172, 1175, 1172, 1172, 1172, 1176,  829, 1172, 1177,
     1178, 1239, 1239,  246, 1179, 1180, 1178, 1178, 1181, 1178,
     1178, 1178, 1182,  834, 1178, 1183, 1056, 1239, 1239,  114,
     1057,  432, 1056, 1056, 1058, 1056, 1056, 1056, 1059,  430,
     1056,  430, 1184, 1239, 1239,  121, 1185,  630, 1184, 1184,
     1186, 1184, 1184, 1184, 1187,  628, 1184,  628, 1188, 1239,
     1239,  216, 1189,  620, 1188, 1188, 1190, 1188, 1188, 1188,
     1191,  618, 1188,  618,  681, 1239, 1239,  114,  682,  683,
      681,  681,  684,  681,  681,  681,  685,  262,  681,  686,
      903, 1239, 1239,  121,  904,  905,  903,  903,  906,  903,

      903,  903,  907,  435,  903,  908,  910, 1239, 1239,  114,
      911,  264,  910,  910,  912,  910,  910,  910,  913,  262,
      910,  262, 1192, 1239, 1239,  216, 1193,  636, 1192, 1192,
     1194, 1192, 1192, 1192, 1195,  634, 1192,  634,  964, 1239,
     1239,  216,  965,  395,  964,  964,  966,  964,  964,  964,
      964,  393,  964,  393, 1087, 1239, 1239,  209, 1088, 1089,
     1087, 1087, 1090, 1087, 1087, 1087, 1091,  739, 1087, 1092,
     1196, 1239, 1239,  373, 1197, 1198, 1196, 1196, 1199, 1196,
     1196, 1196, 1200,  945, 1196, 1201,  790, 1239, 1239,  209,
      791,  792,  790,  790,  793,  790,  790,  790,  790,  368,

      790,  794,  960, 1239, 1239,  209,  961,  370,  960,  960,
      962,  960,  960,  960,  960,  368,  960,  368,  209,  808,
      809, 1239, 1239,  810, 1239, 1239, 1239,  811,  216,  818,
      819, 1239, 1239,  820, 1239, 1239, 1239,  821, 1202, 1239,
     1239,  373, 1203, 1204, 1202, 1202, 1205, 1202, 1202, 1202,
     1206,  967, 1202, 1207, 1209, 1239, 1239,  209, 1210,  809,
     1209, 1209, 1211, 1209, 1209, 1209, 1212,  807, 1209,  807,
     1213, 1239, 1239,  373, 1214, 1215, 1213, 1213, 1216, 1213,
     1213, 1213, 1217,  973, 1213, 1218, 1219, 1239, 1239,  216,
     1220,  819, 1219, 1219, 1221, 1219, 1219, 1219, 1222,  817,

     1219,  817, 1223, 1239, 1239,  373, 1224, 1225, 1223, 1223,
     1226, 1223, 1223, 1223, 1227,  978, 1223, 1228, 1049, 1239,
     1239,  121, 1050, 1051, 1049, 1049, 1052, 1049, 1049, 1049,
     1053,  628, 1049, 1054, 1229, 1239, 1239,  216, 1230,  831,
     1229, 1229, 1231, 1229, 1229, 1229, 1232,  829, 1229,  829,
     1233, 1239, 1239,  373, 1234, 1235, 1233, 1233, 1236, 1233,
     1233, 1233, 1237, 1120, 1233, 1238,   45, 1239,   45,   49,
     1239,   49,   27, 1239,   27,   64, 1239,   64,   99, 1239,
       99,   98, 1239,   98,  103, 1239,  103,  107, 1239,  107,
       56, 1239,   56,  113, 1239,  113,  114, 1239,  114,  120,

     1239,  120,  126, 1239,  126,   85, 1239,   85,  142, 1239,
      142,  182, 1239,  182,  202, 1239,  202,  208, 1239,  208,
      209, 1239,  209,  215, 1239,  215,  221, 1239,  221,  225,
     1239,  225,  230, 1239,  230,  235, 1239,  235,  237, 1239,
      237,  241, 1239,  241,  245, 1239,  245,  251, 1239,  251,
      257, 1239,  257,  262, 1239,  262,  168, 1239,  168,  181,
     1239,  181,  195, 1239,  195,  142, 1239,  142,  279, 1239,
      279,  283, 1239,  283,  315, 1239,  315,  319, 1239,  319,
      343, 1239,  343,  202, 1239,  202,   98, 1239,   98,  351,
     1239,  351,  354, 1239,  354,  208, 1239,  208,  209, 1239,

      209,  215, 1239,  215,  241, 1239,  241,  357, 1239,  357,
      360, 1239,  360,  363, 1239,  363,  368, 1239,  368,  372,
     1239,  372,  221, 1239,  221,  225, 1239,  225,  283, 1239,
      283,  377, 1239,  377,  382, 1239,  382,  384, 1239,  384,
      230, 1239,  230,  388, 1239,  388,  257, 1239,  257,  235,
     1239,  235,  393, 1239,  393,  113, 1239,  113,  114, 1239,
      114,  120, 1239,  120,  126, 1239,  126,  398, 1239,  398,
      403, 1239,  403,  409, 1239,  409,  414, 1239,  414,  419,
     1239,  419,  424, 1239,  424,  430, 1239,  430,  262, 1239,
      262,  435, 1239,  435,  315, 1239,  315,  162, 1239,  162,

      181, 1239,  181,  334, 1239,  334,  342, 1239,  342,  447,
     1239,  447,  449, 1239,  449,  531, 1239,  531,  398, 1239,
      398,  535, 1239,  535,  414, 1239,  414,  549, 1239,  549,
      262, 1239,  262,  435, 1239,  435,  363, 1239,  363,  215,
     1239,  215,  377, 1239,  377,  225, 1239,  225,  357, 1239,
      357,  557, 1239,  557,  360, 1239,  360,  368, 1239,  368,
      560, 1239,  560,  393, 1239,  393,  208, 1239,  208,  209,
     1239,  209,  241, 1239,  241,  382, 1239,  382,  565, 1239,
      565,  449, 1239,  449,  583, 1239,  583,  587, 1239,  587,
      592, 1239,  592,  398, 1239,  398,  535, 1239,  535,  409,

     1239,  409,  414, 1239,  414,  596, 1239,  596,  601, 1239,
      601,  607, 1239,  607,  612, 1239,  612,  126, 1239,  126,
      251, 1239,  251,  257, 1239,  257,  262, 1239,  262,  618,
     1239,  618,  623, 1239,  623,  430, 1239,  430,  628, 1239,
      628,  634, 1239,  634,  639, 1239,  639,  334, 1239,  334,
      531, 1239,  531,  181, 1239,  181,  283, 1239,  283,  644,
     1239,  644,  315, 1239,  315,  731, 1239,  731,  531, 1239,
      531,  334, 1239,  334,  739, 1239,  739,  535, 1239,  535,
      745, 1239,  745,  750, 1239,  750,  769, 1239,  769,  414,
     1239,  414,  612, 1239,  612,  557, 1239,  557,  363, 1239,

      363,  215, 1239,  215,  368, 1239,  368,  777, 1239,  777,
      241, 1239,  241,  393, 1239,  393,  230, 1239,  230,  388,
     1239,  388,  257, 1239,  257,  398, 1239,  398,  409, 1239,
      409,  601, 1239,  601,  807, 1239,  807,  812, 1239,  812,
      607, 1239,  607,  817, 1239,  817,  750, 1239,  750,  824,
     1239,  824,  424, 1239,  424,  430, 1239,  430,  829, 1239,
      829,  834, 1239,  834,  262, 1239,  262,  435, 1239,  435,
      283, 1239,  283,  449, 1239,  449,  739, 1239,  739,  535,
     1239,  535,  750, 1239,  750,  745, 1239,  745,  945, 1239,
      945,  601, 1239,  601,  807, 1239,  807,  612, 1239,  612,

      368, 1239,  368,  393, 1239,  393,  967, 1239,  967,  817,
     1239,  817,  409, 1239,  409,  607, 1239,  607,  973, 1239,
      973,  978, 1239,  978,  414, 1239,  414,  430, 1239,  430,
      628, 1239,  628,  739, 1239,  739,  535, 1239,  535,  745,
     1239,  745,  750, 1239,  750,  601, 1239,  601,  807, 1239,
      807, 1120, 1239, 1120,  607, 1239,  607,  817, 1239,  817,
      612, 1239,  612,  817, 1239,  817,    3, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239
    } ;

static const flex_int16_t yy_chk[7984] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    4,   50,   50, 1390,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    7,   99,   99,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    8,    8,
       12,    8, 1340,   18,   43,   12,    8,    8,    9,   18,
       43, 1339,    9,   47, 1337,    9,    9,    9,   54,   47,
        9,   13,  100,  100,   54,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   14,  104,
      121,   85,   93,  104,  121,   14,   22,   85,   93,   22,

       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   24, 1335, 1292,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   25,   25,
       25,  119,   25,  209,  136,  162,  119,  209,   25,   26,
      136,  162, 1288,   26,  168,  216,   26,   26,   26,  216,
      168,   26,   27,   27,   27,   28,   28,   28,   30,   30,
       30,  235, 1287, 1286,  178,  192,  235,   30,   31,   31,
      178,  192, 1283, 1282,  236,  315,   31,   32,   32,  236,
     1280,  315, 1262,  373,  334,   32,   32,  373,   32,   33,
      334, 1260, 1258,   33,  518, 1257,   33,   33,   33,  531,

      518,   33,   34, 1246, 1245,  531,   34,  534, 1240,   34,
       34,   34, 1235,  534,   34,   39, 1225, 1215,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   40,   40, 1204,   40, 1198, 1180, 1174, 1164,   40,
       40,   42, 1144, 1138, 1128,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   46, 1122, 1117,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   57,   57,   57,   59,   59,   59,   60,
       60,   60, 1112, 1102, 1096, 1089, 1072, 1066, 1051,   60,
     1045,   60,   61, 1039, 1024, 1014,   61, 1007, 1001,   61,

       61,   61,  996,  990,   61,   62,   62,   62,   64,   64,
       64,  985,  980,   64,  977,  976,  969,   64,   66,   66,
       66,  957,  952,   66,   67,   67,   67,  936,   67,   67,
      926,  905,  895,   67,   68,   68,   68,  888,  882,   68,
      872,  866,  859,   68,   69,   69,   69,  853,  847,  841,
      838,  837,  831,   69,   71,   71,  828,  819,  815,  809,
      797,  792,   71,   72,   72,  783,  780,  775,  771,  763,
      757,   72,   72,  752,   72,   73,   73,   73,  747,  739,
      737,  722,  717,  705,  700,   73,  683,   73,   74,   74,
      677,   74,  670,  664,  659,  654,   74,   74,  648,   74,

       75,   75,  643,  638,  637,  634,  632,  631,   75,   75,
      628,   75,   76,  625,  622,  620,   76,  616,  611,   76,
       76,   76,  610,  603,   76,   77,  600,  595,  592,   77,
      590,  586,   77,   77,   77,  576,  571,   77,   78,  567,
      555,  552,   78,  542,  533,   78,   78,   78,  520,  499,
       78,   80,  494,  486,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   81,  480,  475,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   82,  465,  459,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   83,

      453,  437,  434,   83,  433,  426,   83,   83,   83,  416,
      411,   83,   84,  403,  395,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   86,   86,
       86,  390,  386,  377,  370,  363,  350,   86,   87,   87,
      347,  346,  342,  339,  325,  317,   87,   87,  299,   87,
       89,  292,  287,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   90,   90,  279,   90,
      275,  272,  266,  259,   90,   90,   94,  249,  246,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   96,   96,   96,  243,   96,  237,  233,  204,

      188,  184,   96,   97,  170,  149,  142,   97,  135,  132,
       97,   97,   97,  128,  120,   97,   98,   98,   98,  101,
      101,  101,  103,  103,  103,  114,  113,  103,  105,  105,
      105,  112,  102,  105,  106,  106,  106,   70,  106,  106,
      107,  107,  107,   65,   63,   58,   52,   45,   37,   29,
      107,   23,  107,  108,  108,  108,   10,    3,    0,    0,
        0,    0,    0,  108,    0,  108,  109,  109,  109,    0,
      109,    0,    0,    0,    0,    0,  109,    0,  109,  115,
      115,  115,    0,    0,  115,  117,  117,  117,    0,    0,
      117,    0,    0,    0,  117,  118,  118,  118,    0,    0,

      118,    0,    0,    0,  118,  122,  122,  122,    0,    0,
      122,  124,  124,  124,    0,    0,  124,  125,  125,  125,
        0,    0,  125,    0,    0,    0,  125,  127,  127,  127,
        0,    0,  127,    0,    0,    0,  127,  129,  129,  129,
        0,    0,  129,    0,    0,    0,  129,  130,  130,  130,
        0,    0,  130,    0,    0,    0,  130,  131,  131,  131,
        0,    0,    0,    0,    0,    0,  131,  133,  133,  133,
        0,    0,    0,    0,    0,    0,  133,  134,  134,  134,
        0,    0,    0,    0,    0,    0,  134,  137,  137,    0,
        0,    0,    0,    0,    0,  137,  137,    0,  137,  138,

      138,  138,    0,    0,    0,    0,    0,    0,    0,  138,
        0,  138,  139,  139,    0,  139,    0,    0,    0,    0,
      139,  139,    0,  139,  140,  140,    0,    0,    0,    0,
        0,    0,  140,  140,    0,  140,  141,  141,    0,    0,
        0,    0,    0,    0,  141,  141,    0,  141,  143,  143,
      143,    0,    0,    0,    0,    0,    0,    0,  143,    0,
      143,  145,  145,  145,    0,    0,    0,    0,    0,    0,
        0,  145,    0,  145,  146,    0,    0,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      147,  147,    0,    0,    0,    0,    0,    0,  147,  147,

        0,  147,  148,    0,    0,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  150,  150,
        0,    0,    0,    0,    0,    0,  150,  150,    0,  150,
      151,  151,    0,    0,    0,    0,    0,    0,  151,  151,
        0,  151,  153,    0,    0,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  154,    0,
        0,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  155,    0,    0,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      156,  156,    0,    0,    0,    0,    0,    0,  156,  156,

        0,  156,  157,    0,    0,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  158,    0,
        0,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  160,    0,    0,    0,  160,    0,
        0,  160,  160,  160,    0,    0,  160,  161,    0,    0,
        0,  161,    0,    0,  161,  161,  161,    0,    0,  161,
      169,  169,  169,    0,    0,    0,    0,    0,    0,  169,
      171,  171,  171,    0,    0,    0,    0,    0,    0,  171,
      172,  172,  172,    0,    0,    0,    0,    0,    0,  172,
      173,    0,    0,  173,  173,  173,  173,  173,  173,  173,

      173,  173,  173,  173,  173,  173,  174,    0,    0,    0,
      174,    0,    0,  174,  174,  174,    0,    0,  174,  177,
        0,    0,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  183,  183,  183,    0,    0,
      183,    0,    0,    0,  183,  185,  185,  185,    0,    0,
      185,    0,    0,    0,  185,  189,  189,    0,    0,    0,
        0,    0,    0,  189,  189,    0,  189,  191,    0,    0,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  196,  196,  196,    0,    0,    0,    0,
        0,    0,  196,  197,  197,    0,    0,    0,    0,    0,

        0,  197,  197,    0,  197,  198,    0,    0,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  199,    0,    0,    0,  199,    0,    0,  199,  199,
      199,    0,    0,  199,  200,  200,  200,    0,  200,    0,
        0,    0,    0,    0,  200,  201,    0,    0,    0,  201,
        0,    0,  201,  201,  201,    0,    0,  201,  202,  202,
      202,  203,  203,  203,  205,  205,  205,  206,  206,  206,
        0,    0,    0,    0,    0,    0,    0,  206,    0,  206,
      208,  208,  208,    0,    0,  208,  210,  210,  210,    0,
        0,  210,  211,  211,  211,    0,  211,  211,  212,  212,

      212,    0,    0,  212,  213,  213,    0,    0,    0,  213,
      214,  214,    0,    0,    0,  214,  215,  215,  215,    0,
        0,  215,  217,  217,  217,    0,    0,  217,  218,  218,
      218,    0,  218,  218,  219,  219,  219,    0,    0,  219,
      220,  220,  220,    0,    0,  220,  221,  221,  221,    0,
        0,    0,    0,    0,    0,    0,  221,    0,  221,  222,
      222,  222,    0,    0,    0,    0,    0,    0,    0,  222,
        0,  222,  223,  223,  223,    0,  223,    0,    0,    0,
        0,    0,  223,    0,  223,  224,  224,  224,    0,    0,
        0,    0,    0,    0,    0,  224,    0,  224,  225,  225,

      225,    0,    0,    0,    0,    0,    0,    0,  225,    0,
      225,  226,  226,  226,    0,    0,    0,    0,    0,    0,
        0,  226,    0,  226,  227,  227,  227,    0,  227,    0,
        0,    0,    0,    0,  227,    0,  227,  228,  228,  228,
        0,    0,    0,    0,    0,    0,    0,  228,    0,  228,
      229,  229,  229,    0,    0,    0,    0,    0,    0,    0,
      229,    0,  229,  230,  230,  230,    0,    0,  230,    0,
        0,    0,  230,  231,  231,  231,    0,    0,  231,  232,
      232,  232,    0,  232,  232,    0,    0,    0,  232,  234,
      234,  234,    0,    0,  234,    0,    0,    0,  234,  240,

      240,  240,    0,    0,  240,  242,  242,  242,    0,    0,
      242,  245,  245,  245,    0,    0,  245,    0,    0,    0,
      245,  247,  247,  247,    0,    0,  247,  248,  248,  248,
        0,  248,  248,    0,    0,    0,  248,  250,  250,  250,
        0,    0,  250,    0,    0,    0,  250,  251,  251,  251,
        0,    0,  251,    0,    0,    0,  251,  252,  252,  252,
        0,    0,  252,    0,    0,    0,  252,  253,  253,  253,
        0,  253,  253,    0,    0,    0,  253,  254,  254,  254,
        0,    0,  254,    0,    0,    0,  254,  255,  255,  255,
        0,    0,  255,    0,    0,    0,  255,  256,  256,  256,

        0,    0,  256,    0,    0,    0,  256,  257,  257,  257,
        0,    0,  257,    0,    0,    0,  257,  258,  258,  258,
        0,    0,  258,    0,    0,    0,  258,  261,  261,  261,
        0,    0,  261,    0,    0,    0,  261,  262,  262,  262,
        0,    0,  262,    0,    0,    0,  262,  263,  263,  263,
        0,    0,  263,    0,    0,    0,  263,  264,  264,  264,
        0,  264,  264,    0,    0,    0,  264,  265,  265,  265,
        0,    0,  265,    0,    0,    0,  265,  267,  267,  267,
        0,    0,    0,    0,    0,    0,  267,  268,  268,  268,
        0,  268,    0,    0,    0,    0,  268,  269,  269,  269,

        0,    0,    0,    0,    0,    0,  269,  270,  270,  270,
        0,    0,    0,    0,    0,    0,  270,  271,  271,  271,
        0,  271,    0,    0,    0,    0,  271,  273,  273,  273,
        0,    0,    0,    0,    0,    0,  273,  276,  276,    0,
        0,    0,    0,    0,    0,  276,  276,    0,  276,  277,
      277,  277,    0,    0,    0,    0,    0,    0,    0,  277,
        0,  277,  278,  278,    0,    0,    0,    0,    0,    0,
      278,  278,    0,  278,  282,  282,  282,    0,    0,    0,
        0,    0,    0,    0,  282,    0,  282,  284,  284,  284,
        0,    0,    0,    0,    0,    0,    0,  284,    0,  284,

      285,    0,    0,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  286,    0,    0,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  288,    0,    0,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  289,    0,
        0,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  290,    0,    0,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      291,    0,    0,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  293,    0,    0,  293,

      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  294,    0,    0,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  295,    0,
        0,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  296,  296,    0,    0,    0,    0,
        0,    0,  296,  296,    0,  296,  297,    0,    0,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  298,  298,    0,  298,    0,    0,    0,    0,
      298,  298,    0,  298,  300,  300,    0,    0,    0,    0,
        0,    0,  300,  300,    0,  300,  301,  301,    0,    0,

        0,    0,    0,    0,  301,  301,    0,  301,  302,    0,
        0,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  303,  303,    0,    0,    0,    0,
        0,    0,  303,  303,    0,  303,  304,    0,    0,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  305,    0,    0,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  306,    0,
        0,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  308,    0,    0,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,

      310,    0,    0,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  311,    0,    0,    0,
      311,    0,    0,  311,  311,  311,    0,    0,  311,  312,
        0,    0,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  313,    0,    0,    0,  313,
        0,    0,  313,  313,  313,    0,    0,  313,  314,    0,
        0,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  316,  316,  316,    0,    0,    0,
        0,    0,    0,  316,  318,  318,  318,    0,    0,    0,
        0,    0,    0,  318,  319,  319,  319,    0,    0,  319,

        0,    0,    0,  319,  320,  320,  320,    0,    0,  320,
        0,    0,    0,  320,  321,  321,  321,    0,  321,  321,
        0,    0,    0,  321,  322,  322,  322,    0,    0,  322,
        0,    0,    0,  322,  324,    0,    0,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      328,    0,    0,    0,  328,    0,    0,  328,  328,  328,
        0,    0,  328,  330,    0,    0,    0,  330,    0,    0,
      330,  330,  330,    0,    0,  330,  331,  331,  331,    0,
      331,    0,    0,    0,    0,  331,  331,  335,  335,  335,
        0,    0,    0,    0,    0,    0,  335,  336,    0,    0,

      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  337,    0,    0,    0,  337,    0,    0,
      337,  337,  337,    0,    0,  337,  343,  343,  343,    0,
        0,  343,    0,    0,    0,  343,  344,  344,  344,    0,
        0,  344,    0,    0,    0,  344,  345,  345,  345,    0,
      345,  345,    0,    0,    0,  345,  351,  351,  351,    0,
        0,  351,  352,  352,  352,    0,    0,  352,  353,  353,
      353,    0,  353,  353,  354,  354,  354,    0,    0,    0,
        0,    0,    0,    0,  354,    0,  354,  355,  355,  355,
        0,    0,    0,    0,    0,    0,    0,  355,    0,  355,

      356,  356,  356,    0,  356,    0,    0,    0,    0,    0,
      356,    0,  356,  357,  357,    0,    0,    0,  357,  358,
      358,    0,    0,    0,  358,  359,  359,    0,    0,    0,
      359,  360,  360,    0,    0,    0,  360,  361,  361,    0,
        0,    0,  361,  362,  362,    0,    0,    0,  362,  364,
      364,  364,    0,    0,  364,  366,  366,  366,    0,    0,
      366,  367,  367,  367,    0,    0,  367,  368,  368,  368,
        0,    0,  368,  369,  369,  369,    0,    0,  369,  372,
      372,  372,    0,    0,  372,  375,  375,  375,    0,  375,
      375,  376,  376,  376,    0,    0,  376,  378,  378,  378,

        0,    0,    0,    0,    0,    0,    0,  378,    0,  378,
      380,  380,  380,    0,    0,    0,    0,    0,    0,    0,
      380,    0,  380,  381,  381,  381,    0,    0,    0,    0,
        0,    0,    0,  381,    0,  381,  382,  382,  382,    0,
        0,    0,    0,    0,    0,    0,  382,    0,  382,  383,
      383,  383,    0,    0,    0,    0,    0,    0,    0,  383,
        0,  383,  384,    0,    0,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  385,    0,
        0,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  387,    0,    0,  387,  387,  387,

      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      388,  388,  388,    0,    0,  388,  389,  389,  389,    0,
        0,  389,  392,  392,  392,    0,    0,  392,    0,    0,
        0,  392,  394,  394,  394,    0,    0,  394,  397,  397,
      397,    0,    0,  397,  398,  398,  398,    0,    0,  398,
        0,    0,    0,  398,  399,  399,  399,    0,    0,  399,
        0,    0,    0,  399,  400,  400,  400,    0,  400,  400,
        0,    0,    0,  400,  401,  401,  401,    0,    0,  401,
        0,    0,    0,  401,  402,  402,  402,    0,    0,  402,
        0,    0,    0,  402,  404,  404,  404,    0,    0,  404,

        0,    0,    0,  404,  406,  406,  406,    0,    0,  406,
        0,    0,    0,  406,  407,  407,  407,    0,    0,  407,
        0,    0,    0,  407,  408,  408,  408,    0,    0,  408,
        0,    0,    0,  408,  410,  410,  410,    0,    0,  410,
        0,    0,    0,  410,  413,  413,  413,    0,    0,  413,
        0,    0,    0,  413,  415,  415,  415,    0,    0,  415,
        0,    0,    0,  415,  417,  417,  417,    0,    0,  417,
        0,    0,    0,  417,  419,  419,  419,    0,    0,  419,
        0,    0,    0,  419,  420,  420,  420,    0,    0,  420,
        0,    0,    0,  420,  421,  421,  421,    0,  421,  421,

        0,    0,    0,  421,  422,  422,  422,    0,    0,  422,
        0,    0,    0,  422,  423,  423,  423,    0,    0,  423,
        0,    0,    0,  423,  425,  425,  425,    0,    0,  425,
        0,    0,    0,  425,  429,  429,  429,    0,    0,  429,
        0,    0,    0,  429,  430,  430,  430,    0,    0,  430,
        0,    0,    0,  430,  431,  431,  431,    0,    0,  431,
        0,    0,    0,  431,  432,  432,  432,    0,  432,  432,
        0,    0,    0,  432,  436,  436,  436,    0,    0,  436,
        0,    0,    0,  436,  440,  440,  440,    0,    0,  440,
        0,    0,    0,  440,  441,  441,  441,    0,    0,    0,

        0,    0,    0,  441,  442,  442,  442,    0,  442,    0,
        0,    0,    0,  442,  443,  443,  443,    0,    0,    0,
        0,    0,    0,  443,  444,  444,  444,    0,    0,    0,
        0,    0,    0,  444,  445,  445,  445,    0,  445,    0,
        0,    0,    0,  445,  446,  446,  446,    0,    0,    0,
        0,    0,    0,  446,  447,  447,  447,    0,    0,    0,
        0,    0,    0,    0,  447,    0,  447,  448,  448,  448,
        0,    0,    0,    0,    0,    0,    0,  448,    0,  448,
      450,  450,  450,    0,    0,    0,    0,    0,    0,    0,
      450,    0,  450,  451,    0,    0,  451,  451,  451,  451,

      451,  451,  451,  451,  451,  451,  451,  451,  451,  452,
        0,    0,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  454,    0,    0,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  455,    0,    0,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  456,    0,    0,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  457,    0,    0,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  458,
        0,    0,  458,  458,  458,  458,  458,  458,  458,  458,

      458,  458,  458,  458,  458,  460,    0,    0,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  461,    0,    0,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  462,    0,    0,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  464,    0,    0,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  466,
        0,    0,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  467,    0,    0,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,

      467,  468,    0,    0,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  470,    0,    0,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  471,    0,    0,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  473,
        0,    0,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  474,    0,    0,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  476,    0,    0,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  477,    0,    0,

      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  483,    0,    0,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  485,
        0,    0,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  488,    0,    0,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  490,    0,    0,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  498,    0,    0,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  502,    0,    0,  502,  502,  502,  502,

      502,  502,  502,  502,  502,  502,  502,  502,  502,  503,
      503,    0,    0,    0,    0,    0,    0,  503,  503,    0,
      503,  504,    0,    0,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  505,  505,    0,
        0,    0,    0,    0,    0,  505,  505,    0,  505,  507,
        0,    0,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  509,    0,    0,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  510,    0,    0,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  512,    0,    0,

      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  513,    0,    0,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  514,
        0,    0,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  515,    0,    0,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  516,    0,    0,    0,  516,    0,    0,  516,  516,
      516,    0,    0,  516,  517,    0,    0,    0,  517,    0,
        0,  517,  517,  517,    0,    0,  517,  519,  519,  519,
        0,    0,    0,    0,    0,    0,  519,  521,  521,  521,

        0,    0,    0,    0,    0,    0,  521,  522,  522,  522,
        0,    0,    0,    0,    0,    0,  522,  523,    0,    0,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  524,    0,    0,    0,  524,    0,    0,
      524,  524,  524,    0,    0,  524,  527,    0,    0,    0,
      527,    0,    0,  527,  527,  527,    0,    0,  527,  528,
      528,  528,    0,  528,    0,    0,    0,    0,  528,  528,
      532,  532,  532,    0,    0,    0,    0,    0,    0,  532,
      535,  535,  535,    0,    0,  535,    0,    0,    0,  535,
      536,  536,  536,    0,    0,  536,    0,    0,    0,  536,

      537,  537,  537,    0,  537,  537,    0,    0,    0,  537,
      538,  538,  538,    0,    0,  538,    0,    0,    0,  538,
      539,  539,  539,    0,    0,  539,    0,    0,    0,  539,
      540,    0,    0,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  543,    0,    0,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  544,    0,    0,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  547,  547,
      547,    0,    0,    0,    0,    0,    0,  547,  548,    0,
        0,  548,  548,  548,  548,  548,  548,  548,  548,  548,

      548,  548,  548,  548,  549,  549,  549,    0,    0,  549,
        0,    0,    0,  549,  550,  550,  550,    0,    0,  550,
        0,    0,    0,  550,  551,  551,  551,    0,  551,  551,
        0,    0,    0,  551,  557,  557,    0,    0,    0,  557,
      558,  558,    0,    0,    0,  558,  560,  560,  560,    0,
        0,  560,  561,  561,  561,    0,    0,  561,  562,  562,
      562,    0,  562,  562,  563,  563,  563,    0,    0,  563,
      564,  564,  564,    0,    0,  564,  565,    0,    0,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  566,    0,    0,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  568,    0,
        0,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  569,    0,    0,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      572,    0,    0,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  573,    0,    0,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  577,    0,    0,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  579,    0,
        0,  579,  579,  579,  579,  579,  579,  579,  579,  579,

      579,  579,  579,  579,  581,    0,    0,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      582,    0,    0,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  583,  583,  583,    0,
        0,  583,  584,  584,  584,    0,    0,  584,  585,  585,
      585,    0,  585,  585,  587,  587,  587,    0,    0,  587,
        0,    0,    0,  587,  588,  588,  588,    0,    0,  588,
      589,  589,  589,    0,  589,  589,    0,    0,    0,  589,
      591,  591,  591,    0,    0,  591,    0,    0,    0,  591,
      593,  593,  593,    0,    0,  593,  596,  596,  596,    0,

        0,  596,    0,    0,    0,  596,  597,  597,  597,    0,
        0,  597,    0,    0,    0,  597,  598,  598,  598,    0,
      598,  598,    0,    0,    0,  598,  599,  599,  599,    0,
        0,  599,    0,    0,    0,  599,  601,  601,  601,    0,
        0,  601,    0,    0,    0,  601,  602,  602,  602,    0,
        0,  602,    0,    0,    0,  602,  605,  605,  605,    0,
        0,  605,    0,    0,    0,  605,  606,  606,  606,    0,
        0,  606,    0,    0,    0,  606,  607,  607,  607,    0,
        0,  607,    0,    0,    0,  607,  608,  608,  608,    0,
        0,  608,    0,    0,    0,  608,  609,  609,  609,    0,

      609,  609,    0,    0,    0,  609,  612,  612,  612,    0,
        0,  612,    0,    0,    0,  612,  613,  613,  613,    0,
        0,  613,    0,    0,    0,  613,  614,  614,  614,    0,
      614,  614,    0,    0,    0,  614,  615,  615,  615,    0,
        0,  615,    0,    0,    0,  615,  617,  617,  617,    0,
        0,  617,    0,    0,    0,  617,  618,  618,  618,    0,
        0,  618,    0,    0,    0,  618,  619,  619,  619,    0,
        0,  619,    0,    0,    0,  619,  623,  623,  623,    0,
        0,  623,    0,    0,    0,  623,  624,  624,  624,    0,
        0,  624,    0,    0,    0,  624,  627,  627,  627,    0,

        0,  627,    0,    0,    0,  627,  629,  629,  629,    0,
        0,  629,    0,    0,    0,  629,  633,  633,  633,    0,
        0,  633,    0,    0,    0,  633,  639,  639,  639,    0,
        0,  639,    0,    0,    0,  639,  640,  640,  640,    0,
        0,  640,    0,    0,    0,  640,  641,  641,  641,    0,
      641,  641,    0,    0,    0,  641,  642,  642,  642,    0,
        0,  642,    0,    0,    0,  642,  644,  644,  644,    0,
        0,    0,    0,    0,    0,    0,  644,    0,  644,  645,
      645,  645,    0,    0,    0,    0,    0,    0,    0,  645,
        0,  645,  646,    0,    0,  646,  646,  646,  646,  646,

      646,  646,  646,  646,  646,  646,  646,  646,  647,    0,
        0,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  650,    0,    0,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      651,    0,    0,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  652,    0,    0,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  653,    0,    0,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  655,    0,
        0,  655,  655,  655,  655,  655,  655,  655,  655,  655,

      655,  655,  655,  655,  656,    0,    0,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      658,    0,    0,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  661,    0,    0,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  662,    0,    0,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  663,    0,
        0,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  666,    0,    0,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,

      667,    0,    0,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  668,    0,    0,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  669,    0,    0,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  671,    0,
        0,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  672,    0,    0,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      673,    0,    0,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  674,    0,    0,  674,

      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  676,    0,    0,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  679,    0,
        0,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  680,    0,    0,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      681,    0,    0,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  682,    0,    0,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  686,    0,    0,  686,  686,  686,  686,  686,

      686,  686,  686,  686,  686,  686,  686,  686,  687,    0,
        0,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  688,    0,    0,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      692,    0,    0,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  695,    0,    0,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  699,    0,    0,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  703,    0,
        0,  703,  703,  703,  703,  703,  703,  703,  703,  703,

      703,  703,  703,  703,  704,    0,    0,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      707,    0,    0,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  708,    0,    0,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  709,    0,    0,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  710,    0,
        0,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  712,    0,    0,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,

      713,    0,    0,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  715,    0,    0,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  726,    0,    0,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  728,    0,
        0,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  731,  731,  731,    0,    0,  731,
        0,    0,    0,  731,  732,  732,  732,    0,    0,  732,
        0,    0,    0,  732,  733,  733,  733,    0,  733,  733,
        0,    0,    0,  733,  734,  734,  734,    0,    0,  734,

        0,    0,    0,  734,  735,    0,    0,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      736,    0,    0,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  740,  740,  740,    0,
        0,  740,    0,    0,    0,  740,  742,  742,  742,    0,
        0,  742,    0,    0,    0,  742,  743,  743,  743,    0,
        0,  743,    0,    0,    0,  743,  744,  744,  744,    0,
        0,  744,    0,    0,    0,  744,  745,  745,  745,    0,
        0,  745,    0,    0,    0,  745,  746,  746,  746,    0,
        0,  746,    0,    0,    0,  746,  749,  749,  749,    0,

        0,  749,    0,    0,    0,  749,  751,  751,  751,    0,
        0,  751,    0,    0,    0,  751,  753,  753,  753,    0,
        0,  753,    0,    0,    0,  753,  760,    0,    0,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  770,  770,  770,    0,    0,  770,    0,    0,
        0,  770,  777,  777,  777,    0,    0,  777,  778,  778,
      778,    0,    0,  778,  779,  779,  779,    0,  779,  779,
      781,    0,    0,  781,  781,  781,  781,  781,  781,  781,
      781,  781,  781,  781,  781,  781,  782,    0,    0,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,

      782,  782,  784,    0,    0,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  785,    0,
        0,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  786,    0,    0,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      788,    0,    0,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  789,    0,    0,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  791,    0,    0,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  795,    0,

        0,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  798,    0,    0,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      799,    0,    0,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  803,    0,    0,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  804,    0,    0,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  806,  806,
      806,    0,    0,  806,    0,    0,    0,  806,  808,  808,
      808,    0,    0,  808,    0,    0,    0,  808,  812,  812,

      812,    0,    0,  812,    0,    0,    0,  812,  813,  813,
      813,    0,    0,  813,    0,    0,    0,  813,  814,  814,
      814,    0,  814,  814,    0,    0,    0,  814,  816,  816,
      816,    0,    0,  816,    0,    0,    0,  816,  818,  818,
      818,    0,    0,  818,    0,    0,    0,  818,  822,  822,
      822,    0,    0,  822,    0,    0,    0,  822,  823,  823,
      823,    0,    0,  823,    0,    0,    0,  823,  824,  824,
      824,    0,    0,  824,    0,    0,    0,  824,  826,  826,
      826,    0,  826,  826,    0,    0,    0,  826,  827,  827,
      827,    0,    0,  827,    0,    0,    0,  827,  834,  834,

      834,    0,    0,  834,    0,    0,    0,  834,  835,  835,
      835,    0,    0,  835,    0,    0,    0,  835,  836,  836,
      836,    0,  836,  836,    0,    0,    0,  836,  840,    0,
        0,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  844,    0,    0,  844,  844,  844,
      844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
      850,    0,    0,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  851,    0,    0,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  852,    0,    0,  852,  852,  852,  852,  852,

      852,  852,  852,  852,  852,  852,  852,  852,  854,    0,
        0,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  855,    0,    0,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      856,    0,    0,  856,  856,  856,  856,  856,  856,  856,
      856,  856,  856,  856,  856,  856,  863,    0,    0,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  865,    0,    0,  865,  865,  865,  865,  865,
      865,  865,  865,  865,  865,  865,  865,  865,  868,    0,
        0,  868,  868,  868,  868,  868,  868,  868,  868,  868,

      868,  868,  868,  868,  869,    0,    0,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      871,    0,    0,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  875,    0,    0,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  877,    0,    0,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  880,    0,
        0,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  881,    0,    0,  881,  881,  881,
      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,

      883,    0,    0,  883,  883,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  884,    0,    0,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  885,    0,    0,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  887,    0,
        0,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  892,    0,    0,  892,  892,  892,
      892,  892,  892,  892,  892,  892,  892,  892,  892,  892,
      893,    0,    0,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  894,    0,    0,  894,

      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  898,    0,    0,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  899,    0,
        0,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      899,  899,  899,  899,  900,    0,    0,  900,  900,  900,
      900,  900,  900,  900,  900,  900,  900,  900,  900,  900,
      904,    0,    0,  904,  904,  904,  904,  904,  904,  904,
      904,  904,  904,  904,  904,  904,  909,    0,    0,  909,
      909,  909,  909,  909,  909,  909,  909,  909,  909,  909,
      909,  909,  910,    0,    0,  910,  910,  910,  910,  910,

      910,  910,  910,  910,  910,  910,  910,  910,  911,    0,
        0,  911,  911,  911,  911,  911,  911,  911,  911,  911,
      911,  911,  911,  911,  915,    0,    0,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      918,    0,    0,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  919,    0,    0,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  922,    0,    0,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  924,    0,
        0,  924,  924,  924,  924,  924,  924,  924,  924,  924,

      924,  924,  924,  924,  927,    0,    0,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      928,    0,    0,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  929,    0,    0,  929,
      929,  929,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  930,    0,    0,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  931,    0,
        0,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  932,    0,    0,  932,  932,  932,
      932,  932,  932,  932,  932,  932,  932,  932,  932,  932,

      942,    0,    0,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  945,  945,  945,    0,
        0,  945,    0,    0,    0,  945,  946,  946,  946,    0,
        0,  946,    0,    0,    0,  946,  947,  947,  947,    0,
      947,  947,    0,    0,    0,  947,  948,  948,  948,    0,
        0,  948,    0,    0,    0,  948,  949,  949,  949,    0,
        0,  949,    0,    0,    0,  949,  955,    0,    0,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  956,    0,    0,  956,  956,  956,  956,  956,
      956,  956,  956,  956,  956,  956,  956,  956,  958,    0,

        0,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  959,    0,    0,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      960,    0,    0,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  961,    0,    0,  961,
      961,  961,  961,  961,  961,  961,  961,  961,  961,  961,
      961,  961,  963,    0,    0,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  967,  967,
      967,    0,    0,  967,    0,    0,    0,  967,  968,  968,
      968,    0,    0,  968,    0,    0,    0,  968,  971,  971,

      971,    0,    0,  971,    0,    0,    0,  971,  972,  972,
      972,    0,    0,  972,    0,    0,    0,  972,  973,  973,
      973,    0,    0,  973,    0,    0,    0,  973,  974,  974,
      974,    0,    0,  974,    0,    0,    0,  974,  975,  975,
      975,    0,  975,  975,    0,    0,    0,  975,  978,  978,
      978,    0,    0,  978,    0,    0,    0,  978,  979,  979,
      979,    0,    0,  979,    0,    0,    0,  979,  981,  981,
      981,    0,    0,  981,    0,    0,    0,  981,  983,    0,
        0,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  984,    0,    0,  984,  984,  984,

      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      988,    0,    0,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  989,    0,    0,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  992,    0,    0,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  993,    0,
        0,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  999,    0,    0,  999,  999,  999,
      999,  999,  999,  999,  999,  999,  999,  999,  999,  999,
     1002,    0,    0, 1002, 1002, 1002, 1002, 1002, 1002, 1002,

     1002, 1002, 1002, 1002, 1002, 1002, 1006,    0,    0, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1009,    0,    0, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1010,    0,
        0, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1011,    0,    0, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1012,    0,    0, 1012, 1012, 1012, 1012, 1012, 1012, 1012,
     1012, 1012, 1012, 1012, 1012, 1012, 1013,    0,    0, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,

     1013, 1013, 1017,    0,    0, 1017, 1017, 1017, 1017, 1017,
     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1018,    0,
        0, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1019,    0,    0, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1023,    0,    0, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1027,    0,    0, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1028,    0,    0, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1029,    0,

        0, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1030,    0,    0, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1034,    0,    0, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1044,    0,    0, 1044,
     1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044,
     1044, 1044, 1047,    0,    0, 1047, 1047, 1047, 1047, 1047,
     1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1048,    0,
        0, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1050,    0,    0, 1050, 1050, 1050,

     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1055,    0,    0, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1056,    0,    0, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1057,    0,    0, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1061,    0,
        0, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061,
     1061, 1061, 1061, 1061, 1070,    0,    0, 1070, 1070, 1070,
     1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070,
     1071,    0,    0, 1071, 1071, 1071, 1071, 1071, 1071, 1071,

     1071, 1071, 1071, 1071, 1071, 1071, 1075,    0,    0, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1077,    0,    0, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1085,    0,
        0, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1087,    0,    0, 1087, 1087, 1087,
     1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087,
     1093,    0,    0, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1115,    0,    0, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,

     1115, 1115, 1119,    0,    0, 1119, 1119, 1119, 1119, 1119,
     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1120, 1120,
     1120,    0,    0, 1120,    0,    0,    0, 1120, 1121, 1121,
     1121,    0,    0, 1121,    0,    0,    0, 1121, 1125,    0,
        0, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
     1125, 1125, 1125, 1125, 1131,    0,    0, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1148,    0,    0, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1150,    0,    0, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,

     1150, 1150, 1157,    0,    0, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1179,    0,
        0, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1185,    0,    0, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1208,    0,    0, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1241,    0, 1241, 1242,
        0, 1242, 1243,    0, 1243, 1244,    0, 1244, 1247,    0,
     1247, 1248,    0, 1248, 1249,    0, 1249, 1250,    0, 1250,
     1251,    0, 1251, 1252,    0, 1252, 1253,    0, 1253, 1254,

        0, 1254, 1255,    0, 1255, 1256,    0, 1256, 1259,    0,
     1259, 1261,    0, 1261, 1263,    0, 1263, 1264,    0, 1264,
     1265,    0, 1265, 1266,    0, 1266, 1267,    0, 1267, 1268,
        0, 1268, 1269,    0, 1269, 1270,    0, 1270, 1271,    0,
     1271, 1272,    0, 1272, 1273,    0, 1273, 1274,    0, 1274,
     1275,    0, 1275, 1276,    0, 1276, 1277,    0, 1277, 1278,
        0, 1278, 1279,    0, 1279, 1281,    0, 1281, 1284,    0,
     1284, 1285,    0, 1285, 1289,    0, 1289, 1290,    0, 1290,
     1291,    0, 1291, 1293,    0, 1293, 1294,    0, 1294, 1295,
        0, 1295, 1296,    0, 1296, 1297,    0, 1297, 1298,    0,

     1298, 1299,    0, 1299, 1300,    0, 1300, 1301,    0, 1301,
     1302,    0, 1302, 1303,    0, 1303, 1304,    0, 1304, 1305,
        0, 1305, 1306,    0, 1306, 1307,    0, 1307, 1308,    0,
     1308, 1309,    0, 1309, 1310,    0, 1310, 1311,    0, 1311,
     1312,    0, 1312, 1313,    0, 1313, 1314,    0, 1314, 1315,
        0, 1315, 1316,    0, 1316, 1317,    0, 1317, 1318,    0,
     1318, 1319,    0, 1319, 1320,    0, 1320, 1321,    0, 1321,
     1322,    0, 1322, 1323,    0, 1323, 1324,    0, 1324, 1325,
        0, 1325, 1326,    0, 1326, 1327,    0, 1327, 1328,    0,
     1328, 1329,    0, 1329, 1330,    0, 1330, 1331,    0, 1331,

     1332,    0, 1332, 1333,    0, 1333, 1334,    0, 1334, 1336,
        0, 1336, 1338,    0, 1338, 1341,    0, 1341, 1342,    0,
     1342, 1343,    0, 1343, 1344,    0, 1344, 1345,    0, 1345,
     1346,    0, 1346, 1347,    0, 1347, 1348,    0, 1348, 1349,
        0, 1349, 1350,    0, 1350, 1351,    0, 1351, 1352,    0,
     1352, 1353,    0, 1353, 1354,    0, 1354, 1355,    0, 1355,
     1356,    0, 1356, 1357,    0, 1357, 1358,    0, 1358, 1359,
        0, 1359, 1360,    0, 1360, 1361,    0, 1361, 1362,    0,
     1362, 1363,    0, 1363, 1364,    0, 1364, 1365,    0, 1365,
     1366,    0, 1366, 1367,    0, 1367, 1368,    0, 1368, 1369,

        0, 1369, 1370,    0, 1370, 1371,    0, 1371, 1372,    0,
     1372, 1373,    0, 1373, 1374,    0, 1374, 1375,    0, 1375,
     1376,    0, 1376, 1377,    0, 1377, 1378,    0, 1378, 1379,
        0, 1379, 1380,    0, 1380, 1381,    0, 1381, 1382,    0,
     1382, 1383,    0, 1383, 1384,    0, 1384, 1385,    0, 1385,
     1386,    0, 1386, 1387,    0, 1387, 1388,    0, 1388, 1389,
        0, 1389, 1391,    0, 1391, 1392,    0, 1392, 1393,    0,
     1393, 1394,    0, 1394, 1395,    0, 1395, 1396,    0, 1396,
     1397,    0, 1397, 1398,    0, 1398, 1399,    0, 1399, 1400,
        0, 1400, 1401,    0, 1401, 1402,    0, 1402, 1403,    0,

     1403, 1404,    0, 1404, 1405,    0, 1405, 1406,    0, 1406,
     1407,    0, 1407, 1408,    0, 1408, 1409,    0, 1409, 1410,
        0, 1410, 1411,    0, 1411, 1412,    0, 1412, 1413,    0,
     1413, 1414,    0, 1414, 1415,    0, 1415, 1416,    0, 1416,
     1417,    0, 1417, 1418,    0, 1418, 1419,    0, 1419, 1420,
        0, 1420, 1421,    0, 1421, 1422,    0, 1422, 1423,    0,
     1423, 1424,    0, 1424, 1425,    0, 1425, 1426,    0, 1426,
     1427,    0, 1427, 1428,    0, 1428, 1429,    0, 1429, 1430,
        0, 1430, 1431,    0, 1431, 1432,    0, 1432, 1433,    0,
     1433, 1434,    0, 1434, 1435,    0, 1435, 1436,    0, 1436,

     1437,    0, 1437, 1438,    0, 1438, 1439,    0, 1439, 1440,
        0, 1440, 1441,    0, 1441, 1442,    0, 1442, 1443,    0,
     1443, 1444,    0, 1444, 1445,    0, 1445, 1446,    0, 1446,
     1447,    0, 1447, 1448,    0, 1448, 1449,    0, 1449, 1450,
        0, 1450, 1451,    0, 1451, 1452,    0, 1452, 1453,    0,
     1453, 1454,    0, 1454, 1455,    0, 1455, 1456,    0, 1456,
     1457,    0, 1457, 1458,    0, 1458, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[17] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
/*
 *
 * CS-252 
 * shell.l: lexical analyzer for shell
 * You have to extend it.
 *
 */
#line 11 "shell.l"

#include <cstring>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include "y.tab.hh"
/*
#include <string.h>
#include "y.tab.h"

////////////  Start added code ///////////


extern “C” char * read_line();

int mygetc(FILE * f) {
  static char *p;
  char ch;

     if (!isatty(0)) {
  // stdin is not a tty. Call real getc
    return getc(f);
  }

  // stdin is a tty. Call our read_line.
  if (p==NULL || *p == 0) {
    char * s = read_line();
    p = s;
  }

  ch = *p;
  p++;

  return ch;
}

#undef getc
#define getc(f) mygetc(f)

/////////// End added code ///////////*/

#define MAX_INCLUDE_DEPTH 10
YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

static  void yyunput (int c,char *buf_ptr  );

char *getenv(const char *name);

void myunputc(int c) {
  unput(c);
}

void remove_character(char* s, char c, int p) {
  int j, n = strlen(s);
  int escaped = 0; 
  int count = 0;

  for (int i = j = 0; i < n; i++) {
    if (s[i] != c || escaped || (p && count == p)) {
      s[j++] = s[i];
      escaped = 0;
    } else {
      escaped = 1;
      count++;
    }
  }   

  s[j] = '\0';
}

/*void source(char *s) {
  FILE *yyin = fopen(s, "r");

  if (!yyin) {
    fprintf( stderr, "No File" );
  } else {
    yypush_buffer_state( yy_create_buffer( yyin, YY_BUF_SIZE ) );
    yyparse();
    fclose(yyin);
  }
}*/

void removeStartAndEnd(char* s) {
  int j, n = strlen(s);

  s[0] = '\0';
  for (int i = 1; i < n; i++) {
    s[i - 1] = s[i];
  }   
  s[n - 2] = '\0';
}

#line 2781 "lex.yy.cc"
#line 2782 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 108 "shell.l"


#line 3002 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1240 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 7967 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 110 "shell.l"
{
  return NEWLINE;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 114 "shell.l"
{
  /* Discard spaces and tabs */
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 118 "shell.l"
{
  return GREAT;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 122 "shell.l"
{
  return GREATGREAT;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 126 "shell.l"
{
  return LESS;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 130 "shell.l"
{
  return PIPE;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 134 "shell.l"
{
  return AMPERSAND;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 138 "shell.l"
{
  return TWOGREAT;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 142 "shell.l"
{
  return GREATAMPERSAND;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 146 "shell.l"
{
  return GREATGREATAMPERSAND;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 150 "shell.l"
{ 
  remove_character(yytext, '$', NULL);
  remove_character(yytext, '(', NULL);
  remove_character(yytext, ')', NULL);

  int pin[2], pout[2];
  pipe(pin); pipe(pout);

  int ret = fork();
  if (ret == 0) {
      close(pin[1]);
      close(pout[0]);

      dup2(pin[0], 0);
      close(pin[0]);

      dup2(pout[1], 1);
      close(pout[1]);
      
      // Execute shell executable
      execvp("/proc/self/exe", NULL);
      perror("Error in Child Process");
      exit(1);
  } else if (ret < 0) {
      perror("Error Forking Child");
      exit(1);
  }

  close(pin[0]);
  close(pout[1]);

  write(pin[1], strcat(yytext, "\n"), strlen(yytext) + 1);
  write(pin[1], "exit\n", 6);
  close(pin[1]);
  
  int size = 1024;
  char* buffer = (char*) malloc(sizeof(char) * size);
  char* iterator = buffer;
  int n = read(pout[0], iterator++, 1);
  while (n > 0) {
    n = read(pout[0], iterator++, 1);
    if (strlen(buffer) == size) {
      size = size * 2;
      realloc(buffer, size);
    }
  }

  *iterator = '\0';
  close(pout[0]);

  for (int i = strlen(buffer) - 1; i >= 0; i--) {
    char c = ' ';
    if (buffer[i] == '\n') {
      myunputc(' ');
    } else {
      myunputc(buffer[i]);
    }
  }
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 210 "shell.l"
{ 
  remove_character(yytext, '\\', NULL);
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 216 "shell.l"
{
  char* envStart = strchr(yytext, '}');
  char* envEnd = strchr(yytext, '{');
  int length = (int)(envEnd - envStart) - 2;

  char* env = (char*) malloc(sizeof(char) * length);
  env = strncpy(envStart, env, length);
  env[length] = '\0';

  printf("%s", env);

  remove_character(yytext, '$', 1);
  remove_character(yytext, '{', NULL);
  remove_character(yytext, '}', NULL);

  int size = 1024;
  char* buffer = (char*) malloc(sizeof(char) * size);

  if (!strcmp(yytext, "$")) {
    // Return PID of the Shell
    sprintf(buffer, "%d", getpid());
  } else if (!strcmp(yytext, "?")) {
    // Return exit code of last command
    buffer = getenv(yytext);
  } else if (!strcmp(yytext, "!")) {
    // Return PID of last background process
    buffer = getenv(yytext);
  } else if (!strcmp(yytext, "_")) {
    // Return the last argument of the last command
    buffer = getenv("LAST_ARG");
  } else if (!strcmp(yytext, "SHELL")) {
    // Return the path of the shell
    buffer = getenv(yytext);
  } else {
    // Return ENV variable expansion
    buffer = getenv(yytext);
  }

  if(buffer) {
    for (int i = strlen(buffer) - 1; i >= 0; i--) {
      myunputc(buffer[i]);
    }
  }
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 261 "shell.l"
{
  removeStartAndEnd(yytext);
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 267 "shell.l"
{
  /* Assume that file names have only alpha chars */
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 272 "shell.l"
ECHO;
	YY_BREAK
#line 3283 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1240 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1240 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1239);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 272 "shell.l"
