#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 16
#define YY_END_OF_BUFFER 17
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[966] =
    {   0,
        0,    0,   17,   15,    2,    1,   15,   15,    7,   15,
        5,    3,   12,    6,   15,   15,   15,    0,   12,   15,
        0,   15,   15,    0,   15,   15,    0,    0,   12,    8,
        9,    4,   12,   12,   12,   12,   12,   15,    0,   14,
       15,    0,   14,   15,    0,   14,   15,    0,   15,   14,
        0,   15,    0,   15,   15,    0,   12,   15,    0,   15,
        0,   12,    0,    0,    0,   12,   12,   12,   10,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       14,   14,   14,   14,   14,   14,   15,    0,   14,   15,
        0,   14,   14,    0,   15,    0,   15,   15,    0,   11,

       12,   11,   15,    0,   15,   15,    0,   11,   15,    0,
        0,   11,   12,   12,   12,   12,   12,   11,   12,   15,
        0,   15,    0,   12,   13,   13,   15,    0,   15,    0,
       13,    0,   12,   13,   12,   12,   12,   12,   12,   14,
        0,    0,    0,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   14,   14,   14,   14,   14,   14,   14,   15,    0,
       14,   15,    0,   11,   14,   11,   14,    0,   14,   14,

       14,   11,   15,   14,    0,   11,   14,   14,    0,   11,
       11,   11,   11,   11,   11,   11,   11,   15,   14,   15,
        0,   11,   11,   11,   11,   11,   11,   15,    0,   15,
       15,    0,   11,   12,    0,    0,   11,    0,   11,   11,
       11,   11,   12,   12,   11,   12,   12,   12,   12,   12,
       11,   12,   12,   11,   11,   11,   11,   11,   11,   12,
       12,   12,   12,   11,   12,   15,    0,   14,    0,   13,
       14,   13,   15,    0,   14,    0,   13,   14,   13,    0,
       13,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   14,   14,   14,
       14,   14,   14,   11,   11,   11,   11,   14,   14,   14,
       14,   11,   14,   14,   14,   11,   11,   11,   11,   11,
       11,   15,    0,   14,   15,    0,   11,   14,   14,   11,
        0,   11,   11,   11,   14,   14,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   14,    0,
       11,    0,    0,   11,   12,   11,   11,   11,   11,   11,

       11,   11,   11,   12,   12,   11,   12,   12,   12,   12,
       11,   12,   12,   12,   12,   12,   11,   12,   12,   12,
       12,   12,   11,   12,   12,   12,   12,   11,   12,   11,
       11,   11,   11,   11,   11,   12,   12,   12,   12,   11,
       12,   12,   12,   12,   12,   11,   12,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       12,   12,   12,   12,   11,   12,   12,   14,   14,   14,
       13,   14,   14,   13,   14,   13,   14,   13,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   11,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       11,   11,   11,   14,   14,   14,   14,   11,   14,   11,
       11,   11,   11,   14,    0,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   12,   12,   11,   12,   12,   11,   11,   11,
       11,   12,   12,   11,   12,   12,   12,   11,   12,   12,
       12,   11,   12,   12,   12,   12,   12,   12,   11,   12,
       12,   12,   11,   12,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,   12,   12,
       12,   11,   12,   12,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   12,   12,   12,   12,   11,   12,   12,
       12,   12,   12,   11,   12,   14,   14,   14,   13,   14,
       13,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   11,   12,   12,   12,   12,   11,   12,   11,   11,
       11,   11,   11,   11,   12,   12,   12,   12,   11,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   14,   14,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   12,   12,
       11,   12,   11,   11,   11,   11,   12,   12,   11,   12,

       12,   12,   12,   11,   12,   12,   12,   11,   12,   12,
       11,   11,   11,   11,   12,   12,   11,   12,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   12,   12,
       12,   12,   12,   11,   12,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   11,   12,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   12,   12,   12,   11,   12,   12,   12,
       11,   12,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   12,   12,   12,   12,   11,
       12,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       12,   12,   11,   12,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    6,    1,    7,    1,    8,
        9,    1,    1,    1,    1,    1,    1,    1,    1,   10,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   11,
        1,   12,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   13,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   14,   15,   16,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[17] =
    {   0,
        1,    2,    2,    3,    1,    4,    1,    1,    1,    1,
        1,    1,    1,    4,    1,    1
    } ;

static const flex_int16_t yy_base[1152] =
    {   0,
        0,    0,  866,   16, 6923, 6923,   32,   41,   51,  853,
       60,   46,   73,    0,    0,    0,  856,    0,    0,   89,
      858,  105,  854,  118,  124,  140,  153,  853,  155,    0,
        0,  853,    0,  168,  835,  180,  193,    0,  837,  209,
      831,  222,   14,    0,  832,    0,  828,    0,  228,  241,
      827,  247,  825,  263,  825,  276,  289,  305,  816,  321,
      337,  353,  366,  823,  369,  379,  807,  388,    0,  401,
      417,  806,  430,  443,  459,    0,  475,  792,  487,    0,
      500,    0,  791,  513,   30,   46,  519,   54,  535,  790,
      548,  554,  557,  562,    0,  774,    0,  774,  565,  578,

        0,   58,    0,   63,  594,  759,  607,  616,  632,  645,
      758,  651,  661,    0,  674,  743,  687,  700,  716,  732,
      734,  748,  764,  780,  796, 6923,  812,  824,  840,  853,
      869,  882,  898,  910,    0,  923,    0,  939,  955,    0,
      968,  973,  727,    0,  979,  989,  999, 1009, 1019, 1028,
     1037, 1050, 1066,  726, 1079, 1092,    0,    0,  711,    0,
        0, 1108, 1121,  710, 1131,    0, 1144,  695,    0,    0,
        0,    0,  694,    0,    0,    0, 1160,  691,    0,    0,
     1176, 1192, 1208,  690, 1221, 1227,    0, 1240, 1248,   66,
     1264,  689, 1277, 1286, 1299, 1305, 1314,  157,    0,  687,

     1327, 1336, 1352, 1365, 1371, 1377, 1383, 1386,    0, 1395,
     1411,  686, 1424,    0, 1437,  161,  183,    0,    0,  669,
      668,    0,    0, 1453,  665, 1466,    0, 1475,  663, 1491,
      663, 1504,    0,    0, 1514,    0,    0, 1520, 1530, 1536,
      661, 1546, 1556,  660, 1566, 1576, 1589, 1605,  655, 1618,
     1631, 1647, 1663,    0, 1679,  654,    0,    0, 1695, 1711,
     1727,  653, 1740,    0,    0, 1753, 1765, 1781, 1794, 1810,
     1823,  654,    0, 1835,    0, 1848,    0, 1861, 1874, 1877,
     1890, 1896, 1912, 1924, 1937, 1953, 1969, 1985, 2001, 2017,
     2033,    0,    0, 2049, 2062, 2072, 2082, 2092, 2102, 2112,

      650, 2122,  645,    0, 2132,    0,  644, 2142, 2155, 2171,
      627, 2184, 2197, 2213, 2229,  626, 2242, 2255, 2268, 2278,
     2288,    0, 2301,  611, 2314,    0, 2327, 2343,    0,  610,
      607,    0, 2359, 2375,  606,    0,    0, 2391, 2407,  589,
     2420, 2426, 2432, 2438, 2444, 2450, 2456,    0,    0,  588,
     2462, 2471, 2487, 2500,  573, 2506,    0, 2515,  572, 2528,
        0, 2537,  158,    0,  569, 2550, 2559, 2572,  568,    0,
     2578, 2584, 2590, 2596,    0,  567,    0, 2605,  565,    0,
        0, 2621,    0,    0,  564,    0,    0, 2637,    0, 2650,
        0, 2656, 2665, 2678, 2688, 2698,  556,    0, 2704, 2714,

     2727,  548, 2740, 2750, 2763, 2776, 2786, 2796, 2806,  547,
     2816,    0, 2829, 2845,  530,  529, 2861, 2877,    0,    0,
      514,  513,    0,    0, 2893, 2906,    0, 2916, 2926,    0,
     2939,  495,    0,    0, 2955,    0, 2971,  494,    0,    0,
        0, 2987, 3003,  491, 3016, 3029, 3045,    0, 3061,  490,
        0,    0,    0, 3077, 3093, 3109,  489,    0,    0,    0,
        0, 3125,  488,    0,    0,    0, 3141, 3157, 3173, 3186,
     3202, 3215, 3228,   56, 3241, 3254, 3257, 3270, 3276, 3292,
     3305, 3318, 3334, 3346, 3359, 3375, 3391, 3407, 3423,    0,
        0,    0,    0,    0, 3439,    0, 3452,    0, 3465,    0,

        0, 3481,    0, 3497,    0,    0,    0, 3510, 3523,    0,
     3536, 3546, 3556, 3566, 3576, 3586, 3596, 3606, 3619,  487,
     3635, 3651,  486, 3664, 3677, 3693, 3706, 3716,    0,    0,
     3729,  470,    0,    0, 3745, 3761,  469, 3774, 3787, 3803,
     3816,    0,  454,    0, 3829, 3845, 3861,  453,    0,    0,
     3874, 3880,    0, 3889, 3905,  438, 3918, 3927, 3940, 3946,
     3952, 3958, 3967, 3980, 3986, 3992, 3998,  437,    0, 4004,
     4013, 4029,  434, 4042,    0, 4051, 4067,  433, 4080,    0,
     4093,    0,    0,  432,    0,    0,    0,  431,    0, 4106,
     4112,  430, 4122, 4132, 4145,  429, 4158, 4168, 4178, 4191,

      412,  411, 4204, 4217,  396,    0, 4230, 4240,    0,  395,
     4250, 4260,  392,    0,    0, 4270, 4283, 4296, 4306, 4316,
      391,    0,    0, 4326, 4339, 4355,  390,  389, 4371,    0,
     4384, 4397, 4410, 4420, 4433, 4449,  388, 4462,    0, 4475,
     4491, 4507, 4523,  387,    0,    0,    0, 4539, 4555,  383,
     4568,    0,    0, 4581,    0,    0,  382,  381,    0,    0,
        0, 4597,  380,    0,    0, 4613,    0, 4629,  379,    0,
        0,    0, 4645,    0,    0,  378,    0,    0,    0, 4661,
     4677,  373, 4690,    0,    0, 4703, 4719, 4732, 4748, 4761,
     4774, 4780, 4796, 4809, 4822,    0, 4835, 4848,    0, 4861,

     4874, 4890, 4906, 4922, 4938,    0, 4954, 4967,    0, 4980,
        0,    0, 4996, 5012,    0,    0,    0, 5028, 5041, 5051,
      372,    0, 5064, 5080,  371, 5093,    0,    0,    0,  370,
     5103, 5116,    0, 5132, 5145,  369, 5155, 5165,    0, 5178,
      368, 5191,    0, 5204,    0,    0,  348, 5217,    0,    0,
     5227,  347,    0,    0,    0,  332,    0,    0, 5237, 5243,
     5249, 5255, 5264, 5280,  331, 5293,    0, 5299, 5305, 5311,
     5317, 5330,  316, 5343, 5353, 5363, 5373,  315,  300, 5383,
     5396,  299, 5409, 5419,    0,  284,  283, 5429,    0, 5442,
      280,    0, 5455,  279,    0, 5465, 5475,  278, 5485,    0,

     5495,    0,  276,  275,    0, 5505, 5518, 5531,  258, 5541,
        0,  257,    0,    0,    0,  242,    0,    0, 5554,    0,
     5570,  241,    0,    0,    0, 5586,    0,  223,  222,    0,
     5602,    0,    0,  204,    0,    0,    0, 5618, 5634, 5650,
        0,  203,    0,    0,    0,    0,    0,  189,  188,    0,
        0, 5666, 5682,  187,    0,    0,    0, 5698, 5714, 5727,
        0, 5740, 5753, 5766, 5782, 5798, 5814, 5830, 5846,    0,
     5859,    0, 5872,    0,    0, 5888,    0,    0, 5901,    0,
      183,    0, 5914, 5930,  182, 5943, 5956, 5972, 5985, 5991,
     5997,    0,    0,  181,  180, 6003,  163,    0,    0, 6013,

     6023,    0,  156,  135, 6033,  134,    0,    0, 6043,    0,
      119,    0,    0, 6053,    0,  118,  100,    0, 6063, 6073,
     6083,    0,    0, 6096,   99, 6109,    0, 6122, 6138,    0,
        0,   84,   83,    0,    0,    0, 6154,   69,    0,    0,
        0, 6167,    0,    0,   68,   62,    0,   61,    0,    0,
        0,   46,    0,    0,    0,    0,   44,    0,    0,    0,
        0,   12,    0,    0, 6923, 6180, 6184, 6188, 6192, 6196,
     6200, 6204, 6208, 6212, 6216, 6219, 6223, 6227, 6231, 6235,
     6239, 6243, 6247, 6251, 6255, 6259, 6263, 6267, 6271, 6274,
     6278, 6282, 6286, 6290, 6294, 6298, 6302, 6306, 6310, 6314,

     6318, 6322, 6326, 6330, 6334, 6338, 6342, 6346, 6350, 6354,
     6358, 6362, 6366, 6370, 6374, 6378, 6382, 6386, 6390, 6394,
     6398, 6402, 6406, 6410, 6414, 6418, 6422, 6426, 6430, 6434,
     6438, 6442, 6446, 6450, 6454, 6458, 6462, 6466, 6470, 6474,
     6478, 6482, 6486, 6490, 6494, 6498, 6502, 6506, 6510, 6514,
     6518, 6522, 6526, 6530, 6534, 6538, 6542, 6546, 6550, 6554,
     6558, 6562, 6566, 6570, 6574, 6578, 6582, 6586, 6590, 6594,
     6598, 6602, 6606, 6610, 6614, 6618, 6622, 6626, 6630, 6634,
     6638, 6642, 6646, 6650, 6654, 6658, 6662, 6666, 6670, 6674,
     6678, 6682, 6686, 6690, 6694, 6698, 6702, 6706, 6710, 6714,

     6718, 6722, 6726, 6730, 6734, 6738, 6742, 6746, 6750, 6754,
     6758, 6762, 6766, 6770, 6774, 6778, 6782, 6786, 6790, 6794,
     6798, 6802, 6806, 6810, 6814, 6818, 6822, 6826, 6830, 6834,
     6838, 6842, 6846, 6850, 6854, 6858, 6862, 6866, 6870, 6874,
     6878, 6882, 6886, 6890, 6894, 6898, 6902, 6906, 6910, 6914,
     6918
    } ;

static const flex_int16_t yy_def[1152] =
    {   0,
      965,    1,  965,  965,  965,  965,  965,    4,  966,    4,
      966,   11,  965,   11,    4,    7,    4,   11,   13,  965,
      967,  965,   20,  968,  965,  965,  969,   11,  970,   11,
       11,   11,   13,  965,   13,  970,  965,   20,  967,  965,
       20,  968,  971,   20,  967,   40,   20,   42,  965,  972,
       42,  965,  973,  965,   52,  974,  965,  965,  975,  965,
      965,  965,  976,   42,  977,  978,   36,  979,   11,  965,
      965,   70,  980,  965,  965,   37,  965,   37,  979,   37,
      965,   40,   81,  981,  971,  971,  965,  982,  965,   87,
      983,  972,  981,  984,   52,  973,   54,   52,  974,  965,

       57,  985,   87,  982,  965,   87,  983,  965,  965,  986,
       99,  987,  988,   57,  965,   57,  988,  965,  965,  965,
      989,  965,  965,  965,  965,  965,  965,  990,  965,  991,
      965,  992,  965,  993,  124,  965,  133,  965,  965,   92,
      994,  986,   99,  117,  995,  996,  997,  998,  999, 1000,
     1000,  965,  965,  152,  996,  965,  152,  153,  152,  155,
      156,  965, 1001,  155,  997,  156,  965,  156,  165,  156,
       57,  115,   57,  117,  119,  156,  965,  156,  165,  156,
      965,  965,  965,  182, 1002,  965,   92, 1002,  965, 1003,
      965,  189, 1004,  965, 1005, 1006,  965, 1003,  191,  197,

     1007,  965,  965, 1008, 1004, 1009, 1010, 1008,  205,  965,
      965,  210, 1011,  210,  965, 1012, 1012,  189,  191,  189,
      205,  194,  194,  965,  194, 1009,  194,  965, 1013,  965,
      228, 1014,  210,   57, 1015,  205,  226, 1016, 1017, 1011,
      240, 1018, 1019,  117, 1018, 1020,  965,  965,  247, 1021,
      965,  965,  965,  215,  965,  215,  245,  215,  965,  965,
      965,  260, 1020,  259,  260,  965, 1022,  965, 1023,  965,
     1024, 1025,  266, 1022,  268, 1023,  270, 1026, 1027, 1028,
     1027,  965,  965, 1029,  965,  965,  965,  965,  965,  965,
      965,  283,  290,  965, 1030, 1031, 1032, 1033, 1034, 1032,

      300, 1019,  117,  263, 1035,  300,  300, 1036,  965,  965,
      309, 1037,  965,  965,  965,  314, 1038,  965, 1030, 1037,
     1039,  313,  965,  313, 1039,  313,  965,  965,  323,  328,
      300,  328,  965,  965,  333,  263,  333,  965,  965,  338,
     1040, 1041, 1041, 1042, 1043, 1042, 1043,  338,  339,  338,
     1040,  965,  965, 1044,  351, 1045,  352,  965,  352, 1045,
      352,  965, 1046,  339,  362, 1047,  965, 1044,  351,  360,
     1048, 1049, 1050, 1050,  368,  351,  367,  965,  367,  374,
      367,  965,  352,  358,  352,  360,  352,  965,  368, 1047,
      374, 1051,  965, 1052, 1053, 1054,  374,  374, 1055, 1056,

      965,  401, 1057, 1058,  965, 1059, 1060, 1061, 1062,  263,
     1057,  263,  965,  965,  413,  405,  965,  965,  413,  414,
      413,  405,  417,  418,  965, 1063,  405, 1059, 1060,  417,
      965,  417,  428,  417,  965,  418,  965,  418,  429,  435,
      418,  965,  965,  442, 1053,  965,  965,  417,  965,  417,
      428,  417,  435,  965,  965,  965,  455,  411,  455,  455,
      418,  965,  418,  429,  435,  418,  965,  965,  965, 1064,
      965, 1065, 1065, 1066, 1067, 1068, 1067, 1069,  965,  965,
     1070,  965,  965, 1071,  965,  965,  965,  965,  965,  485,
      486,  487,  488,  489,  965,  480, 1070,  488,  965,  480,

      488,  965,  488,  965,  480,  488,  502, 1072,  965,  429,
     1073, 1074, 1074, 1075, 1073, 1076, 1076, 1077,  965,  519,
      965,  965,  521, 1078,  965,  965, 1079, 1078,  513,  525,
      965,  525,  513,  525,  965,  965,  535, 1080,  965,  965,
     1081,  515,  513,  513,  965,  965,  965,  546,  429,  546,
     1082, 1082,  552,  965,  965,  554, 1083,  965, 1084, 1085,
     1086, 1086,  965, 1087, 1088, 1089, 1085,  562,  562, 1090,
      965,  965,  571, 1089,  571,  965,  965,  576, 1091,  576,
      965,  571,  572,  571,  574,  571,  567,  574,  574, 1092,
     1091,  591, 1093, 1094,  965,  595, 1095, 1096, 1097,  965,

      600,  600, 1098,  965,  595,  429, 1099, 1100,  595,  595,
     1095, 1101,  429,  611,  429, 1102,  965, 1093, 1103, 1104,
      429,  611,  429, 1105,  965,  965,  625,  604,  965,  546,
     1098,  965, 1106, 1107,  965,  965,  635, 1106,  635,  965,
      965,  965,  965,  642,  611,  642,  642,  965,  965,  648,
     1107,  640,  648,  965,  629,  636,  629,  595,  629,  642,
      581,  965,  581,  618,  581,  965,  642,  965,  642,  611,
      642,  642,  965,  546,  649,  546,  429,  642,  546,  965,
      965,  680, 1103,  666,  680,  965,  965, 1108,  965, 1109,
     1110,  965,  965, 1111,  965,  693, 1112,  965,  693, 1112,

      965,  965,  965,  965,  965,  692,  965, 1113,  704,  965,
      707,  704,  965,  965,  710,  693,  714,  965, 1114, 1115,
      429,  429,  965,  965,  723, 1116,  648,  723,  724,  723,
     1116,  965,  648,  965, 1117,  731, 1118, 1119,  732,  965,
      732, 1118,  732,  965,  648,  649,  648, 1119,  744,  648,
     1117,  731,  748,  648,  649,  648,  748,  648, 1120, 1121,
     1122, 1123,  965,  965,  763, 1122,  763, 1124, 1125, 1125,
     1126,  965,  772, 1127, 1128, 1129, 1127,  777,  777, 1130,
      965,  781, 1131, 1132,  777,  777,  777, 1133,  751,  965,
      772,  429, 1126,  742,  742, 1134, 1115,  748, 1134,  748,

     1135,  797,  429,  777,  429, 1136,  965, 1131,  807, 1137,
      793,  742,  742,  799,  797,  748,  799,  748,  965,  744,
      965,  744,  799,  744,  744,  965,  740,  826,  772,  826,
      965,  744,  821,  744,  799,  744,  744,  965,  965,  965,
      649,  840,  429,  831,  840,  831,  821,  831,  777,  831,
      831,  965,  965,  852,  808,  852,  852,  965,  965, 1138,
      858,  965, 1139,  965,  965,  965,  965,  965,  965,  859,
     1140,  867,  965,  859,  867,  965,  858,  859, 1138,  797,
      748,  748,  965,  965,  883, 1141,  965,  965, 1142, 1143,
     1143,  793,  772,  772,  777, 1144,  799,  799,  799, 1145,

     1144,  777,  777,  777, 1146,  808,  808,  808, 1147,  901,
      799,  799,  799, 1148,  797,  429,  777,  429, 1149, 1141,
     1150,  748,  887,  965,  887, 1150,  887,  965,  965,  831,
      821,  831,  777,  831,  831,  888,  965,  888,  748,  928,
      888, 1151,  901,  777,  777,  777,  793,  926,  926,  799,
      797,  748,  799,  748,  928,  821,  928,  799,  928,  928,
      901,  799,  799,  799,    0,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,

      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,

      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965
    } ;

static const flex_int16_t yy_nxt[6940] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,    4,    4,   10,
       11,   12,   13,    4,   14,    4,   15,   39,   86,  942,
       16,   17,   18,   15,   15,   15,   18,   18,   19,   15,
       18,   15,   20,   39,   86,   21,   22,   23,   24,   20,
       20,   20,   24,   24,   20,   20,   24,   20,   25,   39,
       86,  929,   31,  914,   26,   27,   28,   32,  195,   39,
       86,   96,  196,   29,   27,   28,  217,  195,  909,  645,
      195,  196,   29,   33,  196,  645,  839,   34,   35,   36,
       33,   33,   33,   36,   36,   37,   33,   36,   33,   38,
      645,  838,   39,   40,   41,   42,   38,   38,   38,   42,

       42,   38,   38,   42,   38,   44,  819,  645,   45,   46,
       47,   48,   44,   44,   44,   48,   48,   44,   44,   48,
       44,   39,   50,   51,   52,  801,  942,   53,   54,   55,
       56,   52,   52,   52,   56,   56,   57,   52,   56,   52,
       58,  788,  645,   59,   60,   17,   61,   58,   58,   58,
       61,   61,   62,   15,   61,   15,   21,   63,   64,   66,
       67,  195,  195,  645,   96,  196,  196,   68,   70,  217,
      942,   21,   71,   72,   73,   70,   70,   70,   73,   73,
       74,   70,   73,   70,   66,   67,   96,  645,  433,  734,
      914,  217,   68,   76,  673,  645,  838,   77,   78,   79,

       76,   76,   76,   79,   79,   80,   76,   79,   76,   81,
      654,  929,   45,   82,   83,   84,   81,   81,   81,   84,
       84,   81,   81,   84,   81,   39,   50,   51,   87,  433,
      641,   88,   89,   90,   91,   87,   87,   87,   91,   91,
       87,   87,   91,   87,   45,   92,   93,   95,  929,  914,
       96,   97,   98,   99,   95,  100,   95,   99,   99,  101,
       95,   99,   95,  103,  909,  263,  104,  105,  106,  107,
      103,  108,  103,  107,  107,  103,  103,  107,  103,   96,
      110,  111,  645,  801,  112,  914,  909,  433,  113,  114,
      645,  645,   96,  115,  116,  117,  114,  118,  114,  117,

      117,  119,  114,  117,  114,  120,  257,  645,  121,  122,
       17,  123,  120,  120,  120,  123,  123,  124,   15,  123,
      125,  127,  645,  433,  128,  129,   23,  130,  127,  127,
      127,  130,  130,  127,   20,  130,  131,  123,  563,  839,
      121,  132,   28,  123,  123,  123,  123,  123,  123,  133,
       18,  123,  134,  135,  810,  839,  121,  136,   35,  137,
      135,  135,  135,  137,  137,  138,   33,  137,  139,   45,
      140,  141,   53,  142,  143,  819,  810,  734,  734,  801,
      467,  144,   21,  145,  146,  654,  838,  454,  433,  641,
      839,  147,  149,  150,  838,  819,  416,  425,  801,  801,

      151,  152,  433,  433,   39,  153,  154,  155,  152,  152,
      152,  155,  155,  156,  152,  155,  152,  157,  458,  458,
       45,  158,  159,  160,  157,  157,  157,  160,  160,  161,
      157,  160,  157,   39,  163,  164,  433,  213,  570,  388,
      382,  388,  165,  166,  762,  353,   39,  167,  168,  169,
      166,  166,  166,  169,  169,  170,  166,  169,  166,  171,
      654,  719,   53,  172,  173,  174,  171,  171,  171,  174,
      174,  175,  171,  174,  171,  176,  734,  545,   21,  177,
      178,  179,  176,  176,  176,  179,  179,  180,  176,  179,
      176,  149,  150,  526,  263,  654,  673,  641,  253,  151,

      182,  654,  641,   39,  183,  184,  185,  182,  182,  182,
      185,  185,  182,  182,  185,  182,   39,  187,  188,  189,
      416,  425,  190,  191,  192,  193,  189,  194,  189,  193,
      193,  189,  189,  193,  189,  197,  416,  425,  198,  199,
      200,  201,  197,  202,  197,  201,  201,  197,  197,  201,
      197,  190,  204,  205,  624,  257,  206,   45,   92,   93,
       39,  187,  188,  570,  207,   88,  208,  209,   96,  110,
      111,  563,  388,  112,  559,  559,  203,  113,  210,  563,
      559,   96,  211,  212,  213,  210,  214,  210,  213,  213,
      215,  210,  213,  210,  218,  353,  353,  198,  219,  220,

      221,  218,  222,  218,  221,  221,  218,  218,  221,  218,
      190,  204,  205,  467,  169,  206,  223,  327,  545,  190,
      224,  225,  226,  223,  227,  223,  226,  226,  223,  223,
      226,  223,  228,  425,  526,  229,  230,  231,  232,  228,
      233,  228,  232,  232,  234,  228,  232,  228,  104,  235,
      236,  169,  408,  237,   96,  239,  240,  169,   43,  241,
      467,  454,  425,  242,   96,  243,  244,  408,  213,  245,
      109,  102,  388,  246,  247,  193,  203,  104,  248,  249,
      250,  247,  251,  247,  250,  250,  252,  247,  250,  247,
       96,  243,  244,  382,  353,  245,  203,  186,  327,  246,

      254,  253,  327,   96,  255,  256,  257,  254,  258,  254,
      257,  257,  259,  254,  257,  254,  260,  298,  162,   96,
      261,  262,  263,  260,  264,  260,  263,  263,  265,  260,
      263,  260,  120,  162,  238,  121,  122,   17,  123,  120,
      120,  120,  123,  123,  124,   15,  123,  125,  127,  126,
      253,  128,  129,   23,  130,  127,  127,  127,  130,  130,
      127,   20,  130,  131,  123,  238,  203,  121,  132,   28,
      123,  123,  123,  123,  123,  123,  133,   18,  123,  134,
      135,  109,  102,  121,  136,   35,  137,  135,  135,  135,
      137,  137,  138,   33,  137,  139,   15,  203,  186,  181,

       16,   17,   18,   15,   15,   15,   18,   18,   19,   15,
       18,   15,  266,  162,  148,  267,  268,   41,  269,  266,
      266,  266,  269,  269,  266,   38,  269,  270,  271,   39,
       94,  126,  109,  102,   94,   49,   43,   39,   49,  272,
      273,   43,   75,  274,  275,   47,  276,  273,  273,  273,
      276,  276,  273,   44,  276,  277,  267,  278,   51,   69,
       65,   49,   43,   25,   30,  965,   42,  965,  279,   38,
      965,  965,   39,   40,   41,   42,   38,   38,   38,   42,
       42,   38,   38,   42,   38,  128,  280,   64,  965,  965,
      965,  965,  965,  965,  965,   24,  965,  281,  137,  965,

      965,  121,  282,   67,  137,  137,  137,  137,  137,  137,
      283,   36,  137,  284,   27,   28,  965,  965,  965,  965,
      965,  965,   29,  285,  965,  965,  128,  286,   72,  287,
      285,  285,  285,  287,  287,  288,   70,  287,  289,  290,
      965,  965,  121,  291,   78,  292,  290,  290,  290,  292,
      292,  293,   76,  292,  294,   33,  965,  965,  965,   34,
       35,   36,   33,   33,   33,   36,   36,   37,   33,   36,
       33,   39,   50,   51,  965,   94,  104,  235,  236,  965,
      965,  237,   45,  295,  296,  965,  965,  965,  965,  965,
      965,  297,   39,  163,  164,  965,  298,  965,  965,  965,

      965,  165,   39,  299,  300,  965,  965,  965,  965,  965,
      965,  301,   53,  302,  303,  965,  965,  965,  965,  965,
      965,  304,   21,  305,  306,  965,  965,  965,  965,  965,
      965,  307,  149,  150,  965,  308,  965,  965,  965,  965,
      151,  149,  150,  965,  965,  965,  965,  965,  965,  151,
      152,  965,  965,   39,  153,  154,  155,  152,  152,  152,
      155,  155,  156,  152,  155,  152,  309,  965,  965,   45,
      310,  311,  312,  309,  309,  309,  312,  312,  313,  309,
      312,  309,   39,  163,  164,  965,  965,  965,  965,  965,
      965,  165,  166,  965,  965,   39,  167,  168,  169,  166,

      166,  166,  169,  169,  170,  166,  169,  166,  314,  965,
      965,   88,  315,  316,  317,  314,  314,  314,  317,  317,
      318,  314,  317,  314,   45,  319,  320,  965,  965,  965,
      965,  965,  965,  321,   39,  299,  300,  965,  965,  965,
      965,  965,  965,  301,  322,  965,  965,   45,  323,  324,
      325,  322,  322,  322,  325,  325,  326,  322,  325,  322,
      328,  965,  965,   45,  329,  330,  331,  328,  328,  328,
      331,  331,  332,  328,  331,  328,  333,  965,  965,   53,
      334,  335,  336,  333,  333,  333,  336,  336,  337,  333,
      336,  333,  182,  965,  965,   39,  183,  184,  185,  182,

      182,  182,  185,  185,  182,  182,  185,  182,   81,  965,
      965,   45,   82,   83,   84,   81,   81,   81,   84,   84,
       81,   81,   84,   81,   39,  187,  188,  338,  965,  965,
       88,  339,  340,  341,  338,  338,  338,  341,  341,  338,
      338,  341,  338,   39,  187,  188,  965,  207,  189,  965,
      965,  190,  191,  192,  193,  189,  194,  189,  193,  193,
      189,  189,  193,  189,  197,  965,  965,  198,  199,  200,
      201,  197,  202,  197,  201,  201,  197,  197,  201,  197,
      190,  204,  205,  965,  965,  206,  223,  965,  965,  190,
      224,  225,  226,  223,  227,  223,  226,  226,  223,  223,

      226,  223,  190,  343,  965,  965,  965,  344,  190,  346,
      965,  965,  965,  347,  348,  965,  965,  190,  349,  350,
      351,  348,  352,  348,  351,  351,  348,  348,  351,  348,
      190,  354,  355,  965,  965,  356,  357,  965,  965,  190,
      358,  359,  360,  357,  361,  357,  360,  360,  357,  357,
      360,  357,  362,  965,  965,  363,  364,  365,  366,  362,
      367,  362,  366,  366,  362,  362,  366,  362,  198,  368,
      369,  965,  965,  370,  190,  204,  205,  965,  371,  206,
      190,  372,  373,  965,  965,  374,   88,  375,  376,  198,
      368,  369,  965,  965,  370,  210,  965,  965,   96,  211,

      212,  213,  210,  214,  210,  213,  213,  215,  210,  213,
      210,  377,  965,  965,  104,  378,  379,  380,  377,  381,
      377,  380,  380,  377,  377,  380,  377,   96,  239,  240,
      965,  965,  241,  965,  965,  965,  242,  254,  965,  965,
       96,  255,  256,  257,  254,  258,  254,  257,  257,  259,
      254,  257,  254,  383,  965,  965,  198,  384,  385,  386,
      383,  387,  383,  386,  386,  383,  383,  386,  383,  190,
      372,  373,  965,  965,  374,   95,  965,  965,   96,   97,
       98,   99,   95,  100,   95,   99,   99,  101,   95,   99,
       95,  103,  965,  965,  104,  105,  106,  107,  103,  108,

      103,  107,  107,  103,  103,  107,  103,   96,  110,  111,
      965,  965,  112,  965,  965,  965,  113,  198,  389,  390,
      965,  965,  391,  229,  392,  393,  965,  965,  394,  965,
      965,  965,  395,  104,  396,  397,  965,  965,  398,   96,
      239,  240,  965,  399,  241,  965,  965,  965,  242,   96,
      400,  401,  965,  965,  402,  965,  965,  965,  403,  104,
      404,  405,  965,  965,  406,  965,  965,  965,  407,   96,
      400,  401,  965,  965,  402,  965,  965,  965,  403,   96,
      409,  410,  965,  965,  411,  965,  965,  965,  412,  413,
      965,  965,  190,  414,  415,  416,  413,  417,  413,  416,

      416,  418,  413,  416,  413,  419,  965,  965,  198,  420,
      421,  422,  419,  423,  419,  422,  422,  424,  419,  422,
      419,  190,  426,  427,  965,  965,  428,  965,  965,  965,
      429,  430,  965,  965,  190,  431,  432,  433,  430,  434,
      430,  433,  433,  435,  430,  433,  430,  436,  965,  965,
      190,  437,  438,  439,  436,  440,  436,  439,  439,  441,
      436,  439,  436,  442,  965,  965,  229,  443,  444,  445,
      442,  446,  442,  445,  445,  447,  442,  445,  442,  448,
      965,  965,  104,  449,  450,  451,  448,  452,  448,  451,
      451,  453,  448,  451,  448,  455,  965,  965,   96,  456,

      457,  458,  455,  459,  455,  458,  458,  460,  455,  458,
      455,  260,  965,  965,   96,  261,  262,  263,  260,  264,
      260,  263,  263,  265,  260,  263,  260,  461,  965,  965,
      104,  462,  463,  464,  461,  465,  461,  464,  464,  466,
      461,  464,  461,   96,  409,  410,  965,  965,  411,  965,
      965,  965,  412,  266,  965,  965,  267,  268,   41,  269,
      266,  266,  266,  269,  269,  266,   38,  269,  270,  271,
       39,  965,  965,  965,  965,  965,  965,  965,   39,  965,
      272,  468,  965,  965,  274,  469,   83,  470,  468,  468,
      468,  470,  470,  468,   81,  470,  471,  267,  278,   51,

      965,  965,  965,  965,  965,  965,  965,   42,  965,  279,
       38,  965,  965,   39,   40,   41,   42,   38,   38,   38,
       42,   42,   38,   38,   42,   38,  267,  473,   85,  965,
      965,  965,  965,  965,  965,  965,   85,  965,  474,  271,
       39,  965,  965,  965,  965,  965,  965,  965,   39,  965,
      272,  267,  278,   51,  965,  965,  965,  965,  965,  965,
      965,   42,  965,  279,  274,  475,   93,  965,  965,  965,
      965,  965,  965,  965,   84,  965,  476,   39,   50,   51,
      274,  477,  141,  965,  965,  965,  965,  965,  965,  965,
       48,  965,  478,   39,   50,   51,  287,  965,  965,  128,

      479,  146,  287,  287,  287,  287,  287,  287,  480,   73,
      287,  481,  292,  965,  965,  121,  482,  150,  292,  292,
      292,  292,  292,  292,  483,   79,  292,  484,   66,   67,
      965,  965,  965,  965,  965,  965,   68,  485,  965,  965,
      267,  486,  154,  487,  485,  485,  485,  487,  487,  488,
      152,  487,  489,  490,  965,  965,  274,  491,  159,  492,
      490,  490,  490,  492,  492,  493,  157,  492,  494,  487,
      965,  965,  267,  495,  164,  487,  487,  487,  487,  487,
      487,  496,  155,  487,  497,  498,  965,  965,  267,  499,
      168,  500,  498,  498,  498,  500,  500,  501,  166,  500,

      502,  152,  965,  965,   39,  153,  154,  155,  152,  152,
      152,  155,  155,  156,  152,  155,  152,  290,  965,  965,
      121,  291,   78,  292,  290,  290,  290,  292,  292,  293,
       76,  292,  294,  503,  965,  965,  128,  504,  178,  505,
      503,  503,  503,  505,  505,  506,  176,  505,  507,   76,
      965,  965,  965,   77,   78,   79,   76,   76,   76,   79,
       79,   80,   76,   79,   76,   45,  319,  320,  965,  965,
      965,  965,  965,  965,  321,   39,  163,  164,  965,  298,
      965,  965,  965,  965,  165,   39,  299,  300,  965,  965,
      965,  965,  965,  965,  301,   88,  508,  509,  965,  965,

      965,  965,  965,  965,  510,   45,  511,  512,  965,  965,
      965,  965,  965,  965,  513,   39,  299,  300,  965,  514,
      965,  965,  965,  965,  301,  104,  404,  405,  965,  965,
      406,  965,  965,  965,  407,   45,  515,  516,  965,  965,
      965,  965,  965,  965,  517,   53,  518,  519,  965,  965,
      965,  965,  965,  965,  520,  521,  965,  965,   39,  522,
      523,  524,  521,  521,  521,  524,  524,  525,  521,  524,
      521,  309,  965,  965,   45,  310,  311,  312,  309,  309,
      309,  312,  312,  313,  309,  312,  309,   39,  527,  528,
      965,  965,  965,  965,  965,  965,  529,  530,  965,  965,

       39,  531,  532,  533,  530,  530,  530,  533,  533,  534,
      530,  533,  530,  413,  965,  965,  190,  414,  415,  416,
      413,  417,  413,  416,  416,  418,  413,  416,  413,  535,
      965,  965,  198,  536,  537,  538,  535,  539,  535,  538,
      538,  540,  535,  538,  535,  190,  426,  427,  965,  965,
      428,  965,  965,  965,  429,  436,  965,  965,  190,  437,
      438,  439,  436,  440,  436,  439,  439,  441,  436,  439,
      436,   45,  319,  320,  965,  965,  965,  965,  965,  965,
      321,   39,  527,  528,  965,  541,  965,  965,  965,  965,
      529,   39,  542,  543,  965,  965,  965,  965,  965,  965,

      544,  322,  965,  965,   45,  323,  324,  325,  322,  322,
      322,  325,  325,  326,  322,  325,  322,   39,  542,  543,
      965,  965,  965,  965,  965,  965,  544,  546,  965,  965,
       88,  547,  548,  549,  546,  546,  546,  549,  549,  550,
      546,  549,  546,  166,  965,  965,   39,  167,  168,  169,
      166,  166,  166,  169,  169,  170,  166,  169,  166,  260,
      965,  965,   96,  261,  262,  263,  260,  264,  260,  263,
      263,  265,  260,  263,  260,  461,  965,  965,  104,  462,
      463,  464,  461,  465,  461,  464,  464,  466,  461,  464,
      461,  348,  965,  965,  190,  349,  350,  351,  348,  352,

      348,  351,  351,  348,  348,  351,  348,  197,  965,  965,
      198,  199,  200,  201,  197,  202,  197,  201,  201,  197,
      197,  201,  197,  190,  354,  355,  965,  965,  356,  190,
      343,  965,  965,  965,  344,  190,  343,  965,  965,  965,
      344,  190,  552,  965,  965,  965,  553,  190,  346,  965,
      965,  965,  347,  190,  552,  965,  965,  965,  553,  190,
      346,  965,  965,  965,  347,  190,  354,  355,  965,  965,
      356,  357,  965,  965,  190,  358,  359,  360,  357,  361,
      357,  360,  360,  357,  357,  360,  357,  554,  965,  965,
      363,  555,  556,  557,  554,  558,  554,  557,  557,  554,

      554,  557,  554,  198,  368,  369,  965,  965,  370,  190,
      560,  561,  965,  965,  562,  383,  965,  965,  198,  384,
      385,  386,  383,  387,  383,  386,  386,  383,  383,  386,
      383,  190,  560,  561,  965,  965,  562,  189,  965,  965,
      190,  191,  192,  193,  189,  194,  189,  193,  193,  189,
      189,  193,  189,  190,  204,  205,  965,  965,  206,  223,
      965,  965,  190,  224,  225,  226,  223,  227,  223,  226,
      226,  223,  223,  226,  223,  198,  368,  369,  965,  965,
      370,  363,  564,  565,  965,  965,  566,  198,  567,  568,
      965,  965,  569,  190,  372,  373,  965,  570,  374,  190,

      372,  373,  965,  965,  374,  571,  965,  965,  198,  572,
      573,  574,  571,  575,  571,  574,  574,  571,  571,  574,
      571,  576,  965,  965,  229,  577,  578,  579,  576,  580,
      576,  579,  579,  581,  576,  579,  576,  582,  965,  965,
      363,  583,  584,  585,  582,  586,  582,  585,  585,  582,
      582,  585,  582,  190,  204,  205,  965,  371,  206,  104,
      235,  236,  965,  965,  237,   99,  965,  965,   96,  110,
      111,   99,  238,  112,   99,   99,   99,  113,   99,   99,
       99,   96,  239,  240,  965,  965,  241,  965,  965,  965,
      242,   96,  243,  244,  965,  965,  245,  965,  965,  965,

      246,  198,  587,  588,  965,  965,  589,  229,  590,  591,
      965,  965,  592,  965,  965,  965,  593,  104,  594,  595,
      965,  965,  596,  965,  965,  965,  597,  257,  965,  965,
       96,  400,  401,  257,  598,  402,  257,  257,  257,  403,
      257,  257,  257,   96,  599,  600,  965,  965,  601,  965,
      965,  965,  602,  198,  603,  604,  965,  965,  605,  965,
      965,  965,  606,  416,  965,  965,  190,  426,  427,  416,
      607,  428,  416,  416,  416,  429,  416,  416,  416,  190,
      608,  609,  965,  965,  610,  965,  965,  965,  611,  190,
      612,  613,  965,  965,  614,  965,  965,  965,  615,  229,

      616,  617,  965,  965,  618,  965,  965,  965,  619,  104,
      620,  621,  965,  965,  622,  965,  965,  965,  623,   96,
      599,  600,  965,  965,  601,  965,  965,  965,  602,  413,
      965,  965,  190,  414,  415,  416,  413,  417,  413,  416,
      416,  418,  413,  416,  413,  535,  965,  965,  198,  536,
      537,  538,  535,  539,  535,  538,  538,  540,  535,  538,
      535,  430,  965,  965,  190,  431,  432,  433,  430,  434,
      430,  433,  433,  435,  430,  433,  430,  436,  965,  965,
      190,  437,  438,  439,  436,  440,  436,  439,  439,  441,
      436,  439,  436,  625,  965,  965,  363,  626,  627,  628,

      625,  629,  625,  628,  628,  630,  625,  628,  625,  198,
      631,  632,  965,  965,  633,  965,  965,  965,  634,  190,
      608,  609,  965,  965,  610,  965,  965,  965,  611,  190,
      612,  613,  965,  965,  614,  965,  965,  965,  615,  635,
      965,  965,  198,  636,  637,  638,  635,  639,  635,  638,
      638,  640,  635,  638,  635,  642,  965,  965,  190,  643,
      644,  645,  642,  646,  642,  645,  645,  647,  642,  645,
      642,  648,  965,  965,  198,  649,  650,  651,  648,  652,
      648,  651,  651,  653,  648,  651,  648,  114,  965,  965,
       96,  115,  116,  117,  114,  118,  114,  117,  117,  119,

      114,  117,  114,  247,  965,  965,  104,  248,  249,  250,
      247,  251,  247,  250,  250,  252,  247,  250,  247,   96,
      243,  244,  965,  965,  245,  965,  965,  965,  246,  254,
      965,  965,   96,  255,  256,  257,  254,  258,  254,  257,
      257,  259,  254,  257,  254,  260,  965,  965,   96,  261,
      262,  263,  260,  264,  260,  263,  263,  265,  260,  263,
      260,  655,  965,  965,  198,  656,  657,  658,  655,  659,
      655,  658,  658,  660,  655,  658,  655,  661,  965,  965,
      229,  662,  663,  664,  661,  665,  661,  664,  664,  666,
      661,  664,  661,  455,  965,  965,   96,  456,  457,  458,

      455,  459,  455,  458,  458,  460,  455,  458,  455,  667,
      965,  965,  104,  668,  669,  670,  667,  671,  667,  670,
      670,  672,  667,  670,  667,  674,  965,  965,  198,  675,
      676,  677,  674,  678,  674,  677,  677,  679,  674,  677,
      674,  680,  965,  965,  229,  681,  682,  683,  680,  684,
      680,  683,  683,  685,  680,  683,  680,  686,  965,  965,
      267,  687,  184,  688,  686,  686,  686,  688,  688,  686,
      182,  688,  689,  468,  965,  965,  274,  469,   83,  470,
      468,  468,  468,  470,  470,  468,   81,  470,  471,  267,
      690,  188,  965,  965,  965,  965,  965,  965,  965,  185,

      965,  691,  182,  965,  965,   39,  183,  184,  185,  182,
      182,  182,  185,  185,  182,  182,  185,  182,  267,  473,
       85,  965,  965,  965,  965,  965,  965,  965,   85,  965,
      474,  267,  473,   85,  965,  965,  965,  965,  965,  965,
      965,   85,  965,  474,  274,  475,   93,  965,  965,  965,
      965,  965,  965,  965,   84,  965,  476,   39,  187,  188,
      274,  475,   93,  965,  965,  965,  965,  965,  965,  965,
       84,  965,  476,   39,   50,   51,  492,  965,  965,  274,
      692,  296,  492,  492,  492,  492,  492,  492,  693,  160,
      492,  694,  500,  965,  965,  267,  695,  300,  500,  500,

      500,  500,  500,  500,  696,  169,  500,  697,   39,  163,
      164,  965,  965,  965,  965,  965,  965,  165,  505,  965,
      965,  128,  698,  306,  505,  505,  505,  505,  505,  505,
      699,  179,  505,  700,  292,  965,  965,  121,  482,  150,
      292,  292,  292,  292,  292,  292,  483,   79,  292,  484,
      149,  150,  965,  965,  965,  965,  965,  965,  151,  485,
      965,  965,  267,  486,  154,  487,  485,  485,  485,  487,
      487,  488,  152,  487,  489,  701,  965,  965,  274,  702,
      311,  703,  701,  701,  701,  703,  703,  704,  309,  703,
      705,  487,  965,  965,  267,  495,  164,  487,  487,  487,

      487,  487,  487,  496,  155,  487,  497,  498,  965,  965,
      267,  499,  168,  500,  498,  498,  498,  500,  500,  501,
      166,  500,  502,  152,  965,  965,   39,  153,  154,  155,
      152,  152,  152,  155,  155,  156,  152,  155,  152,  703,
      965,  965,  274,  706,  320,  703,  703,  703,  703,  703,
      703,  707,  312,  703,  708,   39,  163,  164,  965,  965,
      965,  965,  965,  965,  165,  709,  965,  965,  274,  710,
      324,  711,  709,  709,  709,  711,  711,  712,  322,  711,
      713,  166,  965,  965,   39,  167,  168,  169,  166,  166,
      166,  169,  169,  170,  166,  169,  166,  714,  965,  965,

      274,  715,  330,  716,  714,  714,  714,  716,  716,  717,
      328,  716,  718,  198,  631,  632,  965,  965,  633,  965,
      965,  965,  634,  416,  965,  965,  190,  426,  427,  416,
      607,  428,  416,  416,  416,  429,  416,  416,  416,   45,
      511,  512,  965,  965,  965,  965,  965,  965,  513,   39,
      542,  543,  965,  719,  965,  965,  965,  965,  544,   39,
      542,  543,  965,  965,  965,  965,  965,  965,  544,   88,
      720,  721,  965,  965,  965,  965,  965,  965,  722,   45,
      511,  512,  965,  965,  965,  965,  965,  965,  513,   39,
      299,  300,  965,  514,  965,  965,  965,  965,  301,   39,

      299,  300,  965,  965,  965,  965,  965,  965,  301,  104,
      620,  621,  965,  965,  622,  965,  965,  965,  623,  263,
      965,  965,   96,  409,  410,  263,  624,  411,  263,  263,
      263,  412,  263,  263,  263,  521,  965,  965,   39,  522,
      523,  524,  521,  521,  521,  524,  524,  525,  521,  524,
      521,  309,  965,  965,   45,  310,  311,  312,  309,  309,
      309,  312,  312,  313,  309,  312,  309,   39,  527,  528,
      965,  965,  965,  965,  965,  965,  529,  530,  965,  965,
       39,  531,  532,  533,  530,  530,  530,  533,  533,  534,
      530,  533,  530,  723,  965,  965,   88,  724,  725,  726,

      723,  723,  723,  726,  726,  727,  723,  726,  723,   45,
      319,  320,  965,  965,  965,  965,  965,  965,  321,   39,
      527,  528,  965,  541,  965,  965,  965,  965,  529,  322,
      965,  965,   45,  323,  324,  325,  322,  322,  322,  325,
      325,  326,  322,  325,  322,  728,  965,  965,  190,  729,
      730,  731,  728,  732,  728,  731,  731,  733,  728,  731,
      728,  535,  965,  965,  198,  536,  537,  538,  535,  539,
      535,  538,  538,  540,  535,  538,  535,  190,  735,  736,
      965,  965,  737,  965,  965,  965,  738,  739,  965,  965,
      190,  740,  741,  742,  739,  743,  739,  742,  742,  744,

      739,  742,  739,  745,  965,  965,  190,  746,  747,  748,
      745,  749,  745,  748,  748,  750,  745,  748,  745,   88,
      751,  752,  965,  965,  965,  965,  965,  965,  753,  754,
      965,  965,   88,  755,  756,  757,  754,  754,  754,  757,
      757,  758,  754,  757,  754,  436,  965,  965,  190,  437,
      438,  439,  436,  440,  436,  439,  439,  441,  436,  439,
      436,  648,  965,  965,  198,  649,  650,  651,  648,  652,
      648,  651,  651,  653,  648,  651,  648,  190,  552,  965,
      965,  965,  553,  190,  552,  965,  965,  965,  553,  348,
      965,  965,  190,  349,  350,  351,  348,  352,  348,  351,

      351,  348,  348,  351,  348,  197,  965,  965,  198,  199,
      200,  201,  197,  202,  197,  201,  201,  197,  197,  201,
      197,  190,  354,  355,  965,  965,  356,  357,  965,  965,
      190,  358,  359,  360,  357,  361,  357,  360,  360,  357,
      357,  360,  357,  363,  759,  760,  965,  965,  761,  198,
      567,  568,  965,  965,  569,  190,  560,  561,  965,  762,
      562,  190,  560,  561,  965,  965,  562,  763,  965,  965,
      363,  764,  765,  766,  763,  767,  763,  766,  766,  763,
      763,  766,  763,  198,  368,  369,  965,  965,  370,  190,
      204,  205,  965,  371,  206,  190,  372,  373,  965,  965,

      374,  198,  567,  568,  965,  965,  569,  363,  768,  769,
      965,  965,  770,  223,  965,  965,  190,  224,  225,  226,
      223,  227,  223,  226,  226,  223,  223,  226,  223,  383,
      965,  965,  198,  384,  385,  386,  383,  387,  383,  386,
      386,  383,  383,  386,  383,  190,  372,  373,  965,  965,
      374,  210,  965,  965,   96,  211,  212,  213,  210,  214,
      210,  213,  213,  215,  210,  213,  210,  377,  965,  965,
      104,  378,  379,  380,  377,  381,  377,  380,  380,  377,
      377,  380,  377,   96,  239,  240,  965,  965,  241,  965,
      965,  965,  242,  254,  965,  965,   96,  255,  256,  257,

      254,  258,  254,  257,  257,  259,  254,  257,  254,  104,
      396,  397,  965,  965,  398,   96,  239,  240,  965,  399,
      241,  965,  965,  965,  242,   96,  400,  401,  965,  965,
      402,  965,  965,  965,  403,  198,  771,  772,  965,  965,
      773,  965,  965,  965,  774,  433,  965,  965,  190,  608,
      609,  433,  775,  610,  433,  433,  433,  611,  433,  433,
      433,  190,  776,  777,  965,  965,  778,  965,  965,  965,
      779,  229,  780,  781,  965,  965,  782,  965,  965,  965,
      783,  104,  784,  785,  965,  965,  786,  965,  965,  965,
      787,  458,  965,  965,   96,  599,  600,  458,  788,  601,

      458,  458,  458,  602,  458,  458,  458,  198,  631,  632,
      965,  965,  633,  965,  965,  965,  634,  416,  965,  965,
      190,  426,  427,  416,  607,  428,  416,  416,  416,  429,
      416,  416,  416,  363,  789,  790,  965,  965,  791,  965,
      965,  965,  792,  198,  793,  794,  965,  965,  795,  965,
      965,  965,  796,  190,  776,  777,  965,  965,  778,  965,
      965,  965,  779,  198,  797,  798,  965,  965,  799,  965,
      965,  965,  800,  104,  404,  405,  965,  965,  406,  965,
      965,  965,  407,  117,  965,  965,   96,  243,  244,  117,
      408,  245,  117,  117,  117,  246,  117,  117,  117,   96,

      400,  401,  965,  965,  402,  965,  965,  965,  403,   96,
      409,  410,  965,  965,  411,  965,  965,  965,  412,  198,
      802,  803,  965,  965,  804,  965,  965,  965,  805,  229,
      806,  807,  965,  965,  808,  965,  965,  965,  809,  413,
      965,  965,  190,  414,  415,  416,  413,  417,  413,  416,
      416,  418,  413,  416,  413,  535,  965,  965,  198,  536,
      537,  538,  535,  539,  535,  538,  538,  540,  535,  538,
      535,  430,  965,  965,  190,  431,  432,  433,  430,  434,
      430,  433,  433,  435,  430,  433,  430,  198,  631,  632,
      965,  965,  633,  965,  965,  965,  634,  731,  965,  965,

      190,  735,  736,  731,  810,  737,  731,  731,  731,  738,
      731,  731,  731,  190,  811,  812,  965,  965,  813,  965,
      965,  965,  814,  190,  815,  816,  965,  965,  817,  965,
      965,  965,  818,  739,  965,  965,  190,  740,  741,  742,
      739,  743,  739,  742,  742,  744,  739,  742,  739,  635,
      965,  965,  198,  636,  637,  638,  635,  639,  635,  638,
      638,  640,  635,  638,  635,  190,  811,  812,  965,  965,
      813,  965,  965,  965,  814,  820,  965,  965,  190,  821,
      822,  823,  820,  824,  820,  823,  823,  825,  820,  823,
      820,  826,  965,  965,  363,  827,  828,  829,  826,  830,

      826,  829,  829,  831,  826,  829,  826,  642,  965,  965,
      190,  643,  644,  645,  642,  646,  642,  645,  645,  647,
      642,  645,  642,  832,  965,  965,  198,  833,  834,  835,
      832,  836,  832,  835,  835,  837,  832,  835,  832,  745,
      965,  965,  190,  746,  747,  748,  745,  749,  745,  748,
      748,  750,  745,  748,  745,  648,  965,  965,  198,  649,
      650,  651,  648,  652,  648,  651,  651,  653,  648,  651,
      648,  190,  815,  816,  965,  965,  817,  965,  965,  965,
      818,  840,  965,  965,  363,  841,  842,  843,  840,  844,
      840,  843,  843,  845,  840,  843,  840,  448,  965,  965,

      104,  449,  450,  451,  448,  452,  448,  451,  451,  453,
      448,  451,  448,  455,  965,  965,   96,  456,  457,  458,
      455,  459,  455,  458,  458,  460,  455,  458,  455,  846,
      965,  965,  198,  847,  848,  849,  846,  850,  846,  849,
      849,  851,  846,  849,  846,  852,  965,  965,  229,  853,
      854,  855,  852,  856,  852,  855,  855,  857,  852,  855,
      852,  260,  965,  965,   96,  261,  262,  263,  260,  264,
      260,  263,  263,  265,  260,  263,  260,  461,  965,  965,
      104,  462,  463,  464,  461,  465,  461,  464,  464,  466,
      461,  464,  461,   96,  409,  410,  965,  965,  411,  965,

      965,  965,  412,  686,  965,  965,  267,  687,  184,  688,
      686,  686,  686,  688,  688,  686,  182,  688,  689,  468,
      965,  965,  274,  469,   83,  470,  468,  468,  468,  470,
      470,  468,   81,  470,  471,  267,  690,  188,  965,  965,
      965,  965,  965,  965,  965,  185,  965,  691,  182,  965,
      965,   39,  183,  184,  185,  182,  182,  182,  185,  185,
      182,  182,  185,  182,  274,  475,   93,  965,  965,  965,
      965,  965,  965,  965,   84,  965,  476,   39,  187,  188,
      703,  965,  965,  274,  706,  320,  703,  703,  703,  703,
      703,  703,  707,  312,  703,  708,  500,  965,  965,  267,

      695,  300,  500,  500,  500,  500,  500,  500,  696,  169,
      500,  697,   39,  163,  164,  965,  965,  965,  965,  965,
      965,  165,  711,  965,  965,  274,  858,  512,  711,  711,
      711,  711,  711,  711,  859,  325,  711,  860,   39,  299,
      300,  965,  965,  965,  965,  965,  965,  301,  716,  965,
      965,  274,  861,  516,  716,  716,  716,  716,  716,  716,
      862,  331,  716,  863,   39,  299,  300,  965,  965,  965,
      965,  965,  965,  301,  864,  965,  965,  267,  865,  523,
      866,  864,  864,  864,  866,  866,  867,  521,  866,  868,
      701,  965,  965,  274,  702,  311,  703,  701,  701,  701,

      703,  703,  704,  309,  703,  705,  866,  965,  965,  267,
      869,  528,  866,  866,  866,  866,  866,  866,  870,  524,
      866,  871,  872,  965,  965,  267,  873,  532,  874,  872,
      872,  872,  874,  874,  875,  530,  874,  876,  521,  965,
      965,   39,  522,  523,  524,  521,  521,  521,  524,  524,
      525,  521,  524,  521,  874,  965,  965,  267,  877,  543,
      874,  874,  874,  874,  874,  874,  878,  533,  874,  879,
       39,  527,  528,  965,  965,  965,  965,  965,  965,  529,
      709,  965,  965,  274,  710,  324,  711,  709,  709,  709,
      711,  711,  712,  322,  711,  713,  530,  965,  965,   39,

      531,  532,  533,  530,  530,  530,  533,  533,  534,  530,
      533,  530,  498,  965,  965,  267,  499,  168,  500,  498,
      498,  498,  500,  500,  501,  166,  500,  502,  166,  965,
      965,   39,  167,  168,  169,  166,  166,  166,  169,  169,
      170,  166,  169,  166,   88,  880,  881,  965,  965,  965,
      965,  965,  965,  882,  198,  797,  798,  965,  965,  799,
      965,  965,  965,  800,  728,  965,  965,  190,  729,  730,
      731,  728,  732,  728,  731,  731,  733,  728,  731,  728,
      535,  965,  965,  198,  536,  537,  538,  535,  539,  535,
      538,  538,  540,  535,  538,  535,  190,  735,  736,  965,

      965,  737,  965,  965,  965,  738,  190,  735,  736,  965,
      965,  737,  965,  965,  965,  738,  739,  965,  965,  190,
      740,  741,  742,  739,  743,  739,  742,  742,  744,  739,
      742,  739,  883,  965,  965,  363,  884,  885,  886,  883,
      887,  883,  886,  886,  888,  883,  886,  883,  198,  631,
      632,  965,  965,  633,  965,  965,  965,  634,  190,  811,
      812,  965,  965,  813,  965,  965,  965,  814,  190,  815,
      816,  965,  965,  817,  965,  965,  965,  818,  635,  965,
      965,  198,  636,  637,  638,  635,  639,  635,  638,  638,
      640,  635,  638,  635,  190,  811,  812,  965,  965,  813,

      965,  965,  965,  814,  820,  965,  965,  190,  821,  822,
      823,  820,  824,  820,  823,  823,  825,  820,  823,  820,
      190,  815,  816,  965,  965,  817,  965,  965,  965,  818,
      198,  631,  632,  965,  965,  633,  965,  965,  965,  634,
      198,  368,  369,  965,  965,  370,  190,  354,  355,  965,
      559,  356,  190,  560,  561,  965,  965,  562,  363,  889,
      890,  965,  965,  891,  357,  965,  965,  190,  358,  359,
      360,  357,  361,  357,  360,  360,  357,  357,  360,  357,
      383,  965,  965,  198,  384,  385,  386,  383,  387,  383,
      386,  386,  383,  383,  386,  383,  190,  560,  561,  965,

      965,  562,  198,  567,  568,  965,  965,  569,  190,  372,
      373,  965,  570,  374,  190,  372,  373,  965,  965,  374,
      198,  793,  794,  965,  965,  795,  965,  965,  965,  796,
      433,  965,  965,  190,  608,  609,  433,  775,  610,  433,
      433,  433,  611,  433,  433,  433,  190,  776,  777,  965,
      965,  778,  965,  965,  965,  779,  363,  892,  893,  965,
      965,  894,  965,  965,  965,  895,  198,  896,  897,  965,
      965,  898,  965,  965,  965,  899,  190,  776,  777,  965,
      900,  778,  965,  965,  965,  779,  104,  594,  595,  965,
      965,  596,  965,  965,  965,  597,  257,  965,  965,   96,

      400,  401,  257,  598,  402,  257,  257,  257,  403,  257,
      257,  257,   96,  599,  600,  965,  965,  601,  965,  965,
      965,  602,  198,  901,  902,  965,  965,  903,  965,  965,
      965,  904,  229,  905,  906,  965,  965,  907,  965,  965,
      965,  908,  416,  965,  965,  190,  426,  427,  416,  607,
      428,  416,  416,  416,  429,  416,  416,  416,  198,  793,
      794,  965,  965,  795,  965,  965,  965,  796,  190,  910,
      911,  965,  965,  912,  965,  965,  965,  913,  198,  797,
      798,  965,  965,  799,  965,  965,  965,  800,  190,  910,
      911,  965,  965,  912,  965,  965,  965,  913,  363,  915,

      916,  965,  965,  917,  965,  965,  965,  918,  104,  620,
      621,  965,  965,  622,  965,  965,  965,  623,  263,  965,
      965,   96,  409,  410,  263,  624,  411,  263,  263,  263,
      412,  263,  263,  263,   96,  599,  600,  965,  965,  601,
      965,  965,  965,  602,  363,  919,  920,  965,  965,  921,
      965,  965,  965,  922,  923,  965,  965,  363,  924,  925,
      926,  923,  927,  923,  926,  926,  928,  923,  926,  923,
      832,  965,  965,  198,  833,  834,  835,  832,  836,  832,
      835,  835,  837,  832,  835,  832,  430,  965,  965,  190,
      431,  432,  433,  430,  434,  430,  433,  433,  435,  430,

      433,  430,  642,  965,  965,  190,  643,  644,  645,  642,
      646,  642,  645,  645,  647,  642,  645,  642,  930,  965,
      965,  363,  931,  932,  933,  930,  934,  930,  933,  933,
      935,  930,  933,  930,  936,  965,  965,  363,  937,  938,
      939,  936,  940,  936,  939,  939,  941,  936,  939,  936,
      436,  965,  965,  190,  437,  438,  439,  436,  440,  436,
      439,  439,  441,  436,  439,  436,  455,  965,  965,   96,
      456,  457,  458,  455,  459,  455,  458,  458,  460,  455,
      458,  455,  667,  965,  965,  104,  668,  669,  670,  667,
      671,  667,  670,  670,  672,  667,  670,  667,  711,  965,

      965,  274,  858,  512,  711,  711,  711,  711,  711,  711,
      859,  325,  711,  860,  874,  965,  965,  267,  877,  543,
      874,  874,  874,  874,  874,  874,  878,  533,  874,  879,
       39,  542,  543,  965,  965,  965,  965,  965,  965,  544,
      500,  965,  965,  267,  695,  300,  500,  500,  500,  500,
      500,  500,  696,  169,  500,  697,   39,  299,  300,  965,
      965,  965,  965,  965,  965,  301,  864,  965,  965,  267,
      865,  523,  866,  864,  864,  864,  866,  866,  867,  521,
      866,  868,  701,  965,  965,  274,  702,  311,  703,  701,
      701,  701,  703,  703,  704,  309,  703,  705,  866,  965,

      965,  267,  869,  528,  866,  866,  866,  866,  866,  866,
      870,  524,  866,  871,  872,  965,  965,  267,  873,  532,
      874,  872,  872,  872,  874,  874,  875,  530,  874,  876,
      521,  965,  965,   39,  522,  523,  524,  521,  521,  521,
      524,  524,  525,  521,  524,  521,  703,  965,  965,  274,
      706,  320,  703,  703,  703,  703,  703,  703,  707,  312,
      703,  708,   39,  527,  528,  965,  965,  965,  965,  965,
      965,  529,  709,  965,  965,  274,  710,  324,  711,  709,
      709,  709,  711,  711,  712,  322,  711,  713,  530,  965,
      965,   39,  531,  532,  533,  530,  530,  530,  533,  533,

      534,  530,  533,  530,   39,  542,  543,  965,  965,  965,
      965,  965,  965,  544,  728,  965,  965,  190,  729,  730,
      731,  728,  732,  728,  731,  731,  733,  728,  731,  728,
      535,  965,  965,  198,  536,  537,  538,  535,  539,  535,
      538,  538,  540,  535,  538,  535,  190,  735,  736,  965,
      965,  737,  965,  965,  965,  738,  739,  965,  965,  190,
      740,  741,  742,  739,  743,  739,  742,  742,  744,  739,
      742,  739,  745,  965,  965,  190,  746,  747,  748,  745,
      749,  745,  748,  748,  750,  745,  748,  745,  198,  567,
      568,  965,  965,  569,  190,  560,  561,  965,  762,  562,

      190,  560,  561,  965,  965,  562,  198,  896,  897,  965,
      965,  898,  965,  965,  965,  899,  363,  943,  944,  965,
      965,  945,  965,  965,  965,  946,  198,  896,  897,  965,
      965,  898,  965,  965,  965,  899,  104,  784,  785,  965,
      965,  786,  965,  965,  965,  787,  363,  947,  948,  965,
      965,  949,  965,  965,  965,  950,  363,  951,  952,  965,
      965,  953,  965,  965,  965,  954,  198,  631,  632,  965,
      965,  633,  965,  965,  965,  634,  190,  735,  736,  965,
      810,  737,  965,  965,  965,  738,  190,  811,  812,  965,
      965,  813,  965,  965,  965,  814,  635,  965,  965,  198,

      636,  637,  638,  635,  639,  635,  638,  638,  640,  635,
      638,  635,  190,  811,  812,  965,  965,  813,  965,  965,
      965,  814,  820,  965,  965,  190,  821,  822,  823,  820,
      824,  820,  823,  823,  825,  820,  823,  820,  955,  965,
      965,  363,  956,  957,  958,  955,  959,  955,  958,  958,
      960,  955,  958,  955,  648,  965,  965,  198,  649,  650,
      651,  648,  652,  648,  651,  651,  653,  648,  651,  648,
      363,  961,  962,  965,  965,  963,  965,  965,  965,  964,
       18,  965,  965,   18,   39,  965,   39,   39,   42,  965,
       42,   42,   24,  965,   24,   24,   36,  965,  965,   36,

       85,  965,   85,   85,   84,  965,   84,   84,   96,  965,
       96,   96,   99,  965,   99,   99,  121,  965,  121,   48,
      965,   48,   48,   56,  965,   56,   56,   73,  965,   73,
       73,   79,  965,  965,   79,  155,  965,  155,  155,  185,
      965,  185,  185,  190,  965,  190,  190,  193,  965,  193,
      193,   91,  965,   91,   91,  216,  965,  216,  216,  107,
      965,  107,  107,  213,  965,  213,  213,  117,  965,  117,
      117,  121,  965,  121,  267,  965,  267,  267,  269,  965,
      269,  269,  130,  965,  130,  130,   18,  965,  965,   18,
       42,  965,   42,   42,  160,  965,  160,  160,  155,  965,

      155,  155,  169,  965,  169,  169,  174,  965,  174,  174,
      179,  965,  179,  179,   79,  965,  965,   79,  312,  965,
      312,  312,  185,  965,  185,  185,  190,  965,  190,  190,
      193,  965,  193,  193,  342,  965,  342,  342,  345,  965,
      345,  345,  351,  965,  351,  351,  201,  965,  201,  201,
      226,  965,  226,  226,  341,  965,  341,  341,  213,  965,
      213,  213,  216,  965,  216,  216,   96,  965,   96,   96,
       99,  965,   99,   99,  221,  965,  221,  221,  232,  965,
      232,  232,  380,  965,  380,  380,  257,  965,  257,  257,
      250,  965,  250,  250,  263,  965,  263,  263,  416,  965,

      416,  416,  267,  965,  267,  267,  269,  965,  269,  269,
      472,  965,  472,  472,   39,  965,   39,   39,  470,  965,
      470,  470,   42,  965,   42,   42,  276,  965,  276,  276,
       36,  965,  965,   36,  312,  965,  312,  312,  155,  965,
      155,  155,  169,  965,  169,  169,  317,  965,  317,  317,
      325,  965,  325,  325,  331,  965,  331,  331,  336,  965,
      336,  336,  524,  965,  524,  524,  416,  965,  416,  416,
      533,  965,  533,  533,  351,  965,  351,  351,  342,  965,
      342,  342,  551,  965,  551,  551,  345,  965,  345,  345,
      201,  965,  201,  201,  360,  965,  360,  360,  190,  965,

      190,  190,  193,  965,  193,  193,  366,  965,  366,  366,
      386,  965,  386,  386,  226,  965,  226,  226,  107,  965,
      107,  107,  213,  965,  213,  213,  117,  965,  117,  117,
      574,  965,  574,  574,  579,  965,  579,  579,  451,  965,
      451,  451,  458,  965,  458,  458,  422,  965,  422,  422,
      433,  965,  433,  433,  439,  965,  439,  439,  445,  965,
      445,  445,  464,  965,  464,  464,  538,  965,  538,  538,
      688,  965,  688,  688,  472,  965,  472,  472,   85,  965,
       85,   85,  470,  965,  470,  470,  185,  965,  185,  185,
       42,  965,   42,   42,  155,  965,  155,  155,   79,  965,

      965,   79,  538,  965,  538,  538,  325,  965,  325,  325,
      533,  965,  533,  533,  549,  965,  549,  549,  169,  965,
      169,  169,  464,  965,  464,  464,  524,  965,  524,  524,
      312,  965,  312,  312,  731,  965,  731,  731,  726,  965,
      726,  726,  551,  965,  551,  551,  351,  965,  351,  351,
      557,  965,  557,  557,  386,  965,  386,  386,  360,  965,
      360,  360,  201,  965,  201,  201,  193,  965,  193,  193,
      226,  965,  226,  226,  585,  965,  585,  585,  213,  965,
      213,  213,  380,  965,  380,  380,  257,  965,  257,  257,
      658,  965,  658,  658,  645,  965,  645,  645,  664,  965,

      664,  664,  670,  965,  670,  670,  538,  965,  538,  538,
      628,  965,  628,  628,  638,  965,  638,  638,  651,  965,
      651,  651,  250,  965,  250,  250,  263,  965,  263,  263,
      677,  965,  677,  677,  683,  965,  683,  683,  742,  965,
      742,  742,  748,  965,  748,  748,  688,  965,  688,  688,
      470,  965,  470,  470,  185,  965,  185,  185,  155,  965,
      155,  155,  169,  965,  169,  169,  524,  965,  524,  524,
      757,  965,  757,  757,  651,  965,  651,  651,  731,  965,
      731,  731,  538,  965,  538,  538,  742,  965,  742,  742,
      748,  965,  748,  748,  201,  965,  201,  201,  351,  965,

      351,  351,  360,  965,  360,  360,  766,  965,  766,  766,
      386,  965,  386,  386,  226,  965,  226,  226,  638,  965,
      638,  638,  645,  965,  645,  645,  829,  965,  829,  829,
      835,  965,  835,  835,  451,  965,  451,  451,  458,  965,
      458,  458,  849,  965,  849,  849,  855,  965,  855,  855,
      823,  965,  823,  823,  843,  965,  843,  843,  464,  965,
      464,  464,  886,  965,  886,  886,  533,  965,  533,  533,
      169,  965,  169,  169,  524,  965,  524,  524,  731,  965,
      731,  731,  386,  965,  386,  386,  360,  965,  360,  360,
      835,  965,  835,  835,  933,  965,  933,  933,  670,  965,

      670,  670,  926,  965,  926,  926,  939,  965,  939,  939,
      538,  965,  538,  538,  742,  965,  742,  742,  958,  965,
      958,  958,    3,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965
    } ;

static const flex_int16_t yy_chk[6940] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    4,   43,   43,  962,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    7,   85,   85,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    8,   86,
       86,  957,   12,  952,    8,    9,    9,   12,   88,  474,
      474,  102,   88,    9,   11,   11,  102,  104,  948,  946,
      190,  104,   11,   13,  190,  945,  938,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   20,
      933,  932,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   22,  925,  917,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   24,   24,   24,   25,  916,  911,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       26,  906,  904,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   27,   27,   27,   29,
       29,  198,  363,  903,  216,  198,  363,   29,   34,  216,
      897,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   36,   36,  217,  895,  894,  885,
      881,  217,   36,   37,  854,  849,  848,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   40,
      842,  834,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   42,   42,   42,   49,  829,
      828,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   50,   50,   50,   52,  822,  816,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   54,  812,  809,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   56,
       56,   56,  804,  803,   56,  798,  794,  791,   56,   57,
      787,  786,   57,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   58,  782,  779,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   60,  778,  773,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   61,  765,  756,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   62,  752,  747,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   63,
       63,   63,   65,   65,   65,  741,  736,  730,  725,  721,
      682,   65,   66,   66,   66,  676,  669,  663,  658,  657,
      650,   66,   68,   68,  644,  637,  628,  627,  621,  613,

       68,   70,  610,  605,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   71,  602,  601,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   73,   73,   73,  596,  592,  588,  584,
      578,  573,   73,   74,  568,  556,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   75,
      548,  543,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   77,  537,  532,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   79,   79,  523,  520,  463,  457,  450,  444,   79,

       81,  438,  432,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   84,   84,   84,   87,
      422,  421,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   89,  416,  415,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   91,   91,   91,  410,  402,   91,   92,   92,   92,
       93,   93,   93,  397,   93,   94,   94,   94,   99,   99,
       99,  385,  379,   99,  376,  369,  365,   99,  100,  359,
      355,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  105,  350,  340,  105,  105,  105,

      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      107,  107,  107,  335,  331,  107,  108,  330,  324,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  109,  316,  311,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  110,  110,
      110,  307,  303,  110,  112,  112,  112,  301,  272,  112,
      262,  256,  249,  112,  113,  113,  113,  244,  241,  113,
      231,  229,  225,  113,  115,  221,  220,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      117,  117,  117,  212,  200,  117,  192,  184,  178,  117,

      118,  173,  168,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  119,  164,  159,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  120,  154,  143,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  122,  121,
      116,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  123,  111,  106,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      124,   98,   96,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  125,   90,   83,   78,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  127,   72,   67,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  128,  128,
       64,   59,   55,   53,   51,   47,   45,  128,   41,  128,
      129,   39,   35,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  130,  130,  130,   32,
       28,   23,   21,   17,   10,    3,  130,    0,  130,  131,
        0,    0,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  132,  132,  132,    0,    0,
        0,    0,    0,    0,    0,  132,    0,  132,  133,    0,

        0,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  134,  134,    0,    0,    0,    0,
        0,    0,  134,  136,    0,    0,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  138,
        0,    0,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  139,    0,    0,    0,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  141,  141,  141,    0,  141,  142,  142,  142,    0,
        0,  142,  145,  145,  145,    0,    0,    0,    0,    0,
        0,  145,  146,  146,  146,    0,  146,    0,    0,    0,

        0,  146,  147,  147,  147,    0,    0,    0,    0,    0,
        0,  147,  148,  148,  148,    0,    0,    0,    0,    0,
        0,  148,  149,  149,  149,    0,    0,    0,    0,    0,
        0,  149,  150,  150,    0,  150,    0,    0,    0,    0,
      150,  151,  151,    0,    0,    0,    0,    0,    0,  151,
      152,    0,    0,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  153,    0,    0,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  155,  155,  155,    0,    0,    0,    0,    0,
        0,  155,  156,    0,    0,  156,  156,  156,  156,  156,

      156,  156,  156,  156,  156,  156,  156,  156,  162,    0,
        0,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  163,  163,  163,    0,    0,    0,
        0,    0,    0,  163,  165,  165,  165,    0,    0,    0,
        0,    0,    0,  165,  167,    0,    0,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      177,    0,    0,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  181,    0,    0,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  182,    0,    0,  182,  182,  182,  182,  182,

      182,  182,  182,  182,  182,  182,  182,  182,  183,    0,
        0,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  185,  185,  185,  186,    0,    0,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  188,  188,  188,    0,  188,  189,    0,
        0,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  191,    0,    0,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      193,  193,  193,    0,    0,  193,  194,    0,    0,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,

      194,  194,  195,  195,    0,    0,    0,  195,  196,  196,
        0,    0,    0,  196,  197,    0,    0,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      201,  201,  201,    0,    0,  201,  202,    0,    0,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  203,    0,    0,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  204,  204,
      204,    0,    0,  204,  205,  205,  205,    0,  205,  205,
      206,  206,  206,    0,    0,  206,  207,  207,  207,  208,
      208,  208,    0,    0,  208,  210,    0,    0,  210,  210,

      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  211,    0,    0,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  213,  213,  213,
        0,    0,  213,    0,    0,    0,  213,  215,    0,    0,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  224,    0,    0,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  226,
      226,  226,    0,    0,  226,  228,    0,    0,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  230,    0,    0,  230,  230,  230,  230,  230,  230,

      230,  230,  230,  230,  230,  230,  230,  232,  232,  232,
        0,    0,  232,    0,    0,    0,  232,  235,  235,  235,
        0,    0,  235,  238,  238,  238,    0,    0,  238,    0,
        0,    0,  238,  239,  239,  239,    0,    0,  239,  240,
      240,  240,    0,  240,  240,    0,    0,    0,  240,  242,
      242,  242,    0,    0,  242,    0,    0,    0,  242,  243,
      243,  243,    0,    0,  243,    0,    0,    0,  243,  245,
      245,  245,    0,    0,  245,    0,    0,    0,  245,  246,
      246,  246,    0,    0,  246,    0,    0,    0,  246,  247,
        0,    0,  247,  247,  247,  247,  247,  247,  247,  247,

      247,  247,  247,  247,  247,  248,    0,    0,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  250,  250,  250,    0,    0,  250,    0,    0,    0,
      250,  251,    0,    0,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  252,    0,    0,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  253,    0,    0,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  255,
        0,    0,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  259,    0,    0,  259,  259,

      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  260,    0,    0,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  261,    0,    0,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  263,  263,  263,    0,    0,  263,    0,
        0,    0,  263,  266,    0,    0,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  267,
      267,    0,    0,    0,    0,    0,    0,    0,  267,    0,
      267,  268,    0,    0,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  269,  269,  269,

        0,    0,    0,    0,    0,    0,    0,  269,    0,  269,
      270,    0,    0,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  271,  271,  271,    0,
        0,    0,    0,    0,    0,    0,  271,    0,  271,  274,
      274,    0,    0,    0,    0,    0,    0,    0,  274,    0,
      274,  276,  276,  276,    0,    0,    0,    0,    0,    0,
        0,  276,    0,  276,  278,  278,  278,    0,    0,    0,
        0,    0,    0,    0,  278,    0,  278,  279,  279,  279,
      280,  280,  280,    0,    0,    0,    0,    0,    0,    0,
      280,    0,  280,  281,  281,  281,  282,    0,    0,  282,

      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  283,    0,    0,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  284,  284,
        0,    0,    0,    0,    0,    0,  284,  285,    0,    0,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  286,    0,    0,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  287,
        0,    0,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  288,    0,    0,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,

      288,  289,    0,    0,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  290,    0,    0,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  291,    0,    0,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  294,
        0,    0,    0,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  295,  295,  295,    0,    0,
        0,    0,    0,    0,  295,  296,  296,  296,    0,  296,
        0,    0,    0,    0,  296,  297,  297,  297,    0,    0,
        0,    0,    0,    0,  297,  298,  298,  298,    0,    0,

        0,    0,    0,    0,  298,  299,  299,  299,    0,    0,
        0,    0,    0,    0,  299,  300,  300,  300,    0,  300,
        0,    0,    0,    0,  300,  302,  302,  302,    0,    0,
      302,    0,    0,    0,  302,  305,  305,  305,    0,    0,
        0,    0,    0,    0,  305,  308,  308,  308,    0,    0,
        0,    0,    0,    0,  308,  309,    0,    0,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  310,    0,    0,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  312,  312,  312,
        0,    0,    0,    0,    0,    0,  312,  313,    0,    0,

      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  314,    0,    0,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  315,
        0,    0,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  317,  317,  317,    0,    0,
      317,    0,    0,    0,  317,  318,    0,    0,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  319,  319,  319,    0,    0,    0,    0,    0,    0,
      319,  320,  320,  320,    0,  320,    0,    0,    0,    0,
      320,  321,  321,  321,    0,    0,    0,    0,    0,    0,

      321,  323,    0,    0,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  325,  325,  325,
        0,    0,    0,    0,    0,    0,  325,  327,    0,    0,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  328,    0,    0,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  333,
        0,    0,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  334,    0,    0,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  338,    0,    0,  338,  338,  338,  338,  338,  338,

      338,  338,  338,  338,  338,  338,  338,  339,    0,    0,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  341,  341,  341,    0,    0,  341,  342,
      342,    0,    0,    0,  342,  343,  343,    0,    0,    0,
      343,  344,  344,    0,    0,    0,  344,  345,  345,    0,
        0,    0,  345,  346,  346,    0,    0,    0,  346,  347,
      347,    0,    0,    0,  347,  351,  351,  351,    0,    0,
      351,  352,    0,    0,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  353,    0,    0,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,

      353,  353,  353,  354,  354,  354,    0,    0,  354,  356,
      356,  356,    0,    0,  356,  358,    0,    0,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  360,  360,  360,    0,    0,  360,  362,    0,    0,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  366,  366,  366,    0,    0,  366,  367,
        0,    0,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  368,  368,  368,    0,    0,
      368,  371,  371,  371,    0,    0,  371,  372,  372,  372,
        0,    0,  372,  373,  373,  373,    0,  373,  373,  374,

      374,  374,    0,    0,  374,  378,    0,    0,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  382,    0,    0,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  388,    0,    0,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  390,  390,  390,    0,  390,  390,  392,
      392,  392,    0,    0,  392,  393,    0,    0,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  394,  394,  394,    0,    0,  394,    0,    0,    0,
      394,  395,  395,  395,    0,    0,  395,    0,    0,    0,

      395,  396,  396,  396,    0,    0,  396,  399,  399,  399,
        0,    0,  399,    0,    0,    0,  399,  400,  400,  400,
        0,    0,  400,    0,    0,    0,  400,  401,    0,    0,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  403,  403,  403,    0,    0,  403,    0,
        0,    0,  403,  404,  404,  404,    0,    0,  404,    0,
        0,    0,  404,  405,    0,    0,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  406,
      406,  406,    0,    0,  406,    0,    0,    0,  406,  407,
      407,  407,    0,    0,  407,    0,    0,    0,  407,  408,

      408,  408,    0,    0,  408,    0,    0,    0,  408,  409,
      409,  409,    0,    0,  409,    0,    0,    0,  409,  411,
      411,  411,    0,    0,  411,    0,    0,    0,  411,  413,
        0,    0,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  414,    0,    0,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  417,    0,    0,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  418,    0,    0,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  425,    0,    0,  425,  425,  425,  425,

      425,  425,  425,  425,  425,  425,  425,  425,  425,  426,
      426,  426,    0,    0,  426,    0,    0,    0,  426,  428,
      428,  428,    0,    0,  428,    0,    0,    0,  428,  429,
      429,  429,    0,    0,  429,    0,    0,    0,  429,  431,
        0,    0,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  435,    0,    0,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  437,    0,    0,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  442,    0,    0,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,

      442,  442,  442,  443,    0,    0,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  445,
      445,  445,    0,    0,  445,    0,    0,    0,  445,  446,
        0,    0,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  447,    0,    0,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  449,    0,    0,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  454,    0,    0,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  455,    0,    0,  455,  455,  455,  455,

      455,  455,  455,  455,  455,  455,  455,  455,  455,  456,
        0,    0,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  462,    0,    0,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  467,    0,    0,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  468,    0,    0,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  469,    0,    0,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  470,
      470,  470,    0,    0,    0,    0,    0,    0,    0,  470,

        0,  470,  471,    0,    0,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  472,  472,
      472,    0,    0,    0,    0,    0,    0,    0,  472,    0,
      472,  473,  473,  473,    0,    0,    0,    0,    0,    0,
        0,  473,    0,  473,  475,  475,  475,    0,    0,    0,
        0,    0,    0,    0,  475,    0,  475,  476,  476,  476,
      477,  477,  477,    0,    0,    0,    0,    0,    0,    0,
      477,    0,  477,  478,  478,  478,  479,    0,    0,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  480,    0,    0,  480,  480,  480,  480,  480,

      480,  480,  480,  480,  480,  480,  480,  480,  481,  481,
      481,    0,    0,    0,    0,    0,    0,  481,  482,    0,
        0,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  483,    0,    0,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      484,  484,    0,    0,    0,    0,    0,    0,  484,  485,
        0,    0,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  486,    0,    0,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  487,    0,    0,  487,  487,  487,  487,  487,  487,

      487,  487,  487,  487,  487,  487,  487,  488,    0,    0,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  489,    0,    0,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  495,
        0,    0,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  497,  497,  497,    0,    0,
        0,    0,    0,    0,  497,  499,    0,    0,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  502,    0,    0,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  504,    0,    0,

      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  508,  508,  508,    0,    0,  508,    0,
        0,    0,  508,  509,    0,    0,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  511,
      511,  511,    0,    0,    0,    0,    0,    0,  511,  512,
      512,  512,    0,  512,    0,    0,    0,    0,  512,  513,
      513,  513,    0,    0,    0,    0,    0,    0,  513,  514,
      514,  514,    0,    0,    0,    0,    0,    0,  514,  515,
      515,  515,    0,    0,    0,    0,    0,    0,  515,  516,
      516,  516,    0,  516,    0,    0,    0,    0,  516,  517,

      517,  517,    0,    0,    0,    0,    0,    0,  517,  518,
      518,  518,    0,    0,  518,    0,    0,    0,  518,  519,
        0,    0,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  521,    0,    0,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  522,    0,    0,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  524,  524,  524,
        0,    0,    0,    0,    0,    0,  524,  525,    0,    0,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  526,    0,    0,  526,  526,  526,  526,

      526,  526,  526,  526,  526,  526,  526,  526,  526,  527,
      527,  527,    0,    0,    0,    0,    0,    0,  527,  528,
      528,  528,    0,  528,    0,    0,    0,    0,  528,  531,
        0,    0,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  535,    0,    0,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  536,    0,    0,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  538,  538,  538,
        0,    0,  538,    0,    0,    0,  538,  539,    0,    0,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,

      539,  539,  539,  540,    0,    0,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  541,
      541,  541,    0,    0,    0,    0,    0,    0,  541,  545,
        0,    0,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  546,    0,    0,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  547,    0,    0,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  551,  551,    0,
        0,    0,  551,  552,  552,    0,    0,    0,  552,  554,
        0,    0,  554,  554,  554,  554,  554,  554,  554,  554,

      554,  554,  554,  554,  554,  555,    0,    0,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  557,  557,  557,    0,    0,  557,  558,    0,    0,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  559,  559,  559,    0,    0,  559,  560,
      560,  560,    0,    0,  560,  561,  561,  561,    0,  561,
      561,  562,  562,  562,    0,    0,  562,  563,    0,    0,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  564,  564,  564,    0,    0,  564,  565,
      565,  565,    0,  565,  565,  566,  566,  566,    0,    0,

      566,  567,  567,  567,    0,    0,  567,  570,  570,  570,
        0,    0,  570,  571,    0,    0,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  572,
        0,    0,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  574,  574,  574,    0,    0,
      574,  576,    0,    0,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  577,    0,    0,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  579,  579,  579,    0,    0,  579,    0,
        0,    0,  579,  581,    0,    0,  581,  581,  581,  581,

      581,  581,  581,  581,  581,  581,  581,  581,  581,  590,
      590,  590,    0,    0,  590,  591,  591,  591,    0,  591,
      591,    0,    0,    0,  591,  593,  593,  593,    0,    0,
      593,    0,    0,    0,  593,  594,  594,  594,    0,    0,
      594,    0,    0,    0,  594,  595,    0,    0,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  597,  597,  597,    0,    0,  597,    0,    0,    0,
      597,  598,  598,  598,    0,    0,  598,    0,    0,    0,
      598,  599,  599,  599,    0,    0,  599,    0,    0,    0,
      599,  600,    0,    0,  600,  600,  600,  600,  600,  600,

      600,  600,  600,  600,  600,  600,  600,  603,  603,  603,
        0,    0,  603,    0,    0,    0,  603,  604,    0,    0,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  607,  607,  607,    0,    0,  607,    0,
        0,    0,  607,  608,  608,  608,    0,    0,  608,    0,
        0,    0,  608,  611,  611,  611,    0,    0,  611,    0,
        0,    0,  611,  612,  612,  612,    0,    0,  612,    0,
        0,    0,  612,  616,  616,  616,    0,    0,  616,    0,
        0,    0,  616,  617,    0,    0,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  618,

      618,  618,    0,    0,  618,    0,    0,    0,  618,  619,
      619,  619,    0,    0,  619,    0,    0,    0,  619,  620,
      620,  620,    0,    0,  620,    0,    0,    0,  620,  624,
      624,  624,    0,    0,  624,    0,    0,    0,  624,  625,
        0,    0,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  626,    0,    0,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  629,    0,    0,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  631,  631,  631,
        0,    0,  631,    0,    0,    0,  631,  632,    0,    0,

      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  633,  633,  633,    0,    0,  633,    0,
        0,    0,  633,  634,  634,  634,    0,    0,  634,    0,
        0,    0,  634,  635,    0,    0,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  636,
        0,    0,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  638,  638,  638,    0,    0,
      638,    0,    0,    0,  638,  640,    0,    0,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  641,    0,    0,  641,  641,  641,  641,  641,  641,

      641,  641,  641,  641,  641,  641,  641,  642,    0,    0,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  643,    0,    0,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  648,
        0,    0,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  649,    0,    0,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  651,  651,  651,    0,    0,  651,    0,    0,    0,
      651,  654,    0,    0,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  662,    0,    0,

      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  666,    0,    0,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  668,
        0,    0,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  673,    0,    0,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  680,    0,    0,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  681,    0,    0,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  683,  683,  683,    0,    0,  683,    0,

        0,    0,  683,  686,    0,    0,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  687,
        0,    0,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  688,  688,  688,    0,    0,
        0,    0,    0,    0,    0,  688,    0,  688,  689,    0,
        0,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  690,  690,  690,    0,    0,    0,
        0,    0,    0,    0,  690,    0,  690,  691,  691,  691,
      692,    0,    0,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  693,    0,    0,  693,

      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  694,  694,  694,    0,    0,    0,    0,    0,
        0,  694,  695,    0,    0,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  697,  697,
      697,    0,    0,    0,    0,    0,    0,  697,  698,    0,
        0,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  700,  700,  700,    0,    0,    0,
        0,    0,    0,  700,  701,    0,    0,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      702,    0,    0,  702,  702,  702,  702,  702,  702,  702,

      702,  702,  702,  702,  702,  702,  703,    0,    0,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  704,    0,    0,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  705,    0,
        0,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  707,    0,    0,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      708,  708,  708,    0,    0,    0,    0,    0,    0,  708,
      710,    0,    0,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  713,    0,    0,  713,

      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  714,    0,    0,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  718,    0,
        0,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  719,  719,  719,    0,    0,    0,
        0,    0,    0,  719,  720,  720,  720,    0,    0,  720,
        0,    0,    0,  720,  723,    0,    0,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      724,    0,    0,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  726,  726,  726,    0,

        0,  726,    0,    0,    0,  726,  731,  731,  731,    0,
        0,  731,    0,    0,    0,  731,  732,    0,    0,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  734,    0,    0,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  735,  735,
      735,    0,    0,  735,    0,    0,    0,  735,  737,  737,
      737,    0,    0,  737,    0,    0,    0,  737,  738,  738,
      738,    0,    0,  738,    0,    0,    0,  738,  740,    0,
        0,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  742,  742,  742,    0,    0,  742,

        0,    0,    0,  742,  744,    0,    0,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      748,  748,  748,    0,    0,  748,    0,    0,    0,  748,
      751,  751,  751,    0,    0,  751,    0,    0,    0,  751,
      759,  759,  759,    0,    0,  759,  760,  760,  760,    0,
      760,  760,  761,  761,  761,    0,    0,  761,  762,  762,
      762,    0,    0,  762,  763,    0,    0,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      764,    0,    0,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  766,  766,  766,    0,

        0,  766,  768,  768,  768,    0,    0,  768,  769,  769,
      769,    0,  769,  769,  770,  770,  770,    0,    0,  770,
      771,  771,  771,    0,    0,  771,    0,    0,    0,  771,
      772,    0,    0,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  774,  774,  774,    0,
        0,  774,    0,    0,    0,  774,  775,  775,  775,    0,
        0,  775,    0,    0,    0,  775,  776,  776,  776,    0,
        0,  776,    0,    0,    0,  776,  777,  777,  777,    0,
      777,  777,    0,    0,    0,  777,  780,  780,  780,    0,
        0,  780,    0,    0,    0,  780,  781,    0,    0,  781,

      781,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      781,  781,  783,  783,  783,    0,    0,  783,    0,    0,
        0,  783,  784,  784,  784,    0,    0,  784,    0,    0,
        0,  784,  788,  788,  788,    0,    0,  788,    0,    0,
        0,  788,  790,    0,    0,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  793,  793,
      793,    0,    0,  793,    0,    0,    0,  793,  796,  796,
      796,    0,    0,  796,    0,    0,    0,  796,  797,  797,
      797,    0,    0,  797,    0,    0,    0,  797,  799,  799,
      799,    0,    0,  799,    0,    0,    0,  799,  801,  801,

      801,    0,    0,  801,    0,    0,    0,  801,  806,  806,
      806,    0,    0,  806,    0,    0,    0,  806,  807,    0,
        0,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  808,  808,  808,    0,    0,  808,
        0,    0,    0,  808,  810,  810,  810,    0,    0,  810,
        0,    0,    0,  810,  819,    0,    0,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      821,    0,    0,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  826,    0,    0,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,

      826,  826,  831,    0,    0,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  838,    0,
        0,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  839,    0,    0,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      840,    0,    0,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  852,    0,    0,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  853,    0,    0,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  858,    0,

        0,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  859,    0,    0,  859,  859,  859,
      859,  859,  859,  859,  859,  859,  859,  859,  859,  859,
      860,  860,  860,    0,    0,    0,    0,    0,    0,  860,
      862,    0,    0,  862,  862,  862,  862,  862,  862,  862,
      862,  862,  862,  862,  862,  862,  863,  863,  863,    0,
        0,    0,    0,    0,    0,  863,  864,    0,    0,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  865,    0,    0,  865,  865,  865,  865,  865,
      865,  865,  865,  865,  865,  865,  865,  865,  866,    0,

        0,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  867,    0,    0,  867,  867,  867,
      867,  867,  867,  867,  867,  867,  867,  867,  867,  867,
      868,    0,    0,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  869,    0,    0,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  871,  871,  871,    0,    0,    0,    0,    0,
        0,  871,  873,    0,    0,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  876,    0,
        0,  876,  876,  876,  876,  876,  876,  876,  876,  876,

      876,  876,  876,  876,  879,  879,  879,    0,    0,    0,
        0,    0,    0,  879,  883,    0,    0,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      884,    0,    0,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  886,  886,  886,    0,
        0,  886,    0,    0,    0,  886,  887,    0,    0,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  888,    0,    0,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  889,  889,
      889,    0,    0,  889,  890,  890,  890,    0,  890,  890,

      891,  891,  891,    0,    0,  891,  896,  896,  896,    0,
        0,  896,    0,    0,    0,  896,  900,  900,  900,    0,
        0,  900,    0,    0,    0,  900,  901,  901,  901,    0,
        0,  901,    0,    0,    0,  901,  905,  905,  905,    0,
        0,  905,    0,    0,    0,  905,  909,  909,  909,    0,
        0,  909,    0,    0,    0,  909,  914,  914,  914,    0,
        0,  914,    0,    0,    0,  914,  919,  919,  919,    0,
        0,  919,    0,    0,    0,  919,  920,  920,  920,    0,
      920,  920,    0,    0,    0,  920,  921,  921,  921,    0,
        0,  921,    0,    0,    0,  921,  924,    0,    0,  924,

      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  926,  926,  926,    0,    0,  926,    0,    0,
        0,  926,  928,    0,    0,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  929,    0,
        0,  929,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  929,  929,  937,    0,    0,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      942,  942,  942,    0,    0,  942,    0,    0,    0,  942,
      966,    0,    0,  966,  967,    0,  967,  967,  968,    0,
      968,  968,  969,    0,  969,  969,  970,    0,    0,  970,

      971,    0,  971,  971,  972,    0,  972,  972,  973,    0,
      973,  973,  974,    0,  974,  974,  975,    0,  975,  976,
        0,  976,  976,  977,    0,  977,  977,  978,    0,  978,
      978,  979,    0,    0,  979,  980,    0,  980,  980,  981,
        0,  981,  981,  982,    0,  982,  982,  983,    0,  983,
      983,  984,    0,  984,  984,  985,    0,  985,  985,  986,
        0,  986,  986,  987,    0,  987,  987,  988,    0,  988,
      988,  989,    0,  989,  990,    0,  990,  990,  991,    0,
      991,  991,  992,    0,  992,  992,  993,    0,    0,  993,
      994,    0,  994,  994,  995,    0,  995,  995,  996,    0,

      996,  996,  997,    0,  997,  997,  998,    0,  998,  998,
      999,    0,  999,  999, 1000,    0,    0, 1000, 1001,    0,
     1001, 1001, 1002,    0, 1002, 1002, 1003,    0, 1003, 1003,
     1004,    0, 1004, 1004, 1005,    0, 1005, 1005, 1006,    0,
     1006, 1006, 1007,    0, 1007, 1007, 1008,    0, 1008, 1008,
     1009,    0, 1009, 1009, 1010,    0, 1010, 1010, 1011,    0,
     1011, 1011, 1012,    0, 1012, 1012, 1013,    0, 1013, 1013,
     1014,    0, 1014, 1014, 1015,    0, 1015, 1015, 1016,    0,
     1016, 1016, 1017,    0, 1017, 1017, 1018,    0, 1018, 1018,
     1019,    0, 1019, 1019, 1020,    0, 1020, 1020, 1021,    0,

     1021, 1021, 1022,    0, 1022, 1022, 1023,    0, 1023, 1023,
     1024,    0, 1024, 1024, 1025,    0, 1025, 1025, 1026,    0,
     1026, 1026, 1027,    0, 1027, 1027, 1028,    0, 1028, 1028,
     1029,    0,    0, 1029, 1030,    0, 1030, 1030, 1031,    0,
     1031, 1031, 1032,    0, 1032, 1032, 1033,    0, 1033, 1033,
     1034,    0, 1034, 1034, 1035,    0, 1035, 1035, 1036,    0,
     1036, 1036, 1037,    0, 1037, 1037, 1038,    0, 1038, 1038,
     1039,    0, 1039, 1039, 1040,    0, 1040, 1040, 1041,    0,
     1041, 1041, 1042,    0, 1042, 1042, 1043,    0, 1043, 1043,
     1044,    0, 1044, 1044, 1045,    0, 1045, 1045, 1046,    0,

     1046, 1046, 1047,    0, 1047, 1047, 1048,    0, 1048, 1048,
     1049,    0, 1049, 1049, 1050,    0, 1050, 1050, 1051,    0,
     1051, 1051, 1052,    0, 1052, 1052, 1053,    0, 1053, 1053,
     1054,    0, 1054, 1054, 1055,    0, 1055, 1055, 1056,    0,
     1056, 1056, 1057,    0, 1057, 1057, 1058,    0, 1058, 1058,
     1059,    0, 1059, 1059, 1060,    0, 1060, 1060, 1061,    0,
     1061, 1061, 1062,    0, 1062, 1062, 1063,    0, 1063, 1063,
     1064,    0, 1064, 1064, 1065,    0, 1065, 1065, 1066,    0,
     1066, 1066, 1067,    0, 1067, 1067, 1068,    0, 1068, 1068,
     1069,    0, 1069, 1069, 1070,    0, 1070, 1070, 1071,    0,

        0, 1071, 1072,    0, 1072, 1072, 1073,    0, 1073, 1073,
     1074,    0, 1074, 1074, 1075,    0, 1075, 1075, 1076,    0,
     1076, 1076, 1077,    0, 1077, 1077, 1078,    0, 1078, 1078,
     1079,    0, 1079, 1079, 1080,    0, 1080, 1080, 1081,    0,
     1081, 1081, 1082,    0, 1082, 1082, 1083,    0, 1083, 1083,
     1084,    0, 1084, 1084, 1085,    0, 1085, 1085, 1086,    0,
     1086, 1086, 1087,    0, 1087, 1087, 1088,    0, 1088, 1088,
     1089,    0, 1089, 1089, 1090,    0, 1090, 1090, 1091,    0,
     1091, 1091, 1092,    0, 1092, 1092, 1093,    0, 1093, 1093,
     1094,    0, 1094, 1094, 1095,    0, 1095, 1095, 1096,    0,

     1096, 1096, 1097,    0, 1097, 1097, 1098,    0, 1098, 1098,
     1099,    0, 1099, 1099, 1100,    0, 1100, 1100, 1101,    0,
     1101, 1101, 1102,    0, 1102, 1102, 1103,    0, 1103, 1103,
     1104,    0, 1104, 1104, 1105,    0, 1105, 1105, 1106,    0,
     1106, 1106, 1107,    0, 1107, 1107, 1108,    0, 1108, 1108,
     1109,    0, 1109, 1109, 1110,    0, 1110, 1110, 1111,    0,
     1111, 1111, 1112,    0, 1112, 1112, 1113,    0, 1113, 1113,
     1114,    0, 1114, 1114, 1115,    0, 1115, 1115, 1116,    0,
     1116, 1116, 1117,    0, 1117, 1117, 1118,    0, 1118, 1118,
     1119,    0, 1119, 1119, 1120,    0, 1120, 1120, 1121,    0,

     1121, 1121, 1122,    0, 1122, 1122, 1123,    0, 1123, 1123,
     1124,    0, 1124, 1124, 1125,    0, 1125, 1125, 1126,    0,
     1126, 1126, 1127,    0, 1127, 1127, 1128,    0, 1128, 1128,
     1129,    0, 1129, 1129, 1130,    0, 1130, 1130, 1131,    0,
     1131, 1131, 1132,    0, 1132, 1132, 1133,    0, 1133, 1133,
     1134,    0, 1134, 1134, 1135,    0, 1135, 1135, 1136,    0,
     1136, 1136, 1137,    0, 1137, 1137, 1138,    0, 1138, 1138,
     1139,    0, 1139, 1139, 1140,    0, 1140, 1140, 1141,    0,
     1141, 1141, 1142,    0, 1142, 1142, 1143,    0, 1143, 1143,
     1144,    0, 1144, 1144, 1145,    0, 1145, 1145, 1146,    0,

     1146, 1146, 1147,    0, 1147, 1147, 1148,    0, 1148, 1148,
     1149,    0, 1149, 1149, 1150,    0, 1150, 1150, 1151,    0,
     1151, 1151,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[17] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
/*
 *
 * CS-252 
 * shell.l: lexical analyzer for shell
 * You have to extend it.
 *
 */
#line 11 "shell.l"

#include <cstring>
#include <stdlib.h>
#include "y.tab.hh"

#define MAX_INCLUDE_DEPTH 10
YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

static  void yyunput (int c,char *buf_ptr  );

char *getenv(const char *name);

void myunputc(int c) {
  unput(c);
}

void remove_character(char* s, char c) {
  int j, n = strlen(s);
  int escaped = 0; 

  for (int i = j = 0; i < n; i++) {
    if (s[i] != c || escaped) {
      s[j++] = s[i];
      escaped = 0;
    } else {
      escaped = 1;
    }
  }   

  s[j] = '\0';
}

/*void source(char *s) {
  FILE *yyin = fopen(s, "r");

  if (!yyin) {
    fprintf( stderr, "No File" );
  } else {
    yypush_buffer_state( yy_create_buffer( yyin, YY_BUF_SIZE ) );
    yyparse();
    fclose(yyin);
  }
}*/

void removeStartAndEnd(char* s) {
  int j, n = strlen(s);

  s[0] = '\0';
  for (int i = 1; i < n; i++) {
    s[i - 1] = s[i];
  }   
  s[n - 2] = '\0';
}

#line 2417 "lex.yy.cc"
#line 2418 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 70 "shell.l"


#line 2638 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 966 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6923 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 72 "shell.l"
{
  return NEWLINE;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 76 "shell.l"
{
  /* Discard spaces and tabs */
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 80 "shell.l"
{
  return GREAT;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 84 "shell.l"
{
  return GREATGREAT;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 88 "shell.l"
{
  return LESS;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 92 "shell.l"
{
  return PIPE;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 96 "shell.l"
{
  return AMPERSAND;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 100 "shell.l"
{
  return TWOGREAT;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 104 "shell.l"
{
  return GREATAMPERSAND;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 108 "shell.l"
{
  return GREATGREATAMPERSAND;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 112 "shell.l"
{ 
  remove_character(yytext, '$');
  remove_character(yytext, '(');
  remove_character(yytext, ')');

  int pin[2], pout[2];
  pipe(pin); pipe(pout);

  int ret = fork();
  if (ret == 0) {
      close(pin[1]);
      close(pout[0]);

      dup2(pin[0], 0);
      close(pin[0]);

      dup2(pout[1], 1);
      close(pout[1]);
      
      // Execute shell executable
      execvp("/proc/self/exe", NULL);
      perror("Error in Child Process");
      exit(1);
  } else if (ret < 0) {
      perror("Error Forking Child");
      exit(1);
  }

  close(pin[0]);
  close(pout[1]);

  write(pin[1], strcat(yytext, "\n"), strlen(yytext) + 1);
  write(pin[1], "exit\n", 6);
  close(pin[1]);
  
  int size = 1024;
  char* buffer = (char*) malloc(sizeof(char) * size);
  char* iterator = buffer;
  int n = read(pout[0], iterator++, 1);
  while (n > 0) {
    n = read(pout[0], iterator++, 1);
    if (strlen(buffer) == size) {
      size = size * 2;
      realloc(buffer, size);
    }
  }

  *iterator = '\0';
  close(pout[0]);

  for (int i = strlen(buffer) - 1; i >= 0; i--) {
    char c = ' ';
    if (buffer[i] == '\n') {
      myunputc(' ');
    } else {
      myunputc(buffer[i]);
    }
  }
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 172 "shell.l"
{ 
  remove_character(yytext, '\\');
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 178 "shell.l"
{
  remove_character(yytext, '$');
  remove_character(yytext, '{');
  remove_character(yytext, '}');

  int size = 1024;
  char* buffer = (char*) malloc(sizeof(char) * size);
  buffer = getenv(yytext);

  if(buffer) {
    for (int i = strlen(buffer) - 1; i >= 0; i--) {
      char c = ' ';
      if (buffer[i] == '\n') {
        myunputc(' ');
      } else {
        myunputc(buffer[i]);
      }
    }
  }
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 199 "shell.l"
{
  removeStartAndEnd(yytext);
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 205 "shell.l"
{
  /* Assume that file names have only alpha chars */
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 210 "shell.l"
ECHO;
	YY_BREAK
#line 2895 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 966 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 966 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 965);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 210 "shell.l"
