#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 16
#define YY_END_OF_BUFFER 17
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[564] =
    {   0,
        0,    0,   17,   15,    2,    1,   15,   16,    7,   15,
        5,    3,   12,   16,    6,   15,   15,    0,    0,   12,
       15,    0,   15,    0,    0,    0,    0,   12,    0,    8,
        9,    4,   12,   12,   12,   12,   12,   15,    0,   14,
        0,    0,   14,   15,    0,   14,    0,    0,   14,    0,
        0,    0,    0,    0,    0,   12,   12,   12,    0,    0,
        0,   12,   10,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   14,   14,   14,   14,   14,   14,
       14,    0,    0,   14,    0,   14,    0,    0,    0,    0,
       11,   12,   11,    0,    0,    0,    0,   11,    0,   12,

       12,   12,   11,   12,   12,   12,   12,   12,    0,    0,
        0,   12,   13,   13,    0,    0,    0,   13,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       14,   14,   14,   14,   14,   14,    0,    0,   14,    0,
       11,   14,   11,   14,    0,   14,   14,   11,    0,   11,
       11,   11,   11,   11,   11,   11,    0,   14,    0,   11,
       11,   11,   11,   11,    0,    0,    0,    0,   11,   12,
       12,   12,   12,   11,   12,   12,   11,   11,   11,   11,

       11,   12,   12,   12,   11,   12,   12,   12,   12,   12,
       12,   12,    0,    0,   14,   13,   14,   13,    0,    0,
       14,   13,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   14,   14,   14,   14,
       14,   11,   11,   11,   11,   14,   14,   14,   11,   14,
       11,   11,   11,   11,    0,    0,   14,    0,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   12,
       12,   12,   11,   12,   12,   12,   12,   11,   12,   12,

       11,   11,   11,   11,   11,   12,   12,   12,   11,   12,
       12,   12,   12,   11,   12,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   12,   12,   12,   11,
       12,   12,   12,   12,   12,   12,   14,   14,   13,   14,
       14,   13,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   11,   12,   12,   12,
       12,   12,   12,   11,   11,   11,   14,   14,   14,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   12,   12,   12,   11,   12,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       12,   12,   12,   11,   12,   12,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   12,   12,   12,   11,   12,   12,   12,   12,
       11,   12,   14,   14,   13,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   11,   12,   12,   11,   11,   11,
       11,   11,   12,   12,   12,   11,   12,   12,   12,   12,
       12,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   12,   12,   12,   12,   11,   12,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   11,
       12,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   12,   12,   12,   11,   12,   11,   11,   11,
       11,   11,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    6,    1,    7,    1,    8,
        9,    1,    1,    1,    1,    1,    1,    1,    1,   10,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   11,
        1,   12,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   13,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   14,   15,   16,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[17] =
    {   0,
        1,    2,    2,    3,    1,    4,    1,    1,    1,    1,
        1,    1,    1,    4,    1,    1
    } ;

static const flex_int16_t yy_base[708] =
    {   0,
        0,    0,  399,   16, 3345, 3345,   32,   44,   54,  386,
        0,   44,   67,    0,    0,    0,    0,  375,    0,    0,
       83,  377,   99,  115,  359,  128,  138,  151,  164,    0,
        0,  359,    0,  180,  343,    0,  196,    0,  345,  212,
        0,  339,   14,    0,  340,    0,    0,  336,  228,  238,
      244,  254,  334,  264,  270,  280,  293,  306,  319,  326,
      332,  348,    0,  364,  380,  396,  333,  409,  422,    0,
      435,  332,    0,    0,  451,    0,  467,  331,   30,   49,
        0,  477,   56,  483,  489,    0,  314,  312,  495,    0,
      501,  511,   60,  310,   57,  521,    0,  527,  533,    0,

      543,  309,  553,  563,  576,  589,  602,    0,    0,  297,
      612,    0,    0, 3345,  625,  637,  650,  663,    0,  669,
      685,  697,    0,  710,    0,  304,    0,    0,    0,    0,
      302,    0,  726,  736,    0,    0,  749,  301,    0,    0,
        0,  762,  300,  772,    0,  785,  297,    0,    0,  798,
      811,  827,  840,  296,    0,  850,  292,  112,  853,    0,
      859,  865,  871,  877,  113,  883,  889,  895,  901,  907,
      917,  923,  291,  933,  122,  123,  289,    0,    0,    0,
        0,  943,  288,    0,  949,  286,  959,  965,  284,    0,
      975,  985,  995, 1005, 1015, 1025, 1035, 1045,  283,    0,

     1055,    0, 1065,  282, 1075,    0, 1085,    0, 1098,    0,
     1111,    0, 1121, 1133, 1146, 1159, 1162,  283, 1175, 1187,
     1200, 1213, 1219, 1235, 1251, 1264, 1277, 1293,    0, 1305,
     1318, 1334, 1350,  279, 1363, 1376, 1389,  274, 1399,    0,
     1409,    0, 1422,  273,    0,    0, 1432, 1445,    0,  272,
        0,    0,    0, 1455,  269,    0, 1465, 1471, 1477, 1483,
     1489, 1495, 1501, 1507, 1513,  264, 1519,    0, 1525, 1531,
     1537, 1543,  263,    0, 1549,  125,    0, 1555, 1561, 1567,
     1573,  258,    0, 1579,    0, 1589,  257,    0, 1595,  256,
     1601,    0, 1611,    0,  254,    0,    0, 1621,    0, 1631,

        0, 1641,  253,    0, 1651,    0, 1661,  248, 1671,    0,
     1681, 1691, 1701, 1711,    0,    0, 1721,  247,    0,    0,
     1731, 1741, 1751, 1761,  243,  242,    0, 1771,  240,    0,
        0, 1781, 1791, 1801, 1811, 1821, 1831, 1844, 1857, 1860,
     1873,   66, 1889, 1905, 1921, 1934,    0,    0,    0, 1944,
        0, 1957,    0, 1970,    0, 1983,    0,    0, 1999, 2015,
     2031,  239, 2044, 2060, 2070, 2080,    0, 2093,  238,    0,
        0,    0,    0, 2103,    0, 2113, 2123, 2133, 2143,    0,
     2153,  232,    0, 2163, 2169,    0, 2175, 2181, 2187, 2193,
     2199, 2205, 2211, 2217,  231, 2223, 2233, 2239,  227, 2249,

      226, 2259,    0,  224, 2265,    0, 2275, 2285,    0, 2295,
     2305,  223,    0, 2315, 2325, 2335, 2345, 2355,  222,  207,
     2365,    0,  206, 2375,    0, 2385, 2395, 2405,  192,    0,
      191, 2415, 2425,  190,    0, 2435,  175, 2445,    0,  174,
      159, 2455,    0,    0,  158,  155,    0, 2465, 2475, 2485,
     2495,  154, 2505, 2518, 2531, 2537, 2553, 2569, 2582,    0,
     2595,    0, 2608, 2621,    0,    0, 2634, 2644,    0, 2654,
        0,  150,    0,    0,    0,    0, 2664,    0,    0,  149,
        0,    0,    0,    0,  147,    0,    0,    0,    0,  146,
        0, 2674,    0, 2680,  145, 2686,    0, 2696,  142,    0,

        0,    0,    0,  141,    0,  140,    0,    0,  139,    0,
        0, 2706, 2716,    0,    0,  138,  137,    0,  132,    0,
        0,  131,  127,    0, 2726,  111,    0,    0,    0,    0,
        0, 2736,    0,    0,    0, 2746,   94,    0,    0,    0,
        0,    0,    0,   93,    0,    0, 2756,   78,    0,    0,
       77,   55,    0,    0,   47,    0,    0,    0,    0,   12,
        0,    0, 3345, 2769, 2773, 2777, 2781, 2785, 2789, 2793,
     2797, 2801, 2805, 2808, 2812, 2816, 2820, 2824, 2828, 2832,
     2836, 2840, 2844, 2848, 2852, 2856, 2860, 2864, 2868, 2872,
     2876, 2880, 2884, 2888, 2892, 2896, 2900, 2904, 2908, 2912,

     2916, 2920, 2924, 2928, 2932, 2936, 2940, 2944, 2948, 2952,
     2956, 2960, 2964, 2968, 2972, 2976, 2980, 2984, 2988, 2992,
     2996, 3000, 3004, 3008, 3012, 3016, 3020, 3024, 3028, 3032,
     3036, 3040, 3044, 3048, 3052, 3056, 3060, 3064, 3068, 3072,
     3076, 3080, 3084, 3088, 3092, 3096, 3100, 3104, 3108, 3112,
     3116, 3120, 3124, 3128, 3132, 3136, 3140, 3144, 3148, 3152,
     3156, 3160, 3164, 3168, 3172, 3176, 3180, 3184, 3188, 3192,
     3196, 3200, 3204, 3208, 3212, 3216, 3220, 3224, 3228, 3232,
     3236, 3240, 3244, 3248, 3252, 3256, 3260, 3264, 3268, 3272,
     3276, 3280, 3284, 3288, 3292, 3296, 3300, 3304, 3308, 3312,

     3316, 3320, 3324, 3328, 3332, 3336, 3340
    } ;

static const flex_int16_t yy_def[708] =
    {   0,
      563,    1,  563,  563,  563,  563,  563,  564,  564,    4,
        9,    9,  563,    9,    9,    4,    7,    9,    9,   13,
      563,  565,  563,   21,   24,    7,  566,   13,  563,    9,
        9,    9,   13,  563,   28,   28,  563,   21,  565,  563,
       24,   24,  567,   21,  565,   40,   24,   24,   40,  568,
       23,  569,  570,  571,  569,  572,   34,   37,  563,  573,
      574,  563,    9,  563,  563,   64,   66,  563,  575,   37,
      563,   58,   58,   37,  563,   40,   75,   77,  567,  567,
       49,  576,  577,  578,  576,   49,   55,  570,  571,   55,
      579,  572,  580,   85,  577,  581,   85,  582,  583,   92,

      584,   92,  585,  586,   65,   68,   71,   58,   59,  573,
      574,   62,    9,  563,  587,  588,  589,  590,   62,  563,
      563,  591,   64,  563,   66,   66,   68,   64,  124,   66,
       66,   68,  124,  592,  106,   68,  563,  106,  106,   68,
       92,  584,   92,  586,   68,  563,  106,  106,   68,  593,
      563,   49,  151,  153,   49,  594,   85,  577,  595,   85,
      582,  596,  597,  598,  577,  595,  598,  599,  600,  601,
      602,  601,  172,  603,  604,  604,   85,  166,   85,  161,
      161,  605,  161,  161,  606,  607,  608,  606,  172,   92,
      609,  610,  609,  611,  612,  613,  603,  614,  197,  197,

      615,  144,  616,  144,  615,  144,  617,  106,  137,  106,
      146,  106,  618,  619,  620,  621,  622,  623,  618,  619,
      620,  621,  563,  563,  563,  624,  563,  563,  227,  625,
      563,  563,  231,  233,  563,  617,  235,  193,  626,  193,
      612,  235,  209,  237,  237,  235,  627,  106,  243,  106,
      106,  248,  144,  616,  144,  144,  628,  629,  628,  630,
      630,  631,  632,  631,  632,  259,  629,  259,  633,  634,
      633,  635,  271,  271,  636,  637,  267,  636,  638,  638,
      639,  280,  280,  640,  271,  635,  271,  271,  641,  193,
      626,  193,  642,  241,  193,  291,  193,  642,  241,  643,

      298,  644,  298,  298,  645,  241,  646,  241,  645,  241,
      647,  648,  647,  649,  144,  298,  650,  298,  298,  309,
      651,  652,  653,  652,  324,  324,  241,  654,  241,  309,
      241,  655,  656,  657,  656,  658,  659,  660,  661,  662,
      662,  663,  563,  563,  563,  664,  343,  344,  345,  664,
      345,  563,  345,  658,  345,  563,  345,  354,  563,  563,
      359,  361,  563,  360,  665,  657,  363,  335,  366,  366,
      363,  335,  366,  666,  291,  666,  667,  668,  669,  241,
      646,  241,  241,  670,  670,  385,  671,  672,  671,  673,
      674,  675,  676,  675,  394,  677,  678,  677,  398,  679,

      394,  676,  394,  394,  680,  291,  680,  681,  241,  667,
      682,  410,  410,  683,  684,  685,  686,  685,  418,  418,
      668,  381,  421,  683,  421,  687,  681,  682,  427,  427,
      418,  679,  688,  432,  432,  689,  418,  690,  418,  418,
      418,  691,  241,  381,  241,  418,  241,  692,  693,  692,
      689,  450,  694,  695,  696,  563,  563,  563,  697,  458,
      563,  458,  698,  563,  461,  464,  699,  700,  291,  700,
      421,  470,  291,  470,  410,  421,  701,  410,  428,  410,
      410,  424,  421,  381,  421,  424,  421,  421,  381,  421,
      421,  702,  402,  702,  494,  703,  424,  686,  424,  424,

      424,  427,  428,  427,  427,  418,  424,  498,  424,  424,
      424,  704,  705,  241,  381,  241,  418,  241,  418,  498,
      418,  418,  418,  451,  706,  451,  451,  451,  456,  457,
      458,  697,  458,  461,  458,  698,  470,  291,  470,  410,
      421,  410,  428,  410,  410,  424,  707,  418,  498,  418,
      418,  418,  421,  381,  421,  424,  421,  424,  498,  424,
      424,  424,    0,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,

      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,

      563,  563,  563,  563,  563,  563,  563
    } ;

static const flex_int16_t yy_nxt[3362] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,    4,    4,   10,
       11,   12,   13,   14,   15,   14,   16,   39,   80,  547,
       17,   18,   19,   16,   16,   16,   19,   19,   20,   19,
       19,   19,   21,   39,   80,   22,   23,   24,   25,   21,
       21,   21,   25,   25,   21,   25,   25,   25,   26,   18,
       31,   27,   39,   80,  513,   32,   28,   29,   26,   18,
      162,  162,  416,   88,  163,  163,   28,   33,  176,   39,
       80,   34,   35,   36,   33,   33,   33,   36,   36,   37,
       36,   36,   36,   38,  416,  416,   39,   40,   41,   42,
       38,   38,   38,   42,   42,   38,   42,   42,   42,   44,

      496,  472,   45,   46,   47,   48,   44,   44,   44,   48,
       48,   44,   48,   48,   48,   42,  162,  162,  442,   49,
      163,  163,   50,   42,   42,   88,   88,   42,   25,  162,
      176,  176,   51,  163,  416,   25,   25,   25,  416,  416,
       25,   53,   54,   55,  416,  426,  547,  416,  415,  547,
       56,   36,  271,  513,  513,   57,  496,  472,   36,   36,
       36,  202,  416,   58,   59,  426,  416,   60,   61,   18,
       59,   59,   59,   59,   59,   59,   62,   19,   59,   19,
       64,  416,  416,   22,   65,   66,   67,   64,   64,   64,
       67,   67,   68,   67,   67,   67,   70,  321,  416,  415,

       71,   72,   73,   70,   70,   70,   73,   73,   74,   73,
       73,   73,   75,  513,  416,   45,   76,   77,   78,   75,
       75,   75,   78,   78,   75,   78,   78,   78,   78,  416,
      496,  181,   81,  181,  170,   78,   78,   78,  181,  426,
       78,   83,   84,   85,   48,  379,  362,  426,   86,  322,
      322,   48,   48,   48,  415,  426,   48,   88,   89,   90,
      415,  290,   91,  290,  391,  289,   92,   95,   96,   97,
      391,  266,   98,   88,   89,   90,  332,   99,   91,  247,
      379,  290,   92,   88,  101,  102,  362,   43,  103,  332,
      321,  170,  104,   67,   93,  289,  157,  105,  170,  157,

       67,   67,   67,  154,  247,  106,   73,  196,  247,  126,
      107,  126,  114,   73,   73,   73,  196,  157,  108,  109,
       93,   87,  110,  111,   18,  109,  109,  109,  109,  109,
      109,  112,   19,  109,  113,  116,  117,   24,  154,  150,
      126,  114,   93,   42,   43,   25,   42,  118,  119,   43,
       69,  110,  120,   35,  119,  119,  119,  119,  119,  119,
      121,   36,  119,  122,  123,   63,   42,   39,  124,  125,
      126,  123,  123,  123,  126,  126,  127,  126,  126,  126,
      128,   43,   27,   45,  129,  130,  131,  128,  128,  128,
      131,  131,  132,  131,  131,  131,  126,   30,  563,  563,

      133,  563,  563,  134,  126,  126,  563,  563,  135,  136,
      563,  563,   39,  137,  138,  139,  136,  136,  136,  139,
      139,  140,  139,  139,  139,   53,  142,  143,  563,  563,
      563,  563,  563,  563,  144,  145,  563,  563,   22,  146,
      147,  148,  145,  145,  145,  148,  148,  149,  148,  148,
      148,  151,  563,  563,   39,  152,  153,  154,  151,  151,
      151,  154,  154,  151,  154,  154,  154,  154,  563,  563,
      563,  155,  563,  563,  156,  154,  154,  563,  563,  154,
      158,  159,  160,  563,  563,  161,  165,  166,  167,  563,
      563,  168,  158,  159,  160,  563,  169,  161,   95,   96,

       97,  563,  563,   98,   88,  171,  172,  563,  563,  173,
      563,  563,  563,  174,   88,  101,  102,  563,  563,  103,
      563,  563,  563,  104,  165,  178,  179,  563,  563,  180,
      158,  182,  183,  563,  563,  184,  186,  187,  188,  563,
      563,  189,  563,  563,  563,  190,   95,  192,  193,  563,
      563,  194,  563,  563,  563,  195,   88,  198,  199,  563,
      563,  200,  563,  563,  563,  201,   88,  203,  204,  563,
      563,  205,  563,  563,  563,  206,  131,  563,  563,  563,
      207,  563,  563,  131,  131,  131,  563,  563,  208,  139,
      563,  563,  563,  209,  563,  563,  139,  139,  139,  563,

      563,  210,  148,  563,  563,  563,  211,  563,  563,  148,
      148,  148,  563,  563,  212,  116,  117,   24,  563,  563,
      563,  563,  563,  563,  563,   25,  563,  118,  214,  215,
       41,  563,  563,  563,  563,  563,  563,  563,   42,  563,
      216,  217,   39,  563,  563,  563,  563,  563,  563,  563,
       39,  563,  218,  220,  221,   47,  563,  563,  563,  563,
      563,  563,  563,   48,  563,  222,   39,   49,   41,  223,
      563,  563,  116,  224,   66,  223,  223,  223,  223,  223,
      223,  225,   67,  223,  226,  227,  563,  563,  110,  228,
       72,  227,  227,  227,  227,  227,  227,  229,   73,  227,

      230,   57,   35,  563,  563,  563,  563,  563,  563,   58,
      231,  563,  563,   45,  232,  233,  234,  231,  231,  231,
      234,  234,  235,  234,  234,  234,  234,  563,  563,  563,
      236,  563,  563,  234,  234,  234,  563,  563,  237,   83,
      239,  240,  563,  563,  563,  563,  563,  563,  241,  242,
      563,  563,   45,  243,  244,  245,  242,  242,  242,  245,
      245,  246,  245,  245,  245,   95,  192,  193,  563,  563,
      194,  563,  563,  563,  195,   88,  203,  204,  563,  563,
      205,  563,  563,  563,  206,  248,  563,  563,   45,  249,
      250,  251,  248,  248,  248,  251,  251,  252,  251,  251,

      251,   53,  254,  255,  563,  563,  563,  563,  563,  563,
      256,  151,  563,  563,   39,  152,  153,  154,  151,  151,
      151,  154,  154,  151,  154,  154,  154,   75,  563,  563,
      563,   76,  563,  563,   75,   75,   75,  563,  563,   75,
      154,  563,  563,  563,  155,  563,  563,  156,  154,  154,
      563,  563,  154,   83,  258,  259,  165,  166,  167,  563,
      563,  168,  158,  182,  183,  563,  563,  184,  158,  261,
      563,  563,  563,  262,  158,  264,  563,  563,  563,  265,
      158,  267,  268,  563,  563,  269,  165,  166,  167,  563,
      563,  168,  158,  267,  268,  563,  270,  269,  158,  272,

      273,  563,  563,  274,  276,  277,  278,  563,  563,  279,
       88,  171,  172,  563,  563,  173,  563,  563,  563,  174,
       95,  281,  282,  563,  563,  283,   88,  171,  172,  563,
      284,  173,  563,  563,  563,  174,   88,  198,  199,  563,
      563,  200,  563,  563,  563,  201,  165,  286,  287,  563,
      563,  288,   88,   89,   90,  563,  563,   91,  563,  563,
      563,   92,   95,   96,   97,  563,  563,   98,   88,   89,
       90,  563,   99,   91,  563,  563,  563,   92,  158,  291,
      292,  563,  563,  293,  563,  563,  563,  294,  165,  296,
      297,  563,  563,  298,  563,  563,  563,  299,  158,  291,

      292,  563,  300,  293,  563,  563,  563,  294,  158,  302,
      303,  563,  563,  304,  563,  563,  563,  305,  158,  307,
      308,  563,  563,  309,  563,  563,  563,  310,  186,  312,
      313,  563,  563,  314,  563,  563,  563,  315,   88,  198,
      199,  563,  563,  200,  563,  563,  563,  201,   95,  317,
      318,  563,  563,  319,  563,  563,  563,  320,   88,  323,
      324,  563,  563,  325,  563,  563,  563,  326,   95,  328,
      329,  563,  563,  330,  563,  563,  563,  331,   88,  323,
      324,  563,  563,  325,  563,  563,  563,  326,   45,  236,
      233,  563,  563,  563,  563,  563,  563,  237,  245,  563,

      563,  563,  333,  563,  563,  245,  245,  245,  563,  563,
      334,  251,  563,  563,  563,  335,  563,  563,  251,  251,
      251,  563,  563,  336,  214,  215,   41,  563,  563,  563,
      563,  563,  563,  563,   42,  563,  216,  217,   39,  563,
      563,  563,  563,  563,  563,  563,   39,  563,  218,  220,
      338,   77,  563,  563,  563,  563,  563,  563,  563,   78,
      563,  339,   39,   49,   41,  214,  341,   79,  563,  563,
      563,  563,  563,  563,  563,   79,  563,  342,  214,  215,
       41,  563,  563,  563,  563,  563,  563,  563,   42,  563,
      216,  217,   39,  563,  563,  563,  563,  563,  563,  563,

       39,  563,  218,  220,  338,   77,  563,  563,  563,  563,
      563,  563,  563,   78,  563,  339,   39,   49,   41,  343,
      563,  563,  214,  344,  125,  343,  343,  343,  343,  343,
      343,  345,  126,  343,  346,  347,  563,  563,  220,  348,
      130,  347,  347,  347,  347,  347,  347,  349,  131,  347,
      350,  351,  563,  563,  214,  352,  138,  351,  351,  351,
      351,  351,  351,  353,  139,  351,  354,   39,  133,  125,
      563,  563,  563,  563,  563,  563,  135,  227,  563,  563,
      110,  228,   72,  227,  227,  227,  227,  227,  227,  229,
       73,  227,  230,  355,  563,  563,  116,  356,  147,  355,

      355,  355,  355,  355,  355,  357,  148,  355,  358,  107,
       72,  563,  563,  563,  563,  563,  563,  108,  359,  563,
      563,   39,  360,  361,  362,  359,  359,  359,  362,  362,
      363,  362,  362,  362,  231,  563,  563,   45,  232,  233,
      234,  231,  231,  231,  234,  234,  235,  234,  234,  234,
      362,  563,  563,  563,  364,  563,  563,  365,  362,  362,
      563,  563,  366,  367,  563,  563,   39,  368,  369,  370,
      367,  367,  367,  370,  370,  371,  370,  370,  370,   45,
      236,  233,  563,  563,  563,  563,  563,  563,  237,  370,
      563,  563,  563,  372,  563,  563,  370,  370,  370,  563,

      563,  373,  165,  375,  376,  563,  563,  377,  563,  563,
      563,  378,  158,  307,  308,  563,  563,  309,  563,  563,
      563,  310,  242,  563,  563,  563,  243,  563,  563,  242,
      242,  242,  563,  563,  246,   83,  381,  382,  563,  563,
      563,  563,  563,  563,  383,  136,  563,  563,  563,  137,
      563,  563,  136,  136,  136,  563,  563,  140,   95,  328,
      329,  563,  563,  330,  563,  563,  563,  331,  158,  267,
      268,  563,  563,  269,  165,  166,  167,  563,  563,  168,
      158,  267,  268,  563,  270,  269,  158,  261,  563,  563,
      563,  262,  158,  261,  563,  563,  563,  262,  158,  385,

      563,  563,  563,  386,  158,  264,  563,  563,  563,  265,
      158,  385,  563,  563,  563,  386,  158,  264,  563,  563,
      563,  265,  165,  166,  167,  563,  563,  168,  158,  272,
      273,  563,  563,  274,  276,  388,  389,  563,  563,  390,
      158,  272,  273,  563,  563,  274,  165,  286,  287,  563,
      563,  288,  158,  159,  160,  563,  563,  161,  158,  159,
      160,  563,  169,  161,  158,  182,  183,  563,  563,  184,
      158,  182,  183,  563,  563,  184,  165,  393,  394,  563,
      563,  395,  186,  397,  398,  563,  563,  399,  563,  563,
      563,  400,  165,  286,  287,  563,  563,  288,  276,  402,

      403,  563,  563,  404,  165,  375,  376,  563,  563,  377,
      563,  563,  563,  378,  158,  302,  303,  563,  563,  304,
      563,  563,  563,  305,  158,  302,  303,  563,  563,  304,
      563,  563,  563,  305,  276,  406,  407,  563,  563,  408,
      563,  563,  563,  409,  165,  411,  412,  563,  563,  413,
      563,  563,  563,  414,  158,  417,  418,  563,  563,  419,
      563,  563,  563,  420,  165,  422,  423,  563,  563,  424,
      563,  563,  563,  425,  158,  417,  418,  563,  563,  419,
      563,  563,  563,  420,   88,  101,  102,  563,  563,  103,
      563,  563,  563,  104,   95,  192,  193,  563,  563,  194,

      563,  563,  563,  195,   88,  101,  102,  563,  196,  103,
      563,  563,  563,  104,   88,  198,  199,  563,  563,  200,
      563,  563,  563,  201,  165,  428,  429,  563,  563,  430,
      563,  563,  563,  431,  186,  433,  434,  563,  563,  435,
      563,  563,  563,  436,   88,  323,  324,  563,  563,  325,
      563,  563,  563,  326,   95,  438,  439,  563,  563,  440,
      563,  563,  563,  441,   88,  323,  324,  563,  442,  325,
      563,  563,  563,  326,  165,  444,  445,  563,  563,  446,
      563,  563,  563,  447,  186,  449,  450,  563,  563,  451,
      563,  563,  563,  452,   45,  333,  244,  563,  563,  563,

      563,  563,  563,  334,   39,  372,  369,  563,  563,  563,
      563,  563,  563,  373,   45,  333,  244,  563,  563,  563,
      563,  563,  563,  334,   39,  209,  138,  563,  563,  563,
      563,  563,  563,  210,  214,  454,  153,  563,  563,  563,
      563,  563,  563,  563,  154,  563,  455,  220,  338,   77,
      563,  563,  563,  563,  563,  563,  563,   78,  563,  339,
       39,  155,  153,  214,  341,   79,  563,  563,  563,  563,
      563,  563,  563,   79,  563,  342,  214,  341,   79,  563,
      563,  563,  563,  563,  563,  563,   79,  563,  342,  343,
      563,  563,  214,  344,  125,  343,  343,  343,  343,  343,

      343,  345,  126,  343,  346,  456,  563,  563,  220,  457,
      233,  456,  456,  456,  456,  456,  456,  458,  234,  456,
      459,  351,  563,  563,  214,  352,  138,  351,  351,  351,
      351,  351,  351,  353,  139,  351,  354,   39,  133,  125,
      563,  563,  563,  563,  563,  563,  135,   39,  133,  125,
      563,  563,  563,  563,  563,  563,  135,  460,  563,  563,
      220,  461,  244,  460,  460,  460,  460,  460,  460,  462,
      245,  460,  463,   39,  209,  138,  563,  563,  563,  563,
      563,  563,  210,  464,  563,  563,  220,  465,  250,  464,
      464,  464,  464,  464,  464,  466,  251,  464,  467,  359,

      563,  563,   39,  360,  361,  362,  359,  359,  359,  362,
      362,  363,  362,  362,  362,  231,  563,  563,   45,  232,
      233,  234,  231,  231,  231,  234,  234,  235,  234,  234,
      234,  362,  563,  563,  563,  364,  563,  563,  365,  362,
      362,  563,  563,  366,  367,  563,  563,   39,  368,  369,
      370,  367,  367,  367,  370,  370,  371,  370,  370,  370,
      234,  563,  563,  563,  236,  563,  563,  234,  234,  234,
      563,  563,  237,   83,  469,  470,  563,  563,  563,  563,
      563,  563,  471,   39,  372,  369,  563,  563,  563,  563,
      563,  563,  373,  242,  563,  563,  563,  243,  563,  563,

      242,  242,  242,  563,  563,  246,  158,  473,  474,  563,
      563,  475,  563,  563,  563,  476,  158,  473,  474,  563,
      477,  475,  563,  563,  563,  476,  158,  479,  480,  563,
      563,  481,  563,  563,  563,  482,  158,  484,  485,  563,
      563,  486,  563,  563,  563,  487,   83,  489,  490,  563,
      563,  563,  563,  563,  563,  491,  165,  422,  423,  563,
      563,  424,  563,  563,  563,  425,  158,  385,  563,  563,
      563,  386,  158,  385,  563,  563,  563,  386,  158,  267,
      268,  563,  563,  269,  165,  166,  167,  563,  563,  168,
      158,  267,  268,  563,  270,  269,  158,  272,  273,  563,

      563,  274,  276,  493,  494,  563,  563,  495,  158,  182,
      183,  563,  563,  184,  165,  286,  287,  563,  563,  288,
      158,  182,  183,  563,  289,  184,   88,  171,  172,  563,
      563,  173,  563,  563,  563,  174,   95,  281,  282,  563,
      563,  283,   88,  171,  172,  563,  284,  173,  563,  563,
      563,  174,   88,  198,  199,  563,  563,  200,  563,  563,
      563,  201,  165,  286,  287,  563,  563,  288,  158,  291,
      292,  563,  563,  293,  563,  563,  563,  294,  158,  291,
      292,  563,  300,  293,  563,  563,  563,  294,  158,  302,
      303,  563,  563,  304,  563,  563,  563,  305,  158,  479,

      480,  563,  563,  481,  563,  563,  563,  482,  165,  411,
      412,  563,  563,  413,  563,  563,  563,  414,  158,  498,
      499,  563,  563,  500,  563,  563,  563,  501,  276,  503,
      504,  563,  563,  505,  563,  563,  563,  506,  158,  417,
      418,  563,  563,  419,  563,  563,  563,  420,  165,  508,
      509,  563,  563,  510,  563,  563,  563,  511,  158,  417,
      418,  563,  512,  419,  563,  563,  563,  420,  158,  484,
      485,  563,  563,  486,  563,  563,  563,  487,  158,  498,
      499,  563,  563,  500,  563,  563,  563,  501,  276,  515,
      516,  563,  563,  517,  563,  563,  563,  518,  158,  302,

      303,  563,  563,  304,  563,  563,  563,  305,  165,  411,
      412,  563,  563,  413,  563,  563,  563,  414,   88,  198,
      199,  563,  563,  200,  563,  563,  563,  201,   95,  317,
      318,  563,  563,  319,  563,  563,  563,  320,   88,  323,
      324,  563,  563,  325,  563,  563,  563,  326,  165,  520,
      521,  563,  563,  522,  563,  563,  563,  523,  186,  525,
      526,  563,  563,  527,  563,  563,  563,  528,   88,  203,
      204,  563,  563,  205,  563,  563,  563,  206,   95,  328,
      329,  563,  563,  330,  563,  563,  563,  331,   88,  203,
      204,  563,  332,  205,  563,  563,  563,  206,   88,  323,

      324,  563,  563,  325,  563,  563,  563,  326,  214,  454,
      153,  563,  563,  563,  563,  563,  563,  563,  154,  563,
      455,  220,  338,   77,  563,  563,  563,  563,  563,  563,
      563,   78,  563,  339,   39,  155,  153,  529,  563,  563,
      214,  530,  361,  529,  529,  529,  529,  529,  529,  531,
      362,  529,  532,  456,  563,  563,  220,  457,  233,  456,
      456,  456,  456,  456,  456,  458,  234,  456,  459,  533,
      563,  563,  214,  534,  369,  533,  533,  533,  533,  533,
      533,  535,  370,  533,  536,   39,  364,  361,  563,  563,
      563,  563,  563,  563,  366,  460,  563,  563,  220,  461,

      244,  460,  460,  460,  460,  460,  460,  462,  245,  460,
      463,   39,  372,  369,  563,  563,  563,  563,  563,  563,
      373,  351,  563,  563,  214,  352,  138,  351,  351,  351,
      351,  351,  351,  353,  139,  351,  354,   39,  209,  138,
      563,  563,  563,  563,  563,  563,  210,  158,  473,  474,
      563,  563,  475,  563,  563,  563,  476,  158,  473,  474,
      563,  477,  475,  563,  563,  563,  476,  276,  538,  539,
      563,  563,  540,  563,  563,  563,  541,  158,  272,  273,
      563,  563,  274,  158,  272,  273,  563,  391,  274,  276,
      543,  544,  563,  563,  545,  563,  563,  563,  546,  165,

      508,  509,  563,  563,  510,  563,  563,  563,  511,  276,
      549,  550,  563,  563,  551,  563,  563,  563,  552,  276,
      554,  555,  563,  563,  556,  563,  563,  563,  557,   95,
      438,  439,  563,  563,  440,  563,  563,  563,  441,   39,
      364,  361,  563,  563,  563,  563,  563,  563,  366,   39,
      372,  369,  563,  563,  563,  563,  563,  563,  373,  276,
      559,  560,  563,  563,  561,  563,  563,  563,  562,   19,
      563,  563,   19,   39,  563,   39,   39,   52,  563,   52,
       52,   79,  563,   79,   79,   82,  563,   82,   82,   87,
      563,   87,   87,   88,  563,   88,   88,   94,  563,   94,

       94,  100,  563,  100,  100,  110,  563,  110,  115,  563,
      115,  115,  141,  563,  141,  141,  157,  563,  157,  157,
      158,  563,  158,  158,  164,  563,  164,  164,  170,  563,
      170,  170,  175,  563,  175,  175,  177,  563,  177,  177,
      181,  563,  181,  181,  185,  563,  185,  185,  191,  563,
      191,  191,  197,  563,  197,  197,  202,  563,  202,  202,
      213,  563,  213,  213,  214,  563,  214,  214,  219,  563,
      219,  219,   42,  563,   42,   42,   36,  563,  563,   36,
      238,  563,  238,  238,  253,  563,  253,  253,  257,  563,
      257,  257,  164,  563,  164,  164,  260,  563,  260,  260,

      263,  563,  263,  263,  266,  563,  266,  266,  271,  563,
      271,  271,  275,  563,  275,  275,  170,  563,  170,  170,
      280,  563,  280,  280,  197,  563,  197,  197,  175,  563,
      175,  175,  285,  563,  285,  285,   87,  563,   87,   87,
       88,  563,   88,   88,   94,  563,   94,   94,  290,  563,
      290,  290,  295,  563,  295,  295,  301,  563,  301,  301,
      306,  563,  306,  306,  311,  563,  311,  311,  316,  563,
      316,  316,  322,  563,  322,  322,  327,  563,  327,  327,
      234,  563,  234,  234,  213,  563,  213,  213,  214,  563,
      214,  214,  337,  563,  337,  337,   42,  563,   42,   42,

      340,  563,  340,  340,   39,  563,   39,   39,  126,  563,
      126,  126,   73,  563,  563,   73,  374,  563,  374,  374,
      380,  563,  380,  380,  266,  563,  266,  266,  164,  563,
      164,  164,  260,  563,  260,  260,  384,  563,  384,  384,
      263,  563,  263,  263,  271,  563,  271,  271,  387,  563,
      387,  387,  285,  563,  285,  285,  157,  563,  157,  157,
      158,  563,  158,  158,  181,  563,  181,  181,  392,  563,
      392,  392,  396,  563,  396,  396,  401,  563,  401,  401,
      301,  563,  301,  301,  405,  563,  405,  405,  410,  563,
      410,  410,  416,  563,  416,  416,  421,  563,  421,  421,

      100,  563,  100,  100,  191,  563,  191,  191,  197,  563,
      197,  197,  427,  563,  427,  427,  432,  563,  432,  432,
      322,  563,  322,  322,  437,  563,  437,  437,  443,  563,
      443,  443,  448,  563,  448,  448,  245,  563,  245,  245,
      370,  563,  370,  370,  139,  563,  139,  139,  453,  563,
      453,  453,  337,  563,  337,  337,  154,  563,  154,  154,
      340,  563,  340,  340,   79,  563,   79,   79,  126,  563,
      126,  126,  468,  563,  468,  468,  472,  563,  472,  472,
      478,  563,  478,  478,  483,  563,  483,  483,  488,  563,
      488,  488,  384,  563,  384,  384,  266,  563,  266,  266,

      164,  563,  164,  164,  271,  563,  271,  271,  492,  563,
      492,  492,  181,  563,  181,  181,  285,  563,  285,  285,
      170,  563,  170,  170,  280,  563,  280,  280,  197,  563,
      197,  197,  290,  563,  290,  290,  301,  563,  301,  301,
      410,  563,  410,  410,  497,  563,  497,  497,  502,  563,
      502,  502,  416,  563,  416,  416,  507,  563,  507,  507,
      514,  563,  514,  514,  316,  563,  316,  316,  322,  563,
      322,  322,  519,  563,  519,  519,  524,  563,  524,  524,
      202,  563,  202,  202,  327,  563,  327,  327,  453,  563,
      453,  453,  337,  563,  337,  337,  154,  563,  154,  154,

      362,  563,  362,  362,  370,  563,  370,  370,  139,  563,
      139,  139,  472,  563,  472,  472,  537,  563,  537,  537,
      271,  563,  271,  271,  542,  563,  542,  542,  548,  563,
      548,  548,  553,  563,  553,  553,  437,  563,  437,  437,
      558,  563,  558,  558,    3,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563
    } ;

static const flex_int16_t yy_chk[3362] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    4,   43,   43,  560,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    7,   79,   79,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    8,    8,
       12,    8,   80,   80,  555,   12,    8,    8,    9,    9,
       83,   95,  552,   93,   83,   95,    9,   13,   93,  342,
      342,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   21,  551,  548,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   23,

      544,  537,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   24,  158,  165,  526,   24,
      158,  165,   24,   24,   24,  175,  176,   24,   26,  276,
      175,  176,   26,  276,  523,   26,   26,   26,  522,  519,
       26,   27,   27,   27,  517,  516,  509,  506,  504,  499,
       27,   28,  495,  490,  485,   28,  480,  472,   28,   28,
       28,  452,  446,   28,   29,  445,  441,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       34,  440,  437,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   37,  434,  431,  429,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   40,  423,  420,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   49,  419,
      412,  404,   49,  401,  399,   49,   49,   49,  395,  382,
       49,   50,   50,   50,   51,  369,  362,  329,   51,  326,
      325,   51,   51,   51,  318,  308,   51,   52,   52,   52,
      303,  295,   52,  290,  287,  282,   52,   54,   54,   54,
      273,  266,   54,   55,   55,   55,  255,   55,   55,  250,
      244,  238,   55,   56,   56,   56,  234,  218,   56,  204,
      199,  189,   56,   57,  186,  183,  177,   57,  173,  157,

       57,   57,   57,  154,  147,   57,   58,  143,  138,  131,
       58,  126,  110,   58,   58,   58,  102,   94,   58,   59,
       88,   87,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   61,   61,   61,   78,   72,
       67,   60,   53,   48,   45,   61,   42,   61,   62,   39,
       35,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   64,   32,   25,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       65,   22,   18,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   66,   10,    3,    0,

       66,    0,    0,   66,   66,   66,    0,    0,   66,   68,
        0,    0,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   69,   69,   69,    0,    0,
        0,    0,    0,    0,   69,   71,    0,    0,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   75,    0,    0,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   77,    0,    0,
        0,   77,    0,    0,   77,   77,   77,    0,    0,   77,
       82,   82,   82,    0,    0,   82,   84,   84,   84,    0,
        0,   84,   85,   85,   85,    0,   85,   85,   89,   89,

       89,    0,    0,   89,   91,   91,   91,    0,    0,   91,
        0,    0,    0,   91,   92,   92,   92,    0,    0,   92,
        0,    0,    0,   92,   96,   96,   96,    0,    0,   96,
       98,   98,   98,    0,    0,   98,   99,   99,   99,    0,
        0,   99,    0,    0,    0,   99,  101,  101,  101,    0,
        0,  101,    0,    0,    0,  101,  103,  103,  103,    0,
        0,  103,    0,    0,    0,  103,  104,  104,  104,    0,
        0,  104,    0,    0,    0,  104,  105,    0,    0,    0,
      105,    0,    0,  105,  105,  105,    0,    0,  105,  106,
        0,    0,    0,  106,    0,    0,  106,  106,  106,    0,

        0,  106,  107,    0,    0,    0,  107,    0,    0,  107,
      107,  107,    0,    0,  107,  111,  111,  111,    0,    0,
        0,    0,    0,    0,    0,  111,    0,  111,  115,  115,
      115,    0,    0,    0,    0,    0,    0,    0,  115,    0,
      115,  116,  116,    0,    0,    0,    0,    0,    0,    0,
      116,    0,  116,  117,  117,  117,    0,    0,    0,    0,
        0,    0,    0,  117,    0,  117,  118,  118,  118,  120,
        0,    0,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  121,    0,    0,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,

      121,  122,  122,    0,    0,    0,    0,    0,    0,  122,
      124,    0,    0,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  133,    0,    0,    0,
      133,    0,    0,  133,  133,  133,    0,    0,  133,  134,
      134,  134,    0,    0,    0,    0,    0,    0,  134,  137,
        0,    0,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  142,  142,  142,    0,    0,
      142,    0,    0,    0,  142,  144,  144,  144,    0,    0,
      144,    0,    0,    0,  144,  146,    0,    0,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,

      146,  150,  150,  150,    0,    0,    0,    0,    0,    0,
      150,  151,    0,    0,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  152,    0,    0,
        0,  152,    0,    0,  152,  152,  152,    0,    0,  152,
      153,    0,    0,    0,  153,    0,    0,  153,  153,  153,
        0,    0,  153,  156,  156,  156,  159,  159,  159,    0,
        0,  159,  161,  161,  161,    0,    0,  161,  162,  162,
        0,    0,    0,  162,  163,  163,    0,    0,    0,  163,
      164,  164,  164,    0,    0,  164,  166,  166,  166,    0,
        0,  166,  167,  167,  167,    0,  167,  167,  168,  168,

      168,    0,    0,  168,  169,  169,  169,    0,    0,  169,
      170,  170,  170,    0,    0,  170,    0,    0,    0,  170,
      171,  171,  171,    0,    0,  171,  172,  172,  172,    0,
      172,  172,    0,    0,    0,  172,  174,  174,  174,    0,
        0,  174,    0,    0,    0,  174,  182,  182,  182,    0,
        0,  182,  185,  185,  185,    0,    0,  185,    0,    0,
        0,  185,  187,  187,  187,    0,    0,  187,  188,  188,
      188,    0,  188,  188,    0,    0,    0,  188,  191,  191,
      191,    0,    0,  191,    0,    0,    0,  191,  192,  192,
      192,    0,    0,  192,    0,    0,    0,  192,  193,  193,

      193,    0,  193,  193,    0,    0,    0,  193,  194,  194,
      194,    0,    0,  194,    0,    0,    0,  194,  195,  195,
      195,    0,    0,  195,    0,    0,    0,  195,  196,  196,
      196,    0,    0,  196,    0,    0,    0,  196,  197,  197,
      197,    0,    0,  197,    0,    0,    0,  197,  198,  198,
      198,    0,    0,  198,    0,    0,    0,  198,  201,  201,
      201,    0,    0,  201,    0,    0,    0,  201,  203,  203,
      203,    0,    0,  203,    0,    0,    0,  203,  205,  205,
      205,    0,    0,  205,    0,    0,    0,  205,  207,  207,
      207,    0,    0,    0,    0,    0,    0,  207,  209,    0,

        0,    0,  209,    0,    0,  209,  209,  209,    0,    0,
      209,  211,    0,    0,    0,  211,    0,    0,  211,  211,
      211,    0,    0,  211,  213,  213,  213,    0,    0,    0,
        0,    0,    0,    0,  213,    0,  213,  214,  214,    0,
        0,    0,    0,    0,    0,    0,  214,    0,  214,  215,
      215,  215,    0,    0,    0,    0,    0,    0,    0,  215,
        0,  215,  216,  216,  216,  217,  217,  217,    0,    0,
        0,    0,    0,    0,    0,  217,    0,  217,  219,  219,
      219,    0,    0,    0,    0,    0,    0,    0,  219,    0,
      219,  220,  220,    0,    0,    0,    0,    0,    0,    0,

      220,    0,  220,  221,  221,  221,    0,    0,    0,    0,
        0,    0,    0,  221,    0,  221,  222,  222,  222,  223,
        0,    0,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  224,    0,    0,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  225,    0,    0,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  226,  226,  226,
        0,    0,    0,    0,    0,    0,  226,  227,    0,    0,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  228,    0,    0,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  230,
      230,    0,    0,    0,    0,    0,    0,  230,  231,    0,
        0,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  232,    0,    0,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      233,    0,    0,    0,  233,    0,    0,  233,  233,  233,
        0,    0,  233,  235,    0,    0,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  236,
      236,  236,    0,    0,    0,    0,    0,    0,  236,  237,
        0,    0,    0,  237,    0,    0,  237,  237,  237,    0,

        0,  237,  239,  239,  239,    0,    0,  239,    0,    0,
        0,  239,  241,  241,  241,    0,    0,  241,    0,    0,
        0,  241,  243,    0,    0,    0,  243,    0,    0,  243,
      243,  243,    0,    0,  243,  247,  247,  247,    0,    0,
        0,    0,    0,    0,  247,  248,    0,    0,    0,  248,
        0,    0,  248,  248,  248,    0,    0,  248,  254,  254,
      254,    0,    0,  254,    0,    0,    0,  254,  257,  257,
      257,    0,    0,  257,  258,  258,  258,    0,    0,  258,
      259,  259,  259,    0,  259,  259,  260,  260,    0,    0,
        0,  260,  261,  261,    0,    0,    0,  261,  262,  262,

        0,    0,    0,  262,  263,  263,    0,    0,    0,  263,
      264,  264,    0,    0,    0,  264,  265,  265,    0,    0,
        0,  265,  267,  267,  267,    0,    0,  267,  269,  269,
      269,    0,    0,  269,  270,  270,  270,    0,    0,  270,
      271,  271,  271,    0,    0,  271,  272,  272,  272,    0,
        0,  272,  275,  275,  275,    0,    0,  275,  278,  278,
      278,    0,  278,  278,  279,  279,  279,    0,    0,  279,
      280,  280,  280,    0,    0,  280,  281,  281,  281,    0,
        0,  281,  284,  284,  284,    0,    0,  284,    0,    0,
        0,  284,  286,  286,  286,    0,    0,  286,  289,  289,

      289,    0,    0,  289,  291,  291,  291,    0,    0,  291,
        0,    0,    0,  291,  293,  293,  293,    0,    0,  293,
        0,    0,    0,  293,  298,  298,  298,    0,    0,  298,
        0,    0,    0,  298,  300,  300,  300,    0,    0,  300,
        0,    0,    0,  300,  302,  302,  302,    0,    0,  302,
        0,    0,    0,  302,  305,  305,  305,    0,    0,  305,
        0,    0,    0,  305,  307,  307,  307,    0,    0,  307,
        0,    0,    0,  307,  309,  309,  309,    0,    0,  309,
        0,    0,    0,  309,  311,  311,  311,    0,    0,  311,
        0,    0,    0,  311,  312,  312,  312,    0,    0,  312,

        0,    0,    0,  312,  313,  313,  313,    0,  313,  313,
        0,    0,    0,  313,  314,  314,  314,    0,    0,  314,
        0,    0,    0,  314,  317,  317,  317,    0,    0,  317,
        0,    0,    0,  317,  321,  321,  321,    0,    0,  321,
        0,    0,    0,  321,  322,  322,  322,    0,    0,  322,
        0,    0,    0,  322,  323,  323,  323,    0,    0,  323,
        0,    0,    0,  323,  324,  324,  324,    0,  324,  324,
        0,    0,    0,  324,  328,  328,  328,    0,    0,  328,
        0,    0,    0,  328,  332,  332,  332,    0,    0,  332,
        0,    0,    0,  332,  333,  333,  333,    0,    0,    0,

        0,    0,    0,  333,  334,  334,  334,    0,    0,    0,
        0,    0,    0,  334,  335,  335,  335,    0,    0,    0,
        0,    0,    0,  335,  336,  336,  336,    0,    0,    0,
        0,    0,    0,  336,  337,  337,  337,    0,    0,    0,
        0,    0,    0,    0,  337,    0,  337,  338,  338,  338,
        0,    0,    0,    0,    0,    0,    0,  338,    0,  338,
      339,  339,  339,  340,  340,  340,    0,    0,    0,    0,
        0,    0,    0,  340,    0,  340,  341,  341,  341,    0,
        0,    0,    0,    0,    0,    0,  341,    0,  341,  343,
        0,    0,  343,  343,  343,  343,  343,  343,  343,  343,

      343,  343,  343,  343,  343,  344,    0,    0,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  345,    0,    0,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  346,  346,  346,
        0,    0,    0,    0,    0,    0,  346,  350,  350,  350,
        0,    0,    0,    0,    0,    0,  350,  352,    0,    0,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  354,  354,  354,    0,    0,    0,    0,
        0,    0,  354,  356,    0,    0,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  359,

        0,    0,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  360,    0,    0,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  361,    0,    0,    0,  361,    0,    0,  361,  361,
      361,    0,    0,  361,  363,    0,    0,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      364,    0,    0,    0,  364,    0,    0,  364,  364,  364,
        0,    0,  364,  365,  365,  365,    0,    0,    0,    0,
        0,    0,  365,  366,  366,  366,    0,    0,    0,    0,
        0,    0,  366,  368,    0,    0,    0,  368,    0,    0,

      368,  368,  368,    0,    0,  368,  374,  374,  374,    0,
        0,  374,    0,    0,    0,  374,  376,  376,  376,    0,
      376,  376,    0,    0,    0,  376,  377,  377,  377,    0,
        0,  377,    0,    0,    0,  377,  378,  378,  378,    0,
        0,  378,    0,    0,    0,  378,  379,  379,  379,    0,
        0,    0,    0,    0,    0,  379,  381,  381,  381,    0,
        0,  381,    0,    0,    0,  381,  384,  384,    0,    0,
        0,  384,  385,  385,    0,    0,    0,  385,  387,  387,
      387,    0,    0,  387,  388,  388,  388,    0,    0,  388,
      389,  389,  389,    0,  389,  389,  390,  390,  390,    0,

        0,  390,  391,  391,  391,    0,    0,  391,  392,  392,
      392,    0,    0,  392,  393,  393,  393,    0,    0,  393,
      394,  394,  394,    0,  394,  394,  396,  396,  396,    0,
        0,  396,    0,    0,    0,  396,  397,  397,  397,    0,
        0,  397,  398,  398,  398,    0,  398,  398,    0,    0,
        0,  398,  400,  400,  400,    0,    0,  400,    0,    0,
        0,  400,  402,  402,  402,    0,    0,  402,  405,  405,
      405,    0,    0,  405,    0,    0,    0,  405,  407,  407,
      407,    0,  407,  407,    0,    0,    0,  407,  408,  408,
      408,    0,    0,  408,    0,    0,    0,  408,  410,  410,

      410,    0,    0,  410,    0,    0,    0,  410,  411,  411,
      411,    0,    0,  411,    0,    0,    0,  411,  414,  414,
      414,    0,    0,  414,    0,    0,    0,  414,  415,  415,
      415,    0,    0,  415,    0,    0,    0,  415,  416,  416,
      416,    0,    0,  416,    0,    0,    0,  416,  417,  417,
      417,    0,    0,  417,    0,    0,    0,  417,  418,  418,
      418,    0,  418,  418,    0,    0,    0,  418,  421,  421,
      421,    0,    0,  421,    0,    0,    0,  421,  424,  424,
      424,    0,    0,  424,    0,    0,    0,  424,  426,  426,
      426,    0,    0,  426,    0,    0,    0,  426,  427,  427,

      427,    0,    0,  427,    0,    0,    0,  427,  428,  428,
      428,    0,    0,  428,    0,    0,    0,  428,  432,  432,
      432,    0,    0,  432,    0,    0,    0,  432,  433,  433,
      433,    0,    0,  433,    0,    0,    0,  433,  436,  436,
      436,    0,    0,  436,    0,    0,    0,  436,  438,  438,
      438,    0,    0,  438,    0,    0,    0,  438,  442,  442,
      442,    0,    0,  442,    0,    0,    0,  442,  448,  448,
      448,    0,    0,  448,    0,    0,    0,  448,  449,  449,
      449,    0,    0,  449,    0,    0,    0,  449,  450,  450,
      450,    0,  450,  450,    0,    0,    0,  450,  451,  451,

      451,    0,    0,  451,    0,    0,    0,  451,  453,  453,
      453,    0,    0,    0,    0,    0,    0,    0,  453,    0,
      453,  454,  454,  454,    0,    0,    0,    0,    0,    0,
        0,  454,    0,  454,  455,  455,  455,  456,    0,    0,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  457,    0,    0,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  458,
        0,    0,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  459,  459,  459,    0,    0,
        0,    0,    0,    0,  459,  461,    0,    0,  461,  461,

      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  463,  463,  463,    0,    0,    0,    0,    0,    0,
      463,  464,    0,    0,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  467,  467,  467,
        0,    0,    0,    0,    0,    0,  467,  468,  468,  468,
        0,    0,  468,    0,    0,    0,  468,  470,  470,  470,
        0,  470,  470,    0,    0,    0,  470,  477,  477,  477,
        0,    0,  477,    0,    0,    0,  477,  492,  492,  492,
        0,    0,  492,  494,  494,  494,    0,  494,  494,  496,
      496,  496,    0,    0,  496,    0,    0,    0,  496,  498,

      498,  498,    0,    0,  498,    0,    0,    0,  498,  512,
      512,  512,    0,    0,  512,    0,    0,    0,  512,  513,
      513,  513,    0,    0,  513,    0,    0,    0,  513,  525,
      525,  525,    0,    0,  525,    0,    0,    0,  525,  532,
      532,  532,    0,    0,    0,    0,    0,    0,  532,  536,
      536,  536,    0,    0,    0,    0,    0,    0,  536,  547,
      547,  547,    0,    0,  547,    0,    0,    0,  547,  564,
        0,    0,  564,  565,    0,  565,  565,  566,    0,  566,
      566,  567,    0,  567,  567,  568,    0,  568,  568,  569,
        0,  569,  569,  570,    0,  570,  570,  571,    0,  571,

      571,  572,    0,  572,  572,  573,    0,  573,  574,    0,
      574,  574,  575,    0,  575,  575,  576,    0,  576,  576,
      577,    0,  577,  577,  578,    0,  578,  578,  579,    0,
      579,  579,  580,    0,  580,  580,  581,    0,  581,  581,
      582,    0,  582,  582,  583,    0,  583,  583,  584,    0,
      584,  584,  585,    0,  585,  585,  586,    0,  586,  586,
      587,    0,  587,  587,  588,    0,  588,  588,  589,    0,
      589,  589,  590,    0,  590,  590,  591,    0,    0,  591,
      592,    0,  592,  592,  593,    0,  593,  593,  594,    0,
      594,  594,  595,    0,  595,  595,  596,    0,  596,  596,

      597,    0,  597,  597,  598,    0,  598,  598,  599,    0,
      599,  599,  600,    0,  600,  600,  601,    0,  601,  601,
      602,    0,  602,  602,  603,    0,  603,  603,  604,    0,
      604,  604,  605,    0,  605,  605,  606,    0,  606,  606,
      607,    0,  607,  607,  608,    0,  608,  608,  609,    0,
      609,  609,  610,    0,  610,  610,  611,    0,  611,  611,
      612,    0,  612,  612,  613,    0,  613,  613,  614,    0,
      614,  614,  615,    0,  615,  615,  616,    0,  616,  616,
      617,    0,  617,  617,  618,    0,  618,  618,  619,    0,
      619,  619,  620,    0,  620,  620,  621,    0,  621,  621,

      622,    0,  622,  622,  623,    0,  623,  623,  624,    0,
      624,  624,  625,    0,    0,  625,  626,    0,  626,  626,
      627,    0,  627,  627,  628,    0,  628,  628,  629,    0,
      629,  629,  630,    0,  630,  630,  631,    0,  631,  631,
      632,    0,  632,  632,  633,    0,  633,  633,  634,    0,
      634,  634,  635,    0,  635,  635,  636,    0,  636,  636,
      637,    0,  637,  637,  638,    0,  638,  638,  639,    0,
      639,  639,  640,    0,  640,  640,  641,    0,  641,  641,
      642,    0,  642,  642,  643,    0,  643,  643,  644,    0,
      644,  644,  645,    0,  645,  645,  646,    0,  646,  646,

      647,    0,  647,  647,  648,    0,  648,  648,  649,    0,
      649,  649,  650,    0,  650,  650,  651,    0,  651,  651,
      652,    0,  652,  652,  653,    0,  653,  653,  654,    0,
      654,  654,  655,    0,  655,  655,  656,    0,  656,  656,
      657,    0,  657,  657,  658,    0,  658,  658,  659,    0,
      659,  659,  660,    0,  660,  660,  661,    0,  661,  661,
      662,    0,  662,  662,  663,    0,  663,  663,  664,    0,
      664,  664,  665,    0,  665,  665,  666,    0,  666,  666,
      667,    0,  667,  667,  668,    0,  668,  668,  669,    0,
      669,  669,  670,    0,  670,  670,  671,    0,  671,  671,

      672,    0,  672,  672,  673,    0,  673,  673,  674,    0,
      674,  674,  675,    0,  675,  675,  676,    0,  676,  676,
      677,    0,  677,  677,  678,    0,  678,  678,  679,    0,
      679,  679,  680,    0,  680,  680,  681,    0,  681,  681,
      682,    0,  682,  682,  683,    0,  683,  683,  684,    0,
      684,  684,  685,    0,  685,  685,  686,    0,  686,  686,
      687,    0,  687,  687,  688,    0,  688,  688,  689,    0,
      689,  689,  690,    0,  690,  690,  691,    0,  691,  691,
      692,    0,  692,  692,  693,    0,  693,  693,  694,    0,
      694,  694,  695,    0,  695,  695,  696,    0,  696,  696,

      697,    0,  697,  697,  698,    0,  698,  698,  699,    0,
      699,  699,  700,    0,  700,  700,  701,    0,  701,  701,
      702,    0,  702,  702,  703,    0,  703,  703,  704,    0,
      704,  704,  705,    0,  705,  705,  706,    0,  706,  706,
      707,    0,  707,  707,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[17] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
/*
 *
 * CS-252 
 * shell.l: lexical analyzer for shell
 * You have to extend it.
 *
 */
#line 11 "shell.l"

#include <cstring>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include "y.tab.hh"
/*
#include <string.h>
#include "y.tab.h"

////////////  Start added code ///////////


extern “C” char * read_line();

int mygetc(FILE * f) {
  static char *p;
  char ch;

     if (!isatty(0)) {
  // stdin is not a tty. Call real getc
    return getc(f);
  }

  // stdin is a tty. Call our read_line.
  if (p==NULL || *p == 0) {
    char * s = read_line();
    p = s;
  }

  ch = *p;
  p++;

  return ch;
}

#undef getc
#define getc(f) mygetc(f)

/////////// End added code ///////////*/

#define MAX_INCLUDE_DEPTH 10
YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

static  void yyunput (int c,char *buf_ptr  );

char *getenv(const char *name);

void myunputc(int c) {
  unput(c);
}

void remove_character(char* s, char c) {
  int j, n = strlen(s);
  int escaped = 0; 

  for (int i = j = 0; i < n; i++) {
    if (s[i] != c || escaped) {
      s[j++] = s[i];
      escaped = 0;
    } else {
      escaped = 1;
    }
  }   

  s[j] = '\0';
}

/*void source(char *s) {
  FILE *yyin = fopen(s, "r");

  if (!yyin) {
    fprintf( stderr, "No File" );
  } else {
    yypush_buffer_state( yy_create_buffer( yyin, YY_BUF_SIZE ) );
    yyparse();
    fclose(yyin);
  }
}*/

void removeStartAndEnd(char* s) {
  int j, n = strlen(s);

  s[0] = '\0';
  for (int i = 1; i < n; i++) {
    s[i - 1] = s[i];
  }   
  s[n - 2] = '\0';
}

#line 1525 "lex.yy.cc"
#line 1526 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 106 "shell.l"


#line 1746 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 564 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3345 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 108 "shell.l"
{
  return NEWLINE;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 112 "shell.l"
{
  /* Discard spaces and tabs */
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 116 "shell.l"
{
  return GREAT;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 120 "shell.l"
{
  return GREATGREAT;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 124 "shell.l"
{
  return LESS;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 128 "shell.l"
{
  return PIPE;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 132 "shell.l"
{
  return AMPERSAND;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 136 "shell.l"
{
  return TWOGREAT;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 140 "shell.l"
{
  return GREATAMPERSAND;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 144 "shell.l"
{
  return GREATGREATAMPERSAND;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 148 "shell.l"
{ 
  remove_character(yytext, '$');
  remove_character(yytext, '(');
  remove_character(yytext, ')');

  int pin[2], pout[2];
  pipe(pin); pipe(pout);

  int ret = fork();
  if (ret == 0) {
      close(pin[1]);
      close(pout[0]);

      dup2(pin[0], 0);
      close(pin[0]);

      dup2(pout[1], 1);
      close(pout[1]);
      
      // Execute shell executable
      execvp("/proc/self/exe", NULL);
      perror("Error in Child Process");
      exit(1);
  } else if (ret < 0) {
      perror("Error Forking Child");
      exit(1);
  }

  close(pin[0]);
  close(pout[1]);

  write(pin[1], strcat(yytext, "\n"), strlen(yytext) + 1);
  write(pin[1], "exit\n", 6);
  close(pin[1]);
  
  int size = 1024;
  char* buffer = (char*) malloc(sizeof(char) * size);
  char* iterator = buffer;
  int n = read(pout[0], iterator++, 1);
  while (n > 0) {
    n = read(pout[0], iterator++, 1);
    if (strlen(buffer) == size) {
      size = size * 2;
      realloc(buffer, size);
    }
  }

  *iterator = '\0';
  close(pout[0]);

  for (int i = strlen(buffer) - 1; i >= 0; i--) {
    char c = ' ';
    if (buffer[i] == '\n') {
      myunputc(' ');
    } else {
      myunputc(buffer[i]);
    }
  }
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 208 "shell.l"
{ 
  remove_character(yytext, '\\');
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 214 "shell.l"
{
  remove_character(yytext, '$');
  remove_character(yytext, '{');
  remove_character(yytext, '}');

  int size = 1024;
  char* buffer = (char*) malloc(sizeof(char) * size);

  // Env Variable Expansion
  buffer = getenv(yytext);

  if (buffer) {
    for (int i = strlen(buffer) - 1; i >= 0; i--) {
      char c = ' ';
      if (buffer[i] == '\n') {
        myunputc(' ');
      } else {
        myunputc(buffer[i]);
      }
    }
  }

  free(buffer);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 239 "shell.l"
{
  removeStartAndEnd(yytext);
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 245 "shell.l"
{
  /* Assume that file names have only alpha chars */
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 250 "shell.l"
ECHO;
	YY_BREAK
#line 2007 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 564 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 564 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 563);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 250 "shell.l"
