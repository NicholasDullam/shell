#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 17
#define YY_END_OF_BUFFER 18
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1339] =
    {   0,
        0,    0,   18,   16,    2,    1,   16,   17,    7,   16,
        5,    3,   13,   17,    6,   12,   16,   16,    0,    0,
       13,    0,   16,    0,   16,    0,    0,    0,    0,    0,
        0,   13,    0,    0,   13,    8,    9,    4,   13,   13,
       13,   13,   13,   13,   12,   12,   12,   12,   16,    0,
       15,    0,    0,    0,   15,   16,    0,   15,    0,    0,
        0,   15,    0,    0,    0,   15,    0,    0,    0,    0,
        0,    0,   13,   13,   13,   13,    0,    0,    0,   13,
        0,   13,   13,   10,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   15,   15,   15,
       15,   15,   15,   15,   15,   15,    0,    0,   15,    0,
        0,   15,    0,   15,   15,    0,    0,    0,    0,    0,
       11,   13,   11,    0,    0,    0,    0,   11,    0,   13,
       13,   13,   11,   13,   13,   13,   13,   13,   13,   13,
        0,    0,    0,   13,   14,    0,    0,    0,   14,    0,
       13,   13,   13,   13,   13,   15,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,    0,
        0,   15,    0,   11,   15,   11,   15,    0,   15,   15,
       11,    0,    0,   15,    0,   14,   15,   15,   15,   14,
        0,   11,   11,   11,   11,   11,   11,   11,    0,   15,
        0,   11,   11,   11,   11,   11,    0,    0,    0,    0,
       11,   13,   13,   13,   13,   11,   13,   13,   11,   11,
       11,   11,   11,   13,   13,   13,   11,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   14,   14,   13,
        0,   15,    0,   14,   14,   14,    0,    0,    0,   13,
       14,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   15,
       15,   15,   15,   15,   15,   15,   15,   11,   11,   11,
       11,   15,   15,   15,   11,   15,   11,   11,   11,   11,
        0,    0,   15,    0,   11,   15,   15,   15,   14,   15,
       14,   14,    0,   15,    0,   14,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   13,   13,   13,   11,
       13,   13,   13,   13,   11,   13,   13,   11,   11,   11,
       11,   11,   13,   13,   13,   11,   13,   13,   13,   13,
       11,   13,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   13,   13,   13,   11,   13,   13,   13,

       13,   13,   13,   13,   13,   14,   14,   14,   14,    0,
        0,    0,   11,   13,   14,    0,    0,    0,   11,   14,
        0,   13,   13,   13,   11,   13,   13,   14,   14,   11,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   11,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   11,
       11,   11,   15,   15,   15,   11,   11,   15,   15,   15,
       14,    0,   15,    0,   11,   14,   15,   15,   15,   11,
       14,    0,   14,   14,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   13,   13,
       13,   11,   13,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   13,   13,   13,   11,   13,   13,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   13,   13,   13,   11,
       13,   13,   13,   13,   11,   13,   14,   14,   11,   11,
       11,   11,   11,   11,    0,   15,    0,   11,   14,   11,
       11,   11,   11,   11,    0,    0,    0,   11,   13,   14,
       13,   13,   13,   11,   13,   13,   13,   11,   11,   11,
       11,   11,   11,   13,   13,   13,   11,   13,   13,   13,
       13,   11,   13,   14,   14,   11,   11,   11,   11,   11,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   11,   13,   13,   11,   11,   11,
       11,   11,   13,   13,   13,   11,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   11,   11,   11,   11,   15,
       15,   15,   11,   14,   15,   14,   14,   11,   11,   11,
       11,   11,   11,    0,   15,    0,   11,   14,   14,   14,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   13,   13,   13,   13,   11,   13,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   13,
       13,   13,   11,   13,   13,   13,   13,   13,   11,   13,
       13,   13,   11,   11,   11,   11,   11,   11,   13,   13,
       13,   11,   13,   13,   13,   13,   11,   13,   13,   13,
       13,   11,   13,   13,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   13,   13,   13,   11,   13,   13,   13,   13,   13,
       11,   13,   13,   13,   11,   13,   14,   14,   11,   11,
       11,   11,   13,   13,   13,   11,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   11,   13,   13,   13,
       13,   13,   13,   15,   15,   15,   11,   14,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   13,   13,   13,   11,
       13,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   13,   13,   13,

       11,   13,   13,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       13,   13,   13,   11,   13,   13,   13,   13,   13,   11,
       13,   13,   13,   11,   13,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   13,   13,   13,   11,   13,   13,   13,   13,
       13,   11,   13,   13,   13,   13,   11,   13,   13,   13,
       11,   13,   11,   11,   11,   13,   13,   13,   11,   13,
       13,   13,   11,   11,   11,   11,   11,   11,   13,   13,

       13,   11,   13,   13,   13,   13,   11,   13,   13,   13,
       13,   13,   13,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   13,   13,   13,   11,   13,
       13,   13,   13,   11,   13,   13,   13,   13,   11,   13,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       13,   13,   11,   13,   13,   13,   13,   11,   13,   13,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   13,   13,   13,   11,   13,   13,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    6,    1,    7,    1,    8,
        9,    1,    1,    1,    1,    1,    1,    1,    1,   10,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   11,
        1,   12,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   13,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   14,   15,   16,   17,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[18] =
    {   0,
        1,    2,    2,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[1710] =
    {   0,
        0,    0,  602,   17,10329,10329,   34,   47,   61,  589,
        0,   47,   78,   91,    0,  104,    0,    0,   49,    0,
        0,    0,  121,  595,  138,  152,  166,  180,  183,  590,
      186,  195,  204,  220,  237,    0,    0,  573,    0,  254,
      267,    0,  281,   50,    0,  298,  315,  332,    0,  574,
      349,   59,    0,    0,   15,    0,  558,    0,   67,    0,
        0,  363,  554,  366,  369,  385,  399,  551,  402,  549,
      412,  418,  428,  438,  543,  447,  456,  469,  481,  493,
      509,  526,  543,    0,  560,  577,  591,  605,  622,  636,
      646,  655,    0,  671,  684,    0,    0,   68,  698,  715,

      732,  749,  766,    0,  783,    0,  800,  817,    0,  831,
      845,  859,   32,   94,  862,  547,  865,   63,  871,  877,
      883,  896,  909,  925,  939,  942,  947,  545,  957,  963,
      973,  983,   97,  542,   98,  993,    0,  999, 1005, 1015,
     1025,  541, 1035, 1045, 1055, 1065, 1075, 1085,  533,   94,
     1094, 1107, 1119, 1131, 1143,  538, 1156,    0, 1169, 1182,
     1194, 1207,  537, 1219, 1231,    0, 1244, 1257, 1270, 1282,
     1298, 1315,  528, 1332, 1349,  533,    0,    0,  526,    0,
        0,  530, 1363,    0, 1373, 1383, 1393, 1409, 1423,    0,
     1439,  151,    0,    0,    0,    0, 1453,  529, 1463,    0,

     1473,  525, 1485,    0, 1501,  154,    0,    0,    0, 1515,
     1524, 1540, 1557, 1574,    0,    0,    0, 1591, 1605, 1618,
     1630, 1646, 1663, 1680, 1697, 1714, 1731, 1744,    0, 1760,
     1777, 1791, 1805, 1819, 1822,  524, 1825, 1828,    0, 1841,
      164, 1847, 1853, 1859, 1865, 1871, 1877,  172, 1883, 1889,
     1895, 1901, 1907, 1920, 1933, 1946, 1959, 1972, 1985, 1998,
     2011, 2024, 2034, 2040,  522, 2050,  189,  193,  521,    0,
        0, 2060,    0, 2066,  520,    0, 2072,  516, 2082, 2088,
      516, 2098, 2108, 2118, 2128, 2138, 2148, 2158, 2168, 2178,
      515,    0, 2188, 2198, 2208, 2218, 2228,  513, 2238, 2248,

     2258, 2268, 2278,  512, 2288,    0,  508, 2297, 2310, 2322,
      507,    0,    0, 2335,    0, 2348, 2364, 2378,  505, 2394,
     2411, 2425, 2438, 2451, 2464, 2477, 2490, 2502, 2515, 2527,
      504, 2539, 2551, 2564, 2576, 2589, 2602, 2615, 2628, 2641,
        0, 2657, 2674, 2688, 2702, 2719, 2733, 2743,  503, 2753,
     2763, 2773, 2783, 2793,  500, 2803,    0, 2816, 2829, 2845,
        0, 2862, 2876,    0,    0,  156, 2887, 2897, 2913,    0,
     2927,    0,    0, 2938, 2948, 2958, 2968,  497,  496, 2978,
        0,  495, 2994, 3011, 3028, 3045,    0, 3059, 3072, 3085,
     3097, 3113, 3130, 3147, 3164,    0,    0,    0,    0, 3181,

     3195,    0, 3211,    0,    0,    0, 3228,    0,    0, 3242,
     3248, 3254, 3260, 3273, 3286, 3299, 3305, 3311, 3317, 3323,
     3329,  494, 3335,    0, 3341, 3347, 3353, 3359,  493,    0,
     3365,  173,    0, 3371, 3377,  492, 3383,    0, 3396, 3409,
     3422, 3435, 3448, 3461, 3474, 3487, 3500, 3506,  488,    0,
     3512,    0, 3522,  485,    0, 3528, 3534, 3544, 3554, 3564,
     3574,  484, 3584,    0, 3594, 3604, 3614,    0, 3624,  483,
        0, 3634,    0, 3644,  482, 3654,    0, 3664, 3674, 3684,
     3694, 3704,    0, 3714,  480,    0,    0, 3724, 3734, 3744,
     3754,  476,  474,    0, 3764,  473,    0,    0, 3774, 3784,

     3794, 3804, 3814, 3824, 3834, 3844, 3857,    0, 3870, 3886,
     3900,  472, 3916, 3933, 3950, 3964, 3977, 3990, 4003, 4016,
     4032,    0, 4049,  471, 4066, 4083, 4100,    0, 4114, 4130,
        0, 4144, 4157, 4170, 4183, 4196,  470, 4209,    0, 4222,
     4235, 4248,    0, 4261,  469,    0, 4274,    0, 4287, 4300,
        0,    0,  468,    0,    0,    0, 4313,  463,    0,    0,
     4326, 4338, 4351, 4363,    0, 4376,    0, 4389, 4402, 4415,
     4428, 4444, 4461, 4475, 4489, 4506, 4520, 4530,  460, 4540,
     4550, 4560, 4576, 4590,    0, 4606, 4620,    0,    0,  197,
     4631,  453,  198, 4641, 4651, 4661, 4671, 4681, 4691,    0,

     4704, 4717, 4730,    0,    0, 4743, 4753, 4766, 4776, 4786,
      458,    0, 4796,  457,    0, 4812, 4829, 4846, 4863, 4877,
     4890, 4903, 4916, 4929,    0, 4945, 4962, 4979, 4996, 5010,
     5026,    0, 5043,    0,    0, 5060,    0,    0,    0, 5074,
     5080,    0, 5086, 5092, 5098, 5104, 5110, 5116, 5129, 5142,
     5155, 5168, 5181, 5194, 5207, 5220,  456,    0,    0, 5233,
     5246, 5259, 5272, 5285, 5298, 5311, 5317, 5323,  455, 5329,
     5339, 5345,  451, 5355,  450, 5365,    0,  449, 5371, 5381,
     5391, 5401, 5411, 5421, 5431, 5441,  448, 5451, 5461, 5471,
     5481, 5491,  447,  446, 5501, 5511, 5521, 5531,  442, 5541,

     5551, 5561,  441,    0,  440, 5571, 5581,  439,    0, 5591,
      438, 5601,    0,  437,  432, 5611, 5621, 5631,  431,  430,
        0, 5641, 5651, 5661, 5671,  428, 5681, 5694, 5710, 5724,
      427,    0, 5740, 5757, 5771, 5784, 5797, 5810, 5823, 5836,
     5849,  422,    0, 5862, 5878, 5892,  421,    0, 5908, 5925,
     5942, 5959,  420, 5976, 5993, 6010, 6027,    0, 6044,  417,
        0, 6061, 6078, 6095, 6112,  412,    0,    0, 6129, 6146,
     6163,    0,    0, 6177, 6190, 6203,    0, 6216,    0,    0,
        0, 6232,  411,    0,    0, 6246, 6259, 6272,  406, 6285,
     6298, 6311, 6324, 6337, 6350, 6363, 6376, 6389, 6402, 6415,

      405,    0,    0,    0,  404,    0,    0,    0, 6428,    0,
     6441, 6454,    0, 6467, 6477, 6487, 6497, 6507, 6520, 6533,
      402,  401, 6546,    0, 6556, 6566, 6576, 6586, 6596,  393,
        0, 6606,    0, 6616,  392, 6626,    0,  391, 6636,    0,
      389, 6649, 6662,  388,    0,    0,  384,    0,    0,    0,
        0,    0, 6675,  383,    0,  381,    0,    0,  380, 6685,
     6698, 6711, 6724, 6740, 6757, 6774, 6791, 6808, 6822,    0,
     6838,    0,    0,    0,    0, 6852, 6858, 6864,  379, 6870,
     6883, 6896, 6909, 6922, 6935, 6948, 6961, 6974, 6987, 7000,
      376,    0, 7013, 7026, 7039, 7052, 7065, 7078,    0, 7091,

        0, 7104, 7117, 7130, 7143, 7153, 7163, 7173,  374,  373,
     7183, 7193, 7203,  372, 7213,  371, 7223,    0,  370,  369,
     7233, 7243, 7253, 7263, 7273, 7283,  368,    0,    0,  344,
        0,    0, 7293, 7303, 7313,  343,  328, 7323, 7336,  327,
        0,    0, 7352,    0, 7366,  326,    0,    0, 7379, 7395,
     7412,  323, 7429, 7446, 7463,    0,    0,  322,    0,    0,
        0, 7480,    0, 7497,  321,    0, 7514, 7531,    0, 7548,
      319,    0,    0, 7565,    0, 7582,    0,    0, 7599, 7616,
      318, 7633, 7650, 7667,    0, 7684,  314,    0,    0,    0,
     7701, 7718, 7735,  313,    0,    0, 7752, 7769, 7786,    0,

        0,    0, 7803,  311,    0,    0,    0, 7820, 7837, 7854,
        0,    0,    0, 7871,    0,    0, 7885, 7898,    0,    0,
     7911,    0, 7927,    0,  310, 7944, 7961, 7978, 7992, 8005,
     8018, 8031,    0,    0,  309,    0,    0,    0, 8044,    0,
     8057,    0, 8070, 8083, 8093, 8103, 8113, 8123,    0,    0,
      293,    0,    0, 8133, 8146, 8159, 8172, 8185, 8198, 8211,
     8224, 8237,    0, 8250,    0, 8263, 8273,  292,    0, 8283,
     8293, 8303, 8313, 8323,  277,  276, 8333, 8343,  275, 8353,
        0, 8363, 8376, 8389,  271,    0, 8405, 8419,  270,    0,
     8435, 8452,  269, 8466,    0,  268,    0, 8482,    0,  266,

     8499,    0, 8516, 8533, 8550,  249,    0, 8567, 8584, 8601,
     8618, 8635,  248,    0,    0, 8652, 8669, 8686,    0,    0,
        0, 8703,  245,    0,    0, 8720, 8737, 8754, 8771,    0,
        0, 8788, 8805,    0,    0,    0,    0,  244,    0,    0,
        0,    0, 8822,  243,    0, 8839, 8856,    0, 8873,  241,
        0,    0,    0, 8890, 8907, 8924,    0,    0,    0, 8941,
        0,    0,    0,    0,  240,    0,    0,    0, 8958, 8975,
      236,    0,    0, 8992,    0, 9009,    0,    0,    0,    0,
        0,    0,    0, 9023,    0, 9039,    0,  235,    0,    0,
        0, 9056,    0,    0,  233,    0,    0,    0,    0,    0,

      232,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      231,    0,    0, 9070,    0, 9083,  228, 9096, 9109, 9119,
     9129,  227,  226, 9142,    0,    0,  224,    0,    0, 9159,
        0,    0,    0,    0,    0,    0,  223,    0,    0,    0,
        0,    0,  219,    0,    0,    0, 9176,    0, 9193,    0,
        0,    0,    0,    0,    0, 9210,    0,    0,    0,    0,
        0,    0,  218,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  216,    0,    0,    0,    0, 9227,  215,    0,
        0,    0,    0, 9244,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  214,    0,    0,    0,

        0,    0,  211,    0,    0,    0, 9261,    0,    0,    0,
        0,    0,    0,  208,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  207,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  206,    0,    0,    0,10329,  212, 9278,
     9281, 9284, 9287,  206,  203, 9290, 9293, 9296, 9299, 9302,
     9305, 9308, 9311, 9314, 9317,  202,  195, 9320,  194, 9323,
     9326,  193, 9329, 9332, 9335, 9338, 9341, 9344, 9347, 9350,
     9353, 9356, 9359, 9362, 9365, 9368, 9371, 9374, 9377, 9380,
     9383, 9386, 9389, 9392, 9395, 9398,  179, 9401,  171,  162,
     9404, 9407, 9410, 9413,  160,  140, 9416, 9419, 9422,  139,

     9425, 9428, 9431, 9434,  123, 9437, 9440,  122, 9443, 9446,
     9449, 9452, 9455, 9458, 9461, 9464, 9467, 9470, 9473, 9476,
     9479, 9482, 9485, 9488, 9491, 9494, 9497, 9500, 9503, 9506,
     9509, 9512, 9515, 9518, 9521, 9524, 9527, 9530, 9533, 9536,
     9539, 9542, 9545, 9548, 9551, 9554, 9557, 9560, 9563, 9566,
       99, 9569,   79, 9572, 9575, 9578, 9581, 9584, 9587, 9590,
       76, 9593,   64, 9596, 9599, 9602, 9605, 9608, 9611, 9614,
     9617, 9620, 9623, 9626, 9629, 9632, 9635, 9638, 9641, 9644,
     9647, 9650,   55, 9653, 9656, 9659, 9662, 9665, 9668, 9671,
     9674, 9677, 9680, 9683, 9686, 9689, 9692, 9695, 9698, 9701,

     9704, 9707, 9710, 9713, 9716, 9719, 9722, 9725, 9728, 9731,
     9734, 9737, 9740, 9743, 9746, 9749, 9752, 9755, 9758, 9761,
     9764, 9767, 9770, 9773, 9776, 9779, 9782, 9785, 9788, 9791,
     9794, 9797, 9800, 9803, 9806, 9809, 9812, 9815, 9818, 9821,
     9824, 9827, 9830, 9833,   20, 9836, 9839, 9842, 9845, 9848,
     9851, 9854, 9857, 9860, 9863, 9866, 9869, 9872, 9875, 9878,
     9881, 9884, 9887, 9890, 9893, 9896, 9899, 9902, 9905, 9908,
     9911, 9914, 9917, 9920, 9923, 9926, 9929, 9932, 9935, 9938,
     9941, 9944, 9947, 9950, 9953, 9956, 9959, 9962, 9965, 9968,
     9971, 9974, 9977, 9980, 9983, 9986, 9989, 9992, 9995, 9998,

    10001,10004,10007,10010,10013,10016,10019,10022,10025,10028,
    10031,10034,10037,10040,10043,10046,10049,10052,10055,10058,
    10061,10064,10067,10070,10073,10076,10079,10082,10085,10088,
    10091,10094,10097,10100,10103,10106,10109,10112,10115,10118,
    10121,10124,10127,10130,10133,10136,10139,10142,10145,10148,
    10151,10154,10157,10160,10163,10166,10169,10172,10175,10178,
    10181,10184,10187,10190,10193,10196,10199,10202,10205,10208,
    10211,10214,10217,10220,10223,10226,10229,10232,10235,10238,
    10241,10244,10247,10250,10253,10256,10259,10262,10265,10268,
    10271,10274,10277,10280,10283,10286,10289,10292,10295,10298,

    10301,10304,10307,10310,10313,10316,10319,10322,10325
    } ;

static const flex_int16_t yy_def[1710] =
    {   0,
     1338,    1, 1338, 1338, 1338, 1338, 1338, 1339,    4,    4,
        9,    9, 1338, 1339,    9, 1338,    4,    7,   14,    9,
       13,   14, 1338, 1340, 1338, 1341,   23, 1341, 1342,   14,
     1343, 1344, 1345,    7,   13,    9,    9,    9,   13, 1338,
     1344,   35, 1338,   41,   16, 1338,   16, 1338,   23, 1340,
     1338,   28,   27,   28, 1346,   23, 1340,   51,   28,   27,
       28, 1347,   28, 1348, 1349,   51, 1350,   28, 1351, 1352,
     1353, 1351, 1354, 1355,   41, 1356, 1357, 1358, 1357, 1359,
       25,   40,   43,    9, 1338, 1338, 1360,   85, 1338, 1360,
     1361, 1362,   43, 1338, 1356,   83,   43,   95, 1338, 1338,

       99,   46,   48,   48, 1338,  103, 1338, 1338,   51, 1363,
      108, 1363, 1364, 1364, 1365,  112, 1366, 1367, 1368, 1366,
     1369, 1370, 1369,   51, 1365, 1371, 1372, 1373, 1374, 1372,
     1375, 1376, 1377,  120, 1367, 1378,  120, 1379, 1380, 1376,
     1381,  140, 1382, 1383, 1384, 1360, 1385, 1386,   95,   95,
     1387, 1388, 1387, 1389, 1390,  123, 1391,  123, 1392, 1393,
     1389, 1394,  161, 1395, 1396,  124, 1397, 1398, 1399, 1400,
     1338, 1338,  146,  171, 1338,  146,  171,  172,  146,  174,
      175,  146, 1401,  146, 1402, 1385, 1403,  172, 1398,  175,
     1338,  186,  189,  175,  186,  140, 1381,  140, 1383,  161,

     1394,  161, 1395,  175, 1338,  186,  189,  175,  186, 1404,
     1405, 1338, 1338,  212,  212,  213,  214,  213, 1406, 1407,
     1408, 1338, 1338,  222, 1338, 1338, 1338, 1408,  226, 1338,
      124, 1409,  230, 1409, 1410,  234, 1411, 1412,  124, 1413,
     1414, 1415, 1413, 1416, 1417, 1418, 1419, 1414, 1415, 1419,
     1420, 1421, 1422, 1423, 1422, 1424, 1425, 1423, 1425, 1426,
     1427, 1428, 1429, 1428,  264, 1430, 1431, 1431,  243,  249,
      243, 1416,  272, 1432,  272,  272, 1433, 1434, 1435, 1433,
      264, 1436, 1437, 1438, 1437, 1439, 1440, 1441, 1430, 1442,
      289,  289, 1443, 1444, 1445, 1444, 1443,  296, 1446, 1447,

     1448, 1449, 1448,  303, 1450,  303,  303, 1451, 1452, 1453,
      255,  258,  255, 1424,  314, 1454, 1338, 1455,  317, 1338,
     1338, 1456, 1457, 1456, 1458, 1459, 1460, 1461, 1462, 1461,
      330, 1463, 1453, 1464, 1463, 1465, 1466, 1467, 1466, 1468,
      339, 1338, 1338, 1469,  342, 1338, 1469, 1446,  347, 1470,
     1471, 1472, 1471, 1473,  324, 1474,  324, 1458, 1465,  346,
      346, 1338, 1470,  360,  346,  363, 1475, 1476,  339,  362,
     1477,  339,  369, 1477, 1478, 1479, 1478,  377,  330, 1462,
      330,  330, 1338, 1338,  383,  384,  386, 1480, 1481, 1482,
     1483, 1338, 1338,  392, 1338,  392,  393,  394,  395,  393,

     1481,  395, 1338,  401,  395,  395, 1338,  401,  395, 1484,
     1485, 1484, 1486, 1487, 1486, 1488, 1488, 1489, 1490, 1489,
     1490,  412, 1485,  412, 1491, 1492, 1491, 1493,  427,  427,
     1494, 1495,  423, 1494, 1496,  415, 1487,  415, 1497, 1498,
     1497, 1499, 1500, 1501, 1500, 1502, 1496, 1503,  447,  447,
     1504,  427, 1493,  427,  427, 1505, 1506, 1507, 1506, 1508,
     1509,  459, 1507,  459, 1508, 1509, 1510,  465, 1511,  465,
      465, 1512,  466, 1513,  466, 1512,  466, 1514, 1515, 1514,
     1516, 1517,  465, 1518,  465,  465,  476, 1519, 1520, 1521,
     1520,  491,  491,  466, 1522,  466,  476,  466, 1523, 1524,

     1525, 1525, 1524, 1526, 1526, 1527, 1528,  441, 1499, 1338,
     1529,  510, 1338, 1338, 1338, 1530, 1531, 1530, 1532, 1533,
     1338,  514, 1338,  514, 1338, 1338, 1338,  515, 1534, 1338,
      527, 1535, 1536, 1535, 1537, 1538,  534, 1536,  534, 1537,
     1538, 1539,  540, 1540,  540,  540, 1541,  541, 1542, 1541,
      514,  523,  514,  526,  527,  540, 1543,  540,  540,  550,
     1544, 1545, 1546, 1545,  541, 1547,  550, 1548, 1549, 1548,
     1550, 1338, 1338, 1551,  572, 1338, 1551, 1552,  577, 1553,
     1554, 1555,  573, 1549,  576,  570, 1554,  584,  576,  587,
     1556,  587,  587, 1557, 1558, 1557, 1559, 1560, 1561,  538,

     1561, 1562, 1563,  570,  584, 1564, 1565, 1566, 1567, 1566,
      610,  540, 1568,  540,  540, 1338, 1338,  616,  617, 1569,
     1570, 1571, 1570, 1572,  623, 1338, 1338,  626, 1338, 1569,
      629,  629, 1338,  631,  629,  623,  633,  623,  636, 1573,
     1573,  641, 1574, 1575, 1574, 1576, 1577, 1578, 1579, 1578,
     1580, 1581, 1579, 1581, 1582, 1583,  650,  653,  650, 1584,
     1580, 1585, 1583, 1586, 1587, 1588, 1589, 1588,  668, 1590,
     1591, 1590,  672, 1592,  668, 1589,  668,  668, 1593, 1594,
     1593, 1595, 1596, 1597, 1598, 1597,  686, 1599, 1600, 1601,
     1602, 1601,  692,  692, 1603, 1604, 1603, 1599,  697, 1605,

     1595, 1598,  701,  701,  692, 1592, 1606,  706,  706, 1607,
      692, 1608,  692,  692,  692, 1609, 1596, 1604,  717,  692,
      717, 1610, 1611, 1610, 1607,  724, 1612, 1613, 1338, 1614,
      729,  729, 1338, 1338, 1615, 1616, 1615, 1617, 1618, 1617,
     1619,  740,  740, 1620, 1338, 1621,  745,  729, 1338, 1338,
     1338, 1338,  751, 1338, 1338, 1338, 1338,  733, 1338,  733,
      733, 1338, 1338, 1338, 1338,  764,  762,  764, 1338, 1338,
     1338,  763,  769, 1618, 1622, 1620,  734, 1623,  734,  763,
      751, 1338,  751,  755,  756, 1624, 1625, 1624,  788, 1626,
     1627, 1628, 1629, 1628, 1630, 1631, 1626, 1632, 1625, 1632,

      800,  794,  764,  765,  764,  764,  769,  794, 1633,  794,
     1634, 1631,  794, 1635, 1636, 1635, 1637, 1638, 1639, 1638,
      788,  816, 1636,  816, 1640, 1637, 1641, 1640, 1642,  828,
      828, 1643,  826, 1644,  826, 1643,  826,  820, 1639,  820,
      788, 1630, 1645,  788,  799,  788,  788,  797,  842,  812,
      797,  826, 1644,  826,  826,  788,  799,  788,  788, 1646,
     1647, 1646, 1648, 1338, 1338,  864, 1338,  865, 1647,  867,
      862,  869,  867,  862,  869, 1649, 1650, 1649,  878, 1651,
     1652, 1651, 1653, 1654, 1655, 1654, 1656, 1657, 1653, 1658,
      889,  889, 1657, 1659, 1652, 1659, 1660, 1661,  886, 1656,

      893, 1662, 1663, 1662, 1664, 1665, 1666, 1665,  908,  908,
     1667, 1668, 1667,  913, 1669,  908, 1666,  908,  908,  908,
     1670, 1671, 1672, 1673, 1672, 1669,  925,  926,  917,  926,
      926,  926, 1674, 1675, 1674,  935,  935, 1660, 1676,  938,
      938,  904, 1338,  889, 1658,  889,  889,  893, 1677, 1338,
     1338,  950, 1338, 1338, 1338,  950,  951,  950,  953,  954,
      955, 1338,  953, 1338,  953,  953, 1338, 1338,  954, 1338,
      954,  967,  954, 1338,  955, 1338,  968,  974, 1338, 1338,
      979, 1338, 1338, 1338,  953, 1338,  953,  953,  967,  968,
     1338, 1338, 1338,  992,  992,  992, 1338, 1338, 1338,  998,

      997,  954, 1338,  954,  967,  954,  974, 1338, 1338, 1338,
      997, 1009,  955, 1338,  968,  974, 1678, 1679,  904,  904,
     1680,  904, 1338,  951, 1023, 1338, 1338, 1338, 1681, 1682,
     1683, 1682,  954,  970,  954,  954,  974, 1032, 1683, 1032,
     1684, 1039, 1684, 1685, 1686, 1685, 1687, 1688, 1023,  951,
     1023, 1027, 1028, 1689, 1690, 1689, 1691, 1692, 1693, 1694,
     1693, 1695, 1061, 1694, 1061, 1687, 1696, 1066, 1066, 1697,
     1698, 1699, 1700, 1699, 1074, 1074, 1688, 1701, 1077, 1697,
     1077, 1702, 1703, 1702, 1084,  904, 1338, 1704, 1087, 1087,
     1338, 1338, 1084, 1703, 1084, 1084,  904, 1338,  951, 1098,

     1338,  954, 1338, 1338, 1338, 1104, 1104, 1338, 1338, 1338,
     1338, 1338, 1111, 1111, 1111, 1338, 1338, 1338, 1117, 1116,
     1027, 1338, 1027, 1108, 1027, 1338, 1338, 1338, 1338, 1116,
     1128, 1338, 1338, 1109, 1126, 1101, 1105, 1101, 1101, 1111,
     1117, 1091, 1338, 1091, 1091, 1338, 1338, 1111, 1338, 1111,
     1111, 1111, 1116, 1338, 1338, 1338, 1155, 1155, 1117, 1338,
     1117, 1116,  954, 1122,  954, 1111,  954, 1128, 1338, 1338,
     1169, 1146, 1169, 1338, 1128, 1338, 1116, 1128, 1103, 1133,
     1117, 1128,  904, 1705,  904, 1338,  951, 1186, 1104, 1027,
     1132, 1338, 1104, 1105, 1104, 1104, 1108, 1109, 1027, 1122,

     1027, 1108, 1027, 1126, 1132, 1133, 1109, 1126, 1027, 1122,
     1027, 1027, 1126, 1706, 1094, 1706, 1216, 1707, 1708, 1709,
     1708, 1221, 1221, 1338, 1108, 1112, 1108, 1108, 1108, 1338,
     1109, 1118, 1109, 1230, 1101, 1105, 1101, 1101, 1111, 1117,
     1108, 1112, 1108, 1108, 1108, 1230, 1338, 1116, 1338, 1116,
     1116, 1109, 1118, 1109, 1230, 1338, 1126, 1129, 1230, 1126,
      954, 1122,  954, 1111,  954, 1128, 1126, 1129, 1230, 1126,
     1111, 1112, 1111, 1111, 1111, 1116, 1146, 1338, 1146, 1146,
     1146, 1155, 1116, 1338, 1116, 1116, 1117, 1118, 1117, 1116,
     1128, 1129, 1116, 1128, 1186,  951, 1186, 1104, 1027, 1132,

     1104, 1105, 1104, 1104, 1108, 1109, 1338, 1230, 1249, 1230,
     1230, 1111, 1112, 1111, 1111, 1111, 1116, 1230, 1249, 1230,
     1230, 1027, 1122, 1027, 1108, 1027, 1126, 1116, 1249, 1116,
     1116, 1108, 1112, 1108, 1108, 1108, 1230,    0, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,

     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,

     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,

     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,

     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338
    } ;

static const flex_int16_t yy_nxt[10347] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,    4,    4,   10,
       11,   12,   13,   14,   15,   14,   16,   17,   50,  114,
      562,   18,   19,   20,   17,   17,   17,   20,   20,   21,
       22,   20,   22,   17,   23,   50,  114,   24,   25,   26,
       27,   23,   23,   23,   27,   27,   23,   28,   27,   28,
       23,   29,   30,   37,   31,  228,   31,   44,   38,   32,
       33,   20,   33,   44,  562,   34,   64,  245,   20,   20,
       20,  246,   65,   35,   64,   98,  328,   20,   39,  333,
       65,   98,   40,   41,   42,   39,   39,   39,   42,   42,
       43,   44,   42,   44,   39,   29,   30,   50,  114,  308,

      128,   98,  245,   32,   45,  268,  246,   98,   46,   19,
       47,   45,   45,   45,   47,   47,   48,   22,   47,   22,
       45,   49,  228,  379,   50,   51,   52,   53,   49,   49,
       49,   53,   53,   49,   54,   53,   54,   49,   56,   96,
      333,   57,   58,   59,   60,   56,   56,   56,   60,   60,
       56,   61,   60,   61,   56,   50,   62,   63,  367,   64,
      328,  367,  308,  590,  368,   65,   53,  368,  245,  590,
       66,  161,  246,   53,   53,   53,  245,  245,   53,  151,
      246,  246,   53,   50,   62,   63,   24,   67,   68,   70,
       71,   72,  128,  200,  161,  151,  128,  268,   73,   74,

       75,  268,   98,   77,  590,  590,   44,   76,   78,   79,
      590,  590,   22, 1307, 1256, 1247,   80,   22, 1224,   22,
       27, 1192, 1154, 1247,   81, 1127, 1307,   27,   27,   27,
     1110, 1307,   27,  906,  906,  889,   27,   42, 1256, 1256,
     1224,   82, 1192, 1008,   42,   42,   42, 1127, 1247,   83,
      991, 1110, 1256,   42,   85, 1247, 1224,   24,   86,   87,
       88,   85,   85,   85,   88,   88,   89,   90,   88,   90,
       85,   74,   75,  962,   91,  740,  740,  943,  740,   76,
       92,   93,  922,  690,  690,   94,   95,   96,   93,   93,
       93,   96,   96,   97,   98,   96,   98,   93,   99,  905,

     1192,   24,  100,   26,  101,   99,   99,   99,  101,  101,
       99,   28,  101,   28,   99,   47, 1127, 1192, 1127,  102,
     1154, 1110,   47,   47,   47,  757, 1127,  103, 1110,  962,
      962,   47,  104, 1062,  949,  489,  105,   41,  106,  104,
      104,  104,  106,  106,  107,   44,  106,   44,  104,  108,
      489,  921,   57,  109,  110,  111,  108,  108,  108,  111,
      111,  108,  112,  111,  112,  108,   57,  115,  116,  118,
      119,  120,   50,  122,  123,  473,  906,  906,  906,  468,
      906,  906,   54, 1062,   54,  111,  427,  844,  844,  124,
      922,  844,  111,  111,  111,  844,  844,  111,  838,  922,

      905,  111,   57,  125,  126,  128,  129,  130,  822,  844,
      131, 1008,  543,  844,  132,  135,  136,  137,  962, 1008,
      138,  128,  129,  130,  991,  139,  131,  962,  521,  949,
      132,  128,  141,  142,  943,  294,  143,  690,  700,  690,
      144,   24,  145,  146,  690,  690,  488,  690,  689,  833,
      147,  148,  149,  690,  690,  828,  273,  273,  262,  150,
      152,  153,  273,  880,  791,  473,  590,  580,  154,   22,
      791,  155,   24,  157,  158,  757,  791,  532,  757,  521,
      700,  489,   28,  489,  159,  152,  153,  689,  160,  700,
      689,  457,  647,  154,   22,  456,  155,  162,  163,  436,

      647,  422,  328,  328,  294,  164,   44,  532,  165,   60,
      580,  328,  521,  166,  253,  195,   60,   60,   60,  195,
      294,   60,  488,  262,  133,   60,   88,  456,  240,  262,
      167,  237,  327,   88,   88,   88,  288,  176,  168,  187,
      176,  187,   88,   96,  327,  253,   98,  169,  288,  240,
       96,   96,   96,  133,  237,  170,   44,  133,   64,   96,
      171,   64,   55,   50,  172,  173,  174,  171,  171,  171,
      174,  174,  175,  176,  174,  176,  171,  177,   55,   84,
       57,  178,  179,  180,  177,  177,  177,  180,  180,  181,
      182,  180,  182,  177,   50,  183,  184,   31,  185,   55,

       36, 1338, 1338,  186,  187,  174, 1338, 1338, 1338,  188,
     1338, 1338,  174,  174,  174, 1338, 1338,  189, 1338, 1338,
     1338,  174,  190, 1338, 1338,   50,  191,  192,  193,  190,
      190,  190,  193,  193,  194,  195,  193,  195,  190,   50,
      183,  184, 1338, 1338, 1338, 1338, 1338, 1338,  186,   70,
      197,  198, 1338, 1338, 1338, 1338, 1338, 1338,  199,  201,
      202, 1338, 1338, 1338, 1338, 1338, 1338,  203,   44, 1338,
       44,  204, 1338, 1338,   24,  205,  206,  207,  204,  204,
      204,  207,  207,  208,  209,  207,  209,  204,  148,  149,
     1338,  210, 1338, 1338, 1338, 1338,  150,  211,  212, 1338,

     1338,   50,  213,   52,  214,  212,  212,  212,  214,  214,
      212,   54,  214,   54,  212,  215, 1338, 1338,   57,  216,
       59,  217,  215,  215,  215,  217,  217,  215,   61,  217,
       61,  215,  214, 1338, 1338, 1338,  218, 1338, 1338,  214,
      214,  214, 1338, 1338,  214, 1338, 1338, 1338,  214,  101,
     1338, 1338, 1338,  219, 1338, 1338,  101,  101,  101, 1338,
     1338,  101, 1338, 1338, 1338,  101,  106, 1338, 1338, 1338,
      220, 1338, 1338,  106,  106,  106, 1338, 1338,  221, 1338,
     1338, 1338,  106,  222, 1338, 1338,   24,  223,   87,  224,
      222,  222,  222,  224,  224,  225,   90,  224,   90,  222,

      226, 1338, 1338, 1338,  227,   95,  228,  226,  226,  226,
      228,  228,  229,   98,  228,   98,  226,  230, 1338, 1338,
       50,  231,  232,  233,  230,  230,  230,  233,  233,  230,
      234,  233,  234,  230,   50,  235,  236, 1338,  237, 1338,
     1338, 1338, 1338, 1338,  238,  233, 1338, 1338, 1338,  239,
     1338, 1338,  233,  233,  233, 1338, 1338,  233, 1338, 1338,
     1338,  233,   50,  235,  236,   57,  115,  116,  241,  242,
      243, 1338, 1338,  244,  248,  249,  250, 1338, 1338,  251,
      241,  242,  243, 1338,  252,  244,   50,  254,  255, 1338,
     1338, 1338, 1338, 1338, 1338, 1338,   54, 1338,  256,   57,

      258,  259, 1338, 1338, 1338, 1338, 1338, 1338, 1338,  112,
     1338,  260,   50,  254,  255, 1338,  261, 1338, 1338, 1338,
     1338, 1338,   54, 1338,  256,  111, 1338, 1338, 1338,  124,
     1338, 1338,  111,  111,  111, 1338, 1338,  111, 1338, 1338,
     1338,  111,   57,  115,  116,   50,   62,   63, 1338,   64,
      128,  129,  130, 1338, 1338,  131, 1338, 1338, 1338,  132,
      135,  136,  137, 1338, 1338,  138,  128,  129,  130, 1338,
      139,  131, 1338, 1338, 1338,  132,  128,  263,  264, 1338,
     1338,  265, 1338, 1338, 1338,  266,  128,  141,  142, 1338,
     1338,  143, 1338, 1338, 1338,  144,  248,  270,  271, 1338,

     1338,  272,  241,  274,  275, 1338, 1338,  276,  278,  279,
      280, 1338, 1338,  281, 1338, 1338, 1338,  282,  128,  141,
      142, 1338, 1338,  143, 1338, 1338, 1338,  144,  135,  284,
      285, 1338, 1338,  286, 1338, 1338, 1338,  287,  128,  290,
      291, 1338, 1338,  292, 1338, 1338, 1338,  293,  128,  295,
      296, 1338, 1338,  297, 1338, 1338, 1338,  298,   57,  299,
      300, 1338, 1338, 1338, 1338, 1338, 1338,  301,   50,  183,
      184, 1338,  185, 1338, 1338, 1338, 1338,  186,   50,  302,
      303, 1338, 1338, 1338, 1338, 1338, 1338,  304,   24,  305,
      306, 1338, 1338, 1338, 1338, 1338, 1338,  307,  152,  153,

     1338, 1338, 1338, 1338, 1338, 1338,  154,   22, 1338,  155,
       24,  157,  158, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
       28, 1338,  159,  152,  153, 1338,  160, 1338, 1338, 1338,
     1338,  154,   22, 1338,  155,  162,  163, 1338, 1338, 1338,
     1338, 1338, 1338,  164,   44, 1338,  165,  309,   30, 1338,
     1338, 1338, 1338, 1338, 1338,  310,   22, 1338,   22,   57,
      312,  313, 1338, 1338, 1338, 1338, 1338, 1338, 1338,   61,
     1338,  314,   50,  316,   63, 1338, 1338, 1338, 1338, 1338,
     1338, 1338,   54, 1338,   54,   70,  318,  319, 1338, 1338,
     1338, 1338, 1338, 1338,  320,   69, 1338,  321,  162,  163,

     1338, 1338, 1338, 1338, 1338, 1338,  164,   44, 1338,  165,
       24,  323,  324, 1338, 1338, 1338, 1338, 1338, 1338,  325,
       90, 1338,  326,  329,  330, 1338, 1338, 1338, 1338, 1338,
     1338,  331,   98, 1338,  332,  334,   75, 1338, 1338, 1338,
     1338, 1338, 1338,  335,   44, 1338,   44,   57,  336,  179,
     1338, 1338, 1338, 1338, 1338, 1338,  337,  182, 1338,  182,
       50,  338,  192, 1338, 1338, 1338, 1338, 1338, 1338,  339,
      195, 1338,  195,   24,  340,  206, 1338, 1338, 1338, 1338,
     1338, 1338,  341,  209, 1338,  209,  169,   95, 1338, 1338,
     1338, 1338, 1338, 1338,  170,   98, 1338,   98,  171, 1338,

     1338,   50,  172,  173,  174,  171,  171,  171,  174,  174,
      175,  176,  174,  176,  171,  342, 1338, 1338,   57,  343,
      344,  345,  342,  342,  342,  345,  345,  346,  347,  345,
      347,  342,  174, 1338, 1338, 1338,  188, 1338, 1338,  174,
      174,  174, 1338, 1338,  189, 1338, 1338, 1338,  174,  190,
     1338, 1338,   50,  191,  192,  193,  190,  190,  190,  193,
      193,  194,  195,  193,  195,  190,   57,  348,  349, 1338,
     1338, 1338, 1338, 1338, 1338,  350,  118,  352,  353, 1338,
     1338, 1338, 1338, 1338, 1338,  354,   50,  302,  303, 1338,
     1338, 1338, 1338, 1338, 1338,  304,   50,  356,  357, 1338,

     1338, 1338, 1338, 1338, 1338,  358,  176, 1338,  176,  345,
     1338, 1338, 1338,  359, 1338, 1338,  345,  345,  345, 1338,
     1338,  360, 1338, 1338, 1338,  345,   50,  338,  192, 1338,
     1338, 1338, 1338, 1338, 1338,  339,  195, 1338,  195,  361,
     1338, 1338,   57,  362,  363,  364,  361,  361,  361,  364,
      364,  365,  366,  364,  366,  361,  135,  284,  285, 1338,
     1338,  286, 1338, 1338, 1338,  287,  128,  295,  296, 1338,
     1338,  297, 1338, 1338, 1338,  298,   24,  323,  324, 1338,
     1338, 1338, 1338, 1338, 1338,  325,   90, 1338,  326,  329,
      330, 1338, 1338, 1338, 1338, 1338, 1338,  331,   98, 1338,

      332,  369, 1338, 1338,   57,  370,  371,  372,  369,  369,
      369,  372,  372,  373,  374,  372,  374,  369,   70,  376,
      377, 1338, 1338, 1338, 1338, 1338, 1338,  378,  380,  381,
     1338, 1338, 1338, 1338, 1338, 1338,  382,   98, 1338,   98,
      212, 1338, 1338,   50,  213,   52,  214,  212,  212,  212,
      214,  214,  212,   54,  214,   54,  212,  383, 1338, 1338,
       57,  384,  110,  385,  383,  383,  383,  385,  385,  383,
      112,  385,  112,  383,  214, 1338, 1338, 1338,  218, 1338,
     1338,  214,  214,  214, 1338, 1338,  214, 1338, 1338, 1338,
      214,  385, 1338, 1338, 1338,  386, 1338, 1338,  385,  385,

      385, 1338, 1338,  385, 1338, 1338, 1338,  385,   57,  387,
       59, 1338, 1338, 1338, 1338, 1338, 1338, 1338,   61, 1338,
       61,   24,  388,   87, 1338, 1338, 1338, 1338, 1338, 1338,
      389,   90, 1338,   90,  390,   95, 1338, 1338, 1338, 1338,
     1338, 1338,  391,   98, 1338,   98,  392, 1338, 1338,   50,
      393,  173,  394,  392,  392,  392,  394,  394,  395,  176,
      394,  176,  392,  396, 1338, 1338,   57,  397,  179,  398,
      396,  396,  396,  398,  398,  399,  182,  398,  182,  396,
      394, 1338, 1338, 1338,  400, 1338, 1338,  394,  394,  394,
     1338, 1338,  401, 1338, 1338, 1338,  394,  402, 1338, 1338,

       50,  403,  192,  404,  402,  402,  402,  404,  404,  405,
      195,  404,  195,  402,  226, 1338, 1338, 1338,  227,   95,
      228,  226,  226,  226,  228,  228,  229,   98,  228,   98,
      226,  406, 1338, 1338,   24,  407,  206,  408,  406,  406,
      406,  408,  408,  409,  209,  408,  209,  406,  390,   95,
     1338, 1338, 1338, 1338, 1338, 1338,  391,   98, 1338,   98,
      230, 1338, 1338,   50,  231,  232,  233,  230,  230,  230,
      233,  233,  230,  234,  233,  234,  230,  108, 1338, 1338,
     1338,  109, 1338, 1338,  108,  108,  108, 1338, 1338,  108,
     1338, 1338, 1338,  108,   50,  235,  236, 1338,  237, 1338,

     1338, 1338, 1338, 1338,  238,  233, 1338, 1338, 1338,  239,
     1338, 1338,  233,  233,  233, 1338, 1338,  233, 1338, 1338,
     1338,  233,   50,  235,  236,   57,  115,  116,  118,  411,
      412,   50,  414,  415, 1338, 1338, 1338, 1338, 1338, 1338,
     1338,  234, 1338,  234,  241,  242,  243, 1338, 1338,  244,
      248,  249,  250, 1338, 1338,  251,  241,  242,  243, 1338,
      252,  244,  241,  274,  275, 1338, 1338,  276,  241,  417,
     1338, 1338, 1338,  418,  241,  420, 1338, 1338, 1338,  421,
      241,  423,  424, 1338, 1338,  425,  248,  249,  250, 1338,
     1338,  251,  241,  423,  424, 1338,  426,  425,  241,  428,

      429, 1338, 1338,  430,  432,  433,  434, 1338, 1338,  435,
       50,  254,  255, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
       54, 1338,  256,   57,  258,  259, 1338, 1338, 1338, 1338,
     1338, 1338, 1338,  112, 1338,  260,   50,  254,  255, 1338,
      261, 1338, 1338, 1338, 1338, 1338,   54, 1338,  256,   50,
      316,   63, 1338, 1338, 1338, 1338, 1338, 1338, 1338,   54,
     1338,   54,   50,  437,  438, 1338, 1338, 1338, 1338, 1338,
     1338, 1338,  234, 1338,  439,   57,  258,  259, 1338, 1338,
     1338, 1338, 1338, 1338, 1338,  112, 1338,  260,   50,  437,
      438, 1338,  440, 1338, 1338, 1338, 1338, 1338,  234, 1338,

      439,   50,  442,  236, 1338, 1338, 1338, 1338, 1338, 1338,
     1338,  234, 1338,  234,  118,  444,  445, 1338, 1338, 1338,
     1338, 1338, 1338, 1338,  117, 1338,  446,  128,  263,  264,
     1338, 1338,  265, 1338, 1338, 1338,  266,  135,  448,  449,
     1338, 1338,  450,  128,  263,  264, 1338,  451,  265, 1338,
     1338, 1338,  266,  128,  290,  291, 1338, 1338,  292, 1338,
     1338, 1338,  293,  241,  274,  275, 1338, 1338,  276,  248,
      453,  454, 1338, 1338,  455,  128,  129,  130, 1338, 1338,
      131, 1338, 1338, 1338,  132,  135,  136,  137, 1338, 1338,
      138,  128,  129,  130, 1338,  139,  131, 1338, 1338, 1338,

      132,  128,  141,  142, 1338, 1338,  143, 1338, 1338, 1338,
      144,  241,  458,  459, 1338, 1338,  460, 1338, 1338, 1338,
      461,  248,  463,  464, 1338, 1338,  465, 1338, 1338, 1338,
      466,  241,  458,  459, 1338,  467,  460, 1338, 1338, 1338,
      461,  241,  469,  470, 1338, 1338,  471, 1338, 1338, 1338,
      472,  241,  474,  475, 1338, 1338,  476, 1338, 1338, 1338,
      477,  278,  479,  480, 1338, 1338,  481, 1338, 1338, 1338,
      482,  128,  290,  291, 1338, 1338,  292, 1338, 1338, 1338,
      293,  135,  484,  485, 1338, 1338,  486, 1338, 1338, 1338,
      487,  128,  490,  491, 1338, 1338,  492, 1338, 1338, 1338,

      493,  128,  295,  296, 1338, 1338,  297, 1338, 1338, 1338,
      298,  135,  495,  496, 1338, 1338,  497, 1338, 1338, 1338,
      498,  128,  295,  296, 1338,  499,  297, 1338, 1338, 1338,
      298,  128,  490,  491, 1338, 1338,  492, 1338, 1338, 1338,
      493,   57,  348,  349, 1338, 1338, 1338, 1338, 1338, 1338,
      350,   50,  183,  184, 1338,  185, 1338, 1338, 1338, 1338,
      186,   50,  302,  303, 1338, 1338, 1338, 1338, 1338, 1338,
      304,   57,  500,  501, 1338, 1338, 1338, 1338, 1338, 1338,
      502,   50,  302,  303, 1338,  367, 1338, 1338, 1338, 1338,
      304,   57,  503,  504, 1338, 1338, 1338, 1338, 1338, 1338,

      505,  309,   30, 1338, 1338, 1338, 1338, 1338, 1338,  310,
       22, 1338,   22,   24,  507,   68, 1338, 1338, 1338, 1338,
     1338, 1338, 1338,   28, 1338,   28,  334,   75, 1338, 1338,
     1338, 1338, 1338, 1338,  335,   44, 1338,   44,   50,  316,
       63, 1338, 1338, 1338, 1338, 1338, 1338, 1338,   54, 1338,
       54,   57,  509,  116, 1338, 1338, 1338, 1338, 1338, 1338,
     1338,  112, 1338,  112,  510, 1338, 1338,  128,  511,  512,
      510,  510,  513,  510,  510,  510,  514,  127,  510,  515,
      510,  135,  517,  518, 1338, 1338,  519, 1338, 1338, 1338,
     1338,  134, 1338,  520,  522, 1338, 1338,  128,  523,  524,

      522,  522,  525,  522,  522,  522,  526,  140,  522,  527,
      522,  528, 1338, 1338,  128,  529,  130,  528,  528,  530,
      528,  528,  528,  531,  127,  528,  127,  528,   50,  533,
      534, 1338, 1338, 1338, 1338, 1338, 1338,  535,  176, 1338,
      536,   57,  538,  539, 1338, 1338, 1338, 1338, 1338, 1338,
      540,  182, 1338,  541,   50,  533,  534, 1338,  542, 1338,
     1338, 1338, 1338,  535,  176, 1338,  536,   50,  544,  545,
     1338, 1338, 1338, 1338, 1338, 1338,  546,  195, 1338,  547,
       50,  549,  184, 1338, 1338, 1338, 1338, 1338, 1338,  550,
      176, 1338,  176,   70,  552,  553, 1338, 1338, 1338, 1338,

     1338, 1338,  554,  196, 1338,  555,  329,  330, 1338, 1338,
     1338, 1338, 1338, 1338,  331,   98, 1338,  332,   24,  557,
      558, 1338, 1338, 1338, 1338, 1338, 1338,  559,  209, 1338,
      560,  329,  330, 1338,  561, 1338, 1338, 1338, 1338,  331,
       98, 1338,  332,  563,  149, 1338, 1338, 1338, 1338, 1338,
     1338,  564,   98, 1338,   98,  334,   75, 1338, 1338, 1338,
     1338, 1338, 1338,  335,   44, 1338,   44,   24,  566,  146,
     1338, 1338, 1338, 1338, 1338, 1338,  567,   90, 1338,   90,
      563,  149, 1338, 1338, 1338, 1338, 1338, 1338,  564,   98,
     1338,   98,   57,  359,  344, 1338, 1338, 1338, 1338, 1338,

     1338,  360,  347, 1338,  347,   50,  338,  192, 1338, 1338,
     1338, 1338, 1338, 1338,  339,  195, 1338,  195,   57,  568,
      363, 1338, 1338, 1338, 1338, 1338, 1338,  569,  366, 1338,
      366,   50,  338,  192, 1338, 1338, 1338, 1338, 1338, 1338,
      339,  195, 1338,  195,   57,  570,  371, 1338, 1338, 1338,
     1338, 1338, 1338,  571,  374, 1338,  374,  572, 1338, 1338,
       50,  573,  574,  575,  572,  572,  572,  575,  575,  576,
      577,  575,  577,  572,  342, 1338, 1338,   57,  343,  344,
      345,  342,  342,  342,  345,  345,  346,  347,  345,  347,
      342,   50,  578,  579, 1338,  580, 1338, 1338, 1338, 1338,

      581,  582,  575, 1338, 1338, 1338,  583, 1338, 1338,  575,
      575,  575, 1338, 1338,  584, 1338, 1338, 1338,  575,  585,
     1338, 1338,   50,  586,  587,  588,  585,  585,  585,  588,
      588,  589,  590,  588,  590,  585,   50,  578,  579, 1338,
     1338, 1338, 1338, 1338, 1338,  581,   57,  348,  349, 1338,
     1338, 1338, 1338, 1338, 1338,  350,   50,  591,  592, 1338,
     1338, 1338, 1338, 1338, 1338,  593,  241,  458,  459, 1338,
     1338,  460, 1338, 1338, 1338,  461,  248,  595,  596, 1338,
     1338,  597, 1338, 1338, 1338,  598,  241,  458,  459, 1338,
      467,  460, 1338, 1338, 1338,  461,  241,  474,  475, 1338,

     1338,  476, 1338, 1338, 1338,  477,   57,  600,  601, 1338,
     1338, 1338, 1338, 1338, 1338,  602,  347, 1338,  603,   50,
      544,  545, 1338, 1338, 1338, 1338, 1338, 1338,  546,  195,
     1338,  547,   57,  359,  344, 1338, 1338, 1338, 1338, 1338,
     1338,  360,  347, 1338,  347,  588, 1338, 1338, 1338,  604,
     1338, 1338,  588,  588,  588, 1338, 1338,  605, 1338, 1338,
     1338,  588,  361, 1338, 1338,   57,  362,  363,  364,  361,
      361,  361,  364,  364,  365,  366,  364,  366,  361,   50,
      591,  592, 1338,  606, 1338, 1338, 1338, 1338,  593,  607,
      118,  609,  610, 1338, 1338, 1338, 1338, 1338, 1338,  611,

       50,  613,  614, 1338, 1338, 1338, 1338, 1338, 1338,  615,
      195, 1338,  195,  190, 1338, 1338, 1338,  191, 1338, 1338,
      190,  190,  190, 1338, 1338,  194, 1338, 1338, 1338,  190,
       50,  302,  303, 1338,  367, 1338, 1338, 1338, 1338,  304,
      368,   50,  302,  303, 1338, 1338, 1338, 1338, 1338, 1338,
      304,  128,  295,  296, 1338, 1338,  297, 1338, 1338, 1338,
      298,  135,  495,  496, 1338, 1338,  497, 1338, 1338, 1338,
      498,  128,  295,  296, 1338,  499,  297, 1338, 1338, 1338,
      298,   24,  557,  558, 1338, 1338, 1338, 1338, 1338, 1338,
      559,  209, 1338,  560,  616, 1338, 1338,   50,  617,  232,

      618,  616,  616,  616,  618,  618,  616,  234,  618,  234,
      616,  383, 1338, 1338,   57,  384,  110,  385,  383,  383,
      383,  385,  385,  383,  112,  385,  112,  383,  618, 1338,
     1338, 1338,  619, 1338, 1338,  618,  618,  618, 1338, 1338,
      618, 1338, 1338, 1338,  618,  385, 1338, 1338, 1338,  386,
     1338, 1338,  385,  385,  385, 1338, 1338,  385, 1338, 1338,
     1338,  385,   57,  620,  179, 1338, 1338, 1338, 1338, 1338,
     1338,  621,  182, 1338,  182,   50,  622,  192, 1338, 1338,
     1338, 1338, 1338, 1338,  623,  195, 1338,  195,   24,  624,
      206, 1338, 1338, 1338, 1338, 1338, 1338,  625,  209, 1338,

      209,  390,   95, 1338, 1338, 1338, 1338, 1338, 1338,  391,
       98, 1338,   98,  392, 1338, 1338,   50,  393,  173,  394,
      392,  392,  392,  394,  394,  395,  176,  394,  176,  392,
      626, 1338, 1338,   57,  627,  344,  628,  626,  626,  626,
      628,  628,  629,  347,  628,  347,  626,  394, 1338, 1338,
     1338,  400, 1338, 1338,  394,  394,  394, 1338, 1338,  401,
     1338, 1338, 1338,  394,  402, 1338, 1338,   50,  403,  192,
      404,  402,  402,  402,  404,  404,  405,  195,  404,  195,
      402,  628, 1338, 1338, 1338,  630, 1338, 1338,  628,  628,
      628, 1338, 1338,  631, 1338, 1338, 1338,  628,   50,  622,

      192, 1338, 1338, 1338, 1338, 1338, 1338,  623,  195, 1338,
      195,  632, 1338, 1338,   57,  633,  363,  634,  632,  632,
      632,  634,  634,  635,  366,  634,  366,  632,  636, 1338,
     1338,   57,  637,  371,  638,  636,  636,  636,  638,  638,
      639,  374,  638,  374,  636,  241,  423,  424, 1338, 1338,
      425,  248,  249,  250, 1338, 1338,  251,  241,  423,  424,
     1338,  426,  425,   50,  437,  438, 1338, 1338, 1338, 1338,
     1338, 1338, 1338,  234, 1338,  439,   57,  258,  259, 1338,
     1338, 1338, 1338, 1338, 1338, 1338,  112, 1338,  260,   50,
      437,  438, 1338,  440, 1338, 1338, 1338, 1338, 1338,  234,

     1338,  439,  241,  417, 1338, 1338, 1338,  418,  241,  417,
     1338, 1338, 1338,  418,  241,  641, 1338, 1338, 1338,  642,
      241,  420, 1338, 1338, 1338,  421,  241,  641, 1338, 1338,
     1338,  642,  241,  420, 1338, 1338, 1338,  421,  248,  249,
      250, 1338, 1338,  251,  241,  428,  429, 1338, 1338,  430,
      432,  644,  645, 1338, 1338,  646,  241,  428,  429, 1338,
     1338,  430,  248,  453,  454, 1338, 1338,  455,  241,  242,
      243, 1338, 1338,  244,  241,  242,  243, 1338,  252,  244,
      241,  274,  275, 1338, 1338,  276,   57,  258,  259, 1338,
     1338, 1338, 1338, 1338, 1338, 1338,  112, 1338,  260,   50,

      442,  236, 1338, 1338, 1338, 1338, 1338, 1338, 1338,  234,
     1338,  234,  118,  649,  650, 1338, 1338, 1338, 1338, 1338,
     1338, 1338,  410, 1338,  651,   50,  442,  236, 1338, 1338,
     1338, 1338, 1338, 1338, 1338,  234, 1338,  234,   57,  509,
      116, 1338, 1338, 1338, 1338, 1338, 1338, 1338,  112, 1338,
      112,  241,  653,  654, 1338, 1338,  655, 1338, 1338, 1338,
     1338,  240, 1338,  656,  248,  658,  659, 1338, 1338,  660,
     1338, 1338, 1338, 1338,  247, 1338,  661,  241,  653,  654,
     1338,  662,  655, 1338, 1338, 1338, 1338,  240, 1338,  656,
      241,  664,  243, 1338, 1338,  665, 1338, 1338, 1338, 1338,

      240, 1338,  240,  241,  274,  275, 1338, 1338,  276,  248,
      667,  668, 1338, 1338,  669,  278,  671,  672, 1338, 1338,
      673, 1338, 1338, 1338,  674,  248,  453,  454, 1338, 1338,
      455,  432,  676,  677, 1338, 1338,  678,  241,  458,  459,
     1338, 1338,  460, 1338, 1338, 1338,  461,  248,  595,  596,
     1338, 1338,  597, 1338, 1338, 1338,  598,  241,  458,  459,
     1338,  467,  460, 1338, 1338, 1338,  461,  241,  469,  470,
     1338, 1338,  471, 1338, 1338, 1338,  472,  241,  474,  475,
     1338, 1338,  476, 1338, 1338, 1338,  477,  248,  595,  596,
     1338, 1338,  597, 1338, 1338, 1338,  598,  241,  469,  470,

     1338, 1338,  471, 1338, 1338, 1338,  472,  241,  474,  475,
     1338, 1338,  476, 1338, 1338, 1338,  477,  432,  680,  681,
     1338, 1338,  682, 1338, 1338, 1338,  683,  248,  685,  686,
     1338, 1338,  687, 1338, 1338, 1338,  688,  241,  691,  692,
     1338, 1338,  693, 1338, 1338, 1338,  694,  248,  696,  697,
     1338, 1338,  698, 1338, 1338, 1338,  699,  241,  691,  692,
     1338, 1338,  693, 1338, 1338, 1338,  694,  128,  141,  142,
     1338, 1338,  143, 1338, 1338, 1338,  144,  135,  284,  285,
     1338, 1338,  286, 1338, 1338, 1338,  287,  128,  141,  142,
     1338,  288,  143, 1338, 1338, 1338,  144,  128,  290,  291,

     1338, 1338,  292, 1338, 1338, 1338,  293,  128,  295,  296,
     1338, 1338,  297, 1338, 1338, 1338,  298,  248,  702,  703,
     1338, 1338,  704, 1338, 1338, 1338,  705,  278,  707,  708,
     1338, 1338,  709, 1338, 1338, 1338,  710,  128,  490,  491,
     1338, 1338,  492, 1338, 1338, 1338,  493,  135,  712,  713,
     1338, 1338,  714, 1338, 1338, 1338,  715,  128,  490,  491,
     1338,  716,  492, 1338, 1338, 1338,  493,  248,  718,  719,
     1338, 1338,  720, 1338, 1338, 1338,  721,  278,  723,  724,
     1338, 1338,  725, 1338, 1338, 1338,  726,   57,  500,  501,
     1338, 1338, 1338, 1338, 1338, 1338,  502,   50,  591,  592,

     1338,  606, 1338, 1338, 1338, 1338,  593,   50,  591,  592,
     1338, 1338, 1338, 1338, 1338, 1338,  593,   57,  500,  501,
     1338, 1338, 1338, 1338, 1338, 1338,  502,   50,  302,  303,
     1338,  367, 1338, 1338, 1338, 1338,  304,   50,  302,  303,
     1338, 1338, 1338, 1338, 1338, 1338,  304,   50,  316,   63,
     1338, 1338, 1338, 1338, 1338, 1338, 1338,   54, 1338,   54,
       57,  728,  126, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
       61, 1338,   61,   57,  509,  116, 1338, 1338, 1338, 1338,
     1338, 1338, 1338,  112, 1338,  112,  510, 1338, 1338,  128,
      511,  512,  510,  510,  513,  510,  510,  510,  514,  127,

      510,  515,  510,  135,  517,  518, 1338, 1338,  519, 1338,
     1338, 1338, 1338,  134, 1338,  520,  729, 1338, 1338,  128,
      730,  731,  729,  729,  732,  729,  729,  729,  733,  262,
      729,  734,  729,  522, 1338, 1338,  128,  523,  524,  522,
      522,  525,  522,  522,  522,  526,  140,  522,  527,  522,
      528, 1338, 1338,  128,  529,  130,  528,  528,  530,  528,
      528,  528,  531,  127,  528,  127,  528,  241,  653,  654,
     1338, 1338,  655, 1338, 1338, 1338, 1338,  240, 1338,  656,
      248,  736,  737, 1338, 1338,  738, 1338, 1338, 1338, 1338,
      269, 1338,  739,  241,  653,  654, 1338,  662,  655, 1338,

     1338, 1338, 1338,  240, 1338,  656,  241,  741,  742, 1338,
     1338,  743, 1338, 1338, 1338, 1338,  273, 1338,  744,  241,
      664,  243, 1338, 1338,  665, 1338, 1338, 1338, 1338,  240,
     1338,  240,  745, 1338, 1338,  278,  746,  747,  745,  745,
      748,  745,  745,  745,  749,  277,  745,  750,  745,  751,
     1338, 1338,  135,  752,  753,  751,  751,  754,  751,  751,
      751,  755,  283,  751,  756,  751,  758, 1338, 1338,  128,
      759,  760,  758,  758,  761,  758,  758,  758,  762,  289,
      758,  763,  758,  764, 1338, 1338,  128,  765,  766,  764,
      764,  767,  764,  764,  764,  768,  294,  764,  769,  764,

      770, 1338, 1338,  128,  771,  142,  770,  770,  772,  770,
      770,  770,  773,  140,  770,  140,  770,  135,  775,  137,
     1338, 1338,  776, 1338, 1338, 1338, 1338,  134, 1338,  134,
      777, 1338, 1338,  128,  778,  264,  777,  777,  779,  777,
      777,  777,  780,  262,  777,  262,  777,   50,  533,  534,
     1338, 1338, 1338, 1338, 1338, 1338,  535,  176, 1338,  536,
       57,  600,  601, 1338, 1338, 1338, 1338, 1338, 1338,  602,
      347, 1338,  603,   50,  533,  534, 1338,  542, 1338, 1338,
     1338, 1338,  535,  176, 1338,  536,   50,  544,  545, 1338,
     1338, 1338, 1338, 1338, 1338,  546,  195, 1338,  547,   50,

      549,  184, 1338, 1338, 1338, 1338, 1338, 1338,  550,  176,
     1338,  176,   57,  600,  601, 1338, 1338, 1338, 1338, 1338,
     1338,  602,  347, 1338,  603,   50,  544,  545, 1338, 1338,
     1338, 1338, 1338, 1338,  546,  195, 1338,  547,   50,  549,
      184, 1338, 1338, 1338, 1338, 1338, 1338,  550,  176, 1338,
      176,  118,  782,  783, 1338, 1338, 1338, 1338, 1338, 1338,
      784,  351, 1338,  785,   57,  787,  788, 1338, 1338, 1338,
     1338, 1338, 1338,  789,  366, 1338,  790,   50,  793,  303,
     1338, 1338, 1338, 1338, 1338, 1338,  794,  195, 1338,  195,
       57,  796,  349, 1338, 1338, 1338, 1338, 1338, 1338,  797,

      347, 1338,  347,   50,  793,  303, 1338, 1338, 1338, 1338,
     1338, 1338,  794,  195, 1338,  195,   57,  799,  800, 1338,
     1338, 1338, 1338, 1338, 1338,  801,  374, 1338,  802,   70,
      804,  805, 1338, 1338, 1338, 1338, 1338, 1338,  806,  375,
     1338,  807,  563,  149, 1338, 1338, 1338, 1338, 1338, 1338,
      564,   98, 1338,   98,   24,  809,  306, 1338, 1338, 1338,
     1338, 1338, 1338,  810,  209, 1338,  209,  563,  149, 1338,
     1338, 1338, 1338, 1338, 1338,  564,   98, 1338,   98,   57,
      812,  300, 1338, 1338, 1338, 1338, 1338, 1338,  813,  182,
     1338,  182,   57,  568,  363, 1338, 1338, 1338, 1338, 1338,

     1338,  569,  366, 1338,  366,   50,  604,  587, 1338, 1338,
     1338, 1338, 1338, 1338,  605,  590, 1338,  590,   57,  568,
      363, 1338, 1338, 1338, 1338, 1338, 1338,  569,  366, 1338,
      366,   50,  338,  192, 1338, 1338, 1338, 1338, 1338, 1338,
      339,  195, 1338,  195,  572, 1338, 1338,   50,  573,  574,
      575,  572,  572,  572,  575,  575,  576,  577,  575,  577,
      572,  342, 1338, 1338,   57,  343,  344,  345,  342,  342,
      342,  345,  345,  346,  347,  345,  347,  342,   50,  578,
      579, 1338,  580, 1338, 1338, 1338, 1338,  581,  582,  575,
     1338, 1338, 1338,  583, 1338, 1338,  575,  575,  575, 1338,

     1338,  584, 1338, 1338, 1338,  575,  585, 1338, 1338,   50,
      586,  587,  588,  585,  585,  585,  588,  588,  589,  590,
      588,  590,  585,   50,  578,  579, 1338, 1338, 1338, 1338,
     1338, 1338,  581,   57,  348,  349, 1338, 1338, 1338, 1338,
     1338, 1338,  350,  118,  815,  816, 1338, 1338, 1338, 1338,
     1338, 1338,  817,   50,  591,  592, 1338, 1338, 1338, 1338,
     1338, 1338,  593,   50,  819,  820, 1338, 1338, 1338, 1338,
     1338, 1338,  821,  577, 1338,  577,  345, 1338, 1338, 1338,
      359, 1338, 1338,  345,  345,  345, 1338, 1338,  360, 1338,
     1338, 1338,  345,   50,  604,  587, 1338, 1338, 1338, 1338,

     1338, 1338,  605,  590, 1338,  590,  361, 1338, 1338, 1338,
      362, 1338, 1338,  361,  361,  361, 1338, 1338,  365, 1338,
     1338, 1338,  361,   50,  591,  592, 1338,  606, 1338, 1338,
     1338, 1338,  593,  607,   57,  500,  501, 1338, 1338, 1338,
     1338, 1338, 1338,  502,  241,  823,  824, 1338, 1338,  825,
     1338, 1338, 1338,  826,  248,  595,  596, 1338, 1338,  597,
     1338, 1338, 1338,  598,  241,  823,  824, 1338,  827,  825,
     1338, 1338, 1338,  826,  241,  829,  830, 1338, 1338,  831,
     1338, 1338, 1338,  832,  241,  834,  835, 1338, 1338,  836,
     1338, 1338, 1338,  837,   50,  839,  840, 1338, 1338, 1338,

     1338, 1338, 1338,  841,  577, 1338,  842,   50,  839,  840,
     1338,  843, 1338, 1338, 1338, 1338,  841,  577, 1338,  842,
       50,  845,  846, 1338, 1338, 1338, 1338, 1338, 1338,  847,
      590, 1338,  848,   50,  850,  579, 1338, 1338, 1338, 1338,
     1338, 1338,  851,  577, 1338,  577,  118,  853,  854, 1338,
     1338, 1338, 1338, 1338, 1338,  855,   50,  857,  858, 1338,
     1338, 1338, 1338, 1338, 1338,  859,  590, 1338,  590,  241,
      474,  475, 1338, 1338,  476, 1338, 1338, 1338,  477,  248,
      696,  697, 1338, 1338,  698, 1338, 1338, 1338,  699,  241,
      474,  475, 1338,  700,  476, 1338, 1338, 1338,  477,   57,

      787,  788, 1338, 1338, 1338, 1338, 1338, 1338,  789,  366,
     1338,  790,  616, 1338, 1338,   50,  617,  232,  618,  616,
      616,  616,  618,  618,  616,  234,  618,  234,  616,  383,
     1338, 1338,   57,  384,  110,  385,  383,  383,  383,  385,
      385,  383,  112,  385,  112,  383,  618, 1338, 1338, 1338,
      619, 1338, 1338,  618,  618,  618, 1338, 1338,  618, 1338,
     1338, 1338,  618,  385, 1338, 1338, 1338,  386, 1338, 1338,
      385,  385,  385, 1338, 1338,  385, 1338, 1338, 1338,  385,
       57,  630,  344, 1338, 1338, 1338, 1338, 1338, 1338,  631,
      347, 1338,  347,   50,  622,  192, 1338, 1338, 1338, 1338,

     1338, 1338,  623,  195, 1338,  195,   57,  860,  363, 1338,
     1338, 1338, 1338, 1338, 1338,  861,  366, 1338,  366,   50,
      622,  192, 1338, 1338, 1338, 1338, 1338, 1338,  623,  195,
     1338,  195,   57,  862,  371, 1338, 1338, 1338, 1338, 1338,
     1338,  863,  374, 1338,  374,  864, 1338, 1338,   50,  865,
      574,  866,  864,  864,  864,  866,  866,  867,  577,  866,
      577,  864,  626, 1338, 1338,   57,  627,  344,  628,  626,
      626,  626,  628,  628,  629,  347,  628,  347,  626,  866,
     1338, 1338, 1338,  868, 1338, 1338,  866,  866,  866, 1338,
     1338,  869, 1338, 1338, 1338,  866,  870, 1338, 1338,   50,

      871,  587,  872,  870,  870,  870,  872,  872,  873,  590,
      872,  590,  870,   57,  630,  344, 1338, 1338, 1338, 1338,
     1338, 1338,  631,  347, 1338,  347,  872, 1338, 1338, 1338,
      874, 1338, 1338,  872,  872,  872, 1338, 1338,  875, 1338,
     1338, 1338,  872,  632, 1338, 1338,   57,  633,  363,  634,
      632,  632,  632,  634,  634,  635,  366,  634,  366,  632,
      402, 1338, 1338, 1338,  403, 1338, 1338,  402,  402,  402,
     1338, 1338,  405, 1338, 1338, 1338,  402,  241,  641, 1338,
     1338, 1338,  642,  241,  641, 1338, 1338, 1338,  642,  241,
      423,  424, 1338, 1338,  425,  248,  249,  250, 1338, 1338,

      251,  241,  423,  424, 1338,  426,  425,  241,  428,  429,
     1338, 1338,  430,  432,  877,  878, 1338, 1338,  879,  241,
      881,  882, 1338, 1338,  883, 1338, 1338, 1338, 1338,  422,
     1338,  884,  248,  658,  659, 1338, 1338,  660, 1338, 1338,
     1338, 1338,  247, 1338,  661,  241,  881,  882, 1338,  885,
      883, 1338, 1338, 1338, 1338,  422, 1338,  884,  241,  887,
      424, 1338, 1338,  888, 1338, 1338, 1338, 1338,  422, 1338,
      422,  241,  653,  654, 1338, 1338,  655, 1338, 1338, 1338,
     1338,  240, 1338,  656,  248,  658,  659, 1338, 1338,  660,
     1338, 1338, 1338, 1338,  247, 1338,  661,  241,  653,  654,

     1338,  662,  655, 1338, 1338, 1338, 1338,  240, 1338,  656,
      241,  741,  742, 1338, 1338,  743, 1338, 1338, 1338, 1338,
      273, 1338,  744,  241,  664,  243, 1338, 1338,  665, 1338,
     1338, 1338, 1338,  240, 1338,  240,  241,  890,  891, 1338,
     1338,  892, 1338, 1338, 1338, 1338,  427, 1338,  893,  241,
      887,  424, 1338, 1338,  888, 1338, 1338, 1338, 1338,  422,
     1338,  422,  432,  895,  896, 1338, 1338,  897, 1338, 1338,
     1338, 1338,  431, 1338,  898,  241,  664,  243, 1338, 1338,
      665, 1338, 1338, 1338, 1338,  240, 1338,  240,  248,  900,
      250, 1338, 1338,  901, 1338, 1338, 1338, 1338,  247, 1338,

      247,  241,  903,  275, 1338, 1338,  904, 1338, 1338, 1338,
     1338,  273, 1338,  273,  241,  274,  275, 1338, 1338,  276,
      248,  453,  454, 1338, 1338,  455,  241,  274,  275, 1338,
      456,  276,  128,  263,  264, 1338, 1338,  265, 1338, 1338,
     1338,  266,  135,  448,  449, 1338, 1338,  450,  128,  263,
      264, 1338,  451,  265, 1338, 1338, 1338,  266,  128,  290,
      291, 1338, 1338,  292, 1338, 1338, 1338,  293,  248,  453,
      454, 1338, 1338,  455,  241,  458,  459, 1338, 1338,  460,
     1338, 1338, 1338,  461,  248,  595,  596, 1338, 1338,  597,
     1338, 1338, 1338,  598,  241,  458,  459, 1338,  467,  460,

     1338, 1338, 1338,  461,  241,  469,  470, 1338, 1338,  471,
     1338, 1338, 1338,  472,  241,  474,  475, 1338, 1338,  476,
     1338, 1338, 1338,  477,  241,  829,  830, 1338, 1338,  831,
     1338, 1338, 1338,  832,  248,  685,  686, 1338, 1338,  687,
     1338, 1338, 1338,  688,  241,  829,  830, 1338,  905,  831,
     1338, 1338, 1338,  832,  241,  907,  908, 1338, 1338,  909,
     1338, 1338, 1338,  910,  432,  912,  913, 1338, 1338,  914,
     1338, 1338, 1338,  915,  241,  691,  692, 1338, 1338,  693,
     1338, 1338, 1338,  694,  248,  917,  918, 1338, 1338,  919,
     1338, 1338, 1338,  920,  241,  691,  692, 1338,  921,  693,

     1338, 1338, 1338,  694,  241,  834,  835, 1338, 1338,  836,
     1338, 1338, 1338,  837,  248,  696,  697, 1338, 1338,  698,
     1338, 1338, 1338,  699,  241,  834,  835, 1338,  922,  836,
     1338, 1338, 1338,  837,  241,  907,  908, 1338, 1338,  909,
     1338, 1338, 1338,  910,  432,  924,  925, 1338, 1338,  926,
     1338, 1338, 1338,  927,  241,  469,  470, 1338, 1338,  471,
     1338, 1338, 1338,  472,  248,  685,  686, 1338, 1338,  687,
     1338, 1338, 1338,  688,  128,  290,  291, 1338, 1338,  292,
     1338, 1338, 1338,  293,  135,  484,  485, 1338, 1338,  486,
     1338, 1338, 1338,  487,  128,  490,  491, 1338, 1338,  492,

     1338, 1338, 1338,  493,  248,  929,  930, 1338, 1338,  931,
     1338, 1338, 1338,  932,  278,  934,  935, 1338, 1338,  936,
     1338, 1338, 1338,  937,  241,  474,  475, 1338, 1338,  476,
     1338, 1338, 1338,  477,  248,  696,  697, 1338, 1338,  698,
     1338, 1338, 1338,  699,  128,  295,  296, 1338, 1338,  297,
     1338, 1338, 1338,  298,  135,  495,  496, 1338, 1338,  497,
     1338, 1338, 1338,  498,  128,  295,  296, 1338,  499,  297,
     1338, 1338, 1338,  298,  128,  490,  491, 1338, 1338,  492,
     1338, 1338, 1338,  493,   50,  316,   63, 1338, 1338, 1338,
     1338, 1338, 1338, 1338,   54, 1338,   54,   57,  509,  116,

     1338, 1338, 1338, 1338, 1338, 1338, 1338,  112, 1338,  112,
      729, 1338, 1338,  128,  730,  731,  729,  729,  732,  729,
      729,  729,  733,  262,  729,  734,  729,  135,  939,  940,
     1338, 1338,  941, 1338, 1338, 1338, 1338,  447, 1338,  942,
      758, 1338, 1338,  128,  759,  760,  758,  758,  761,  758,
      758,  758,  762,  289,  758,  763,  758,  777, 1338, 1338,
      128,  778,  264,  777,  777,  779,  777,  777,  777,  780,
      262,  777,  262,  777,  241,  653,  654, 1338, 1338,  655,
     1338, 1338, 1338, 1338,  240, 1338,  656,  248,  658,  659,
     1338, 1338,  660, 1338, 1338, 1338, 1338,  247, 1338,  661,

      241,  653,  654, 1338,  662,  655, 1338, 1338, 1338, 1338,
      240, 1338,  656,  241,  741,  742, 1338, 1338,  743, 1338,
     1338, 1338, 1338,  273, 1338,  744,  241,  664,  243, 1338,
     1338,  665, 1338, 1338, 1338, 1338,  240, 1338,  240,  241,
      741,  742, 1338, 1338,  743, 1338, 1338, 1338, 1338,  273,
     1338,  744,  248,  945,  946, 1338, 1338,  947, 1338, 1338,
     1338, 1338,  452, 1338,  948,  241,  903,  275, 1338, 1338,
      904, 1338, 1338, 1338, 1338,  273, 1338,  273,  510, 1338,
     1338,  128,  511,  512,  510,  510,  513,  510,  510,  510,
      514,  127,  510,  515,  510,  135,  517,  518, 1338, 1338,

      519, 1338, 1338, 1338, 1338,  134, 1338,  520,  522, 1338,
     1338,  128,  523,  524,  522,  522,  525,  522,  522,  522,
      526,  140,  522,  527,  522,  528, 1338, 1338,  128,  529,
      130,  528,  528,  530,  528,  528,  528,  531,  127,  528,
      127,  528,  950, 1338, 1338,  241,  951,  952,  950,  950,
      953,  950,  950,  950,  954,  457,  950,  955,  950,  956,
     1338, 1338,  248,  957,  958,  956,  956,  959,  956,  956,
      956,  960,  462,  956,  961,  956,  963, 1338, 1338,  241,
      964,  965,  963,  963,  966,  963,  963,  963,  967,  468,
      963,  968,  963,  969, 1338, 1338,  241,  970,  971,  969,

      969,  972,  969,  969,  969,  973,  473,  969,  974,  969,
      975, 1338, 1338,  241,  976,  459,  975,  975,  977,  975,
      975,  975,  978,  457,  975,  457,  975,  979, 1338, 1338,
      278,  980,  981,  979,  979,  982,  979,  979,  979,  983,
      478,  979,  984,  979,  985, 1338, 1338,  135,  986,  987,
      985,  985,  988,  985,  985,  985,  989,  483,  985,  990,
      985,  992, 1338, 1338,  128,  993,  994,  992,  992,  995,
      992,  992,  992,  996,  489,  992,  997,  992,  998, 1338,
     1338,  128,  999,  291,  998,  998, 1000,  998,  998,  998,
     1001,  289,  998,  289,  998,  764, 1338, 1338,  128,  765,

      766,  764,  764,  767,  764,  764,  764,  768,  294,  764,
      769,  764, 1002, 1338, 1338,  135, 1003, 1004, 1002, 1002,
     1005, 1002, 1002, 1002, 1006,  494, 1002, 1007, 1002, 1009,
     1338, 1338,  128, 1010,  296, 1009, 1009, 1011, 1009, 1009,
     1009, 1012,  294, 1009,  294, 1009,  770, 1338, 1338,  128,
      771,  142,  770,  770,  772,  770,  770,  770,  773,  140,
      770,  140,  770, 1013, 1338, 1338,  135, 1014,  285, 1013,
     1013, 1015, 1013, 1013, 1013, 1016,  283, 1013,  283, 1013,
      241,  664,  243, 1338, 1338,  665, 1338, 1338, 1338, 1338,
      240, 1338,  240,  248, 1018,  271, 1338, 1338, 1019, 1338,

     1338, 1338, 1338,  269, 1338,  269,  241,  903,  275, 1338,
     1338,  904, 1338, 1338, 1338, 1338,  273, 1338,  273,  135,
     1021,  449, 1338, 1338, 1022, 1338, 1338, 1338, 1338,  447,
     1338,  447, 1023, 1338, 1338,  248, 1024, 1025, 1023, 1023,
     1026, 1023, 1023, 1023, 1027,  594, 1023, 1028, 1023,   50,
      845,  846, 1338, 1338, 1338, 1338, 1338, 1338,  847,  590,
     1338,  848,   57,  787,  788, 1338, 1338, 1338, 1338, 1338,
     1338,  789,  366, 1338,  790,   50,  845,  846, 1338, 1029,
     1338, 1338, 1338, 1338,  847,  590, 1338,  848,   50, 1031,
      592, 1338, 1338, 1338, 1338, 1338, 1338, 1032,  590, 1338,

      590,  118, 1034, 1035, 1338, 1338, 1338, 1338, 1338, 1338,
     1036,  608, 1338, 1037,   50,  793,  303, 1338, 1338, 1338,
     1338, 1338, 1338,  794,  195, 1338,  195,   57, 1039,  501,
     1338, 1338, 1338, 1338, 1338, 1338, 1040,  366, 1338,  366,
       50,  793,  303, 1338, 1338, 1338, 1338, 1338, 1338,  794,
      195, 1338,  195,   50,  850,  579, 1338, 1338, 1338, 1338,
     1338, 1338,  851,  577, 1338,  577,   57,  796,  349, 1338,
     1338, 1338, 1338, 1338, 1338,  797,  347, 1338,  347,   50,
     1031,  592, 1338, 1338, 1338, 1338, 1338, 1338, 1032,  590,
     1338,  590,   50,  544,  545, 1338, 1338, 1338, 1338, 1338,

     1338,  546,  195, 1338,  547,   57,  787,  788, 1338, 1338,
     1338, 1338, 1338, 1338,  789,  366, 1338,  790,   50,  544,
      545, 1338,  791, 1338, 1338, 1338, 1338,  546,  195, 1338,
      547,   57, 1042,  504, 1338, 1338, 1338, 1338, 1338, 1338,
     1043,  374, 1338,  374,   50,  549,  184, 1338, 1338, 1338,
     1338, 1338, 1338,  550,  176, 1338,  176,   57,  796,  349,
     1338, 1338, 1338, 1338, 1338, 1338,  797,  347, 1338,  347,
      241,  823,  824, 1338, 1338,  825, 1338, 1338, 1338,  826,
      248,  595,  596, 1338, 1338,  597, 1338, 1338, 1338,  598,
      241,  823,  824, 1338,  827,  825, 1338, 1338, 1338,  826,

      241,  834,  835, 1338, 1338,  836, 1338, 1338, 1338,  837,
       50,  839,  840, 1338, 1338, 1338, 1338, 1338, 1338,  841,
      577, 1338,  842,   57,  600,  601, 1338, 1338, 1338, 1338,
     1338, 1338,  602,  347, 1338,  603,   50,  839,  840, 1338,
      843, 1338, 1338, 1338, 1338,  841,  577, 1338,  842,  248,
      595,  596, 1338, 1338,  597, 1338, 1338, 1338,  598,  241,
      829,  830, 1338, 1338,  831, 1338, 1338, 1338,  832,  241,
      834,  835, 1338, 1338,  836, 1338, 1338, 1338,  837,  432,
     1045, 1046, 1338, 1338, 1047, 1338, 1338, 1338, 1048,  241,
      829,  830, 1338, 1338,  831, 1338, 1338, 1338,  832,  248,

      685,  686, 1338, 1338,  687, 1338, 1338, 1338,  688,  241,
      907,  908, 1338, 1338,  909, 1338, 1338, 1338,  910,  248,
      696,  697, 1338, 1338,  698, 1338, 1338, 1338,  699,  241,
      907,  908, 1338, 1338,  909, 1338, 1338, 1338,  910,   57,
      600,  601, 1338, 1338, 1338, 1338, 1338, 1338,  602,  347,
     1338,  603,   50,  850,  579, 1338, 1338, 1338, 1338, 1338,
     1338,  851,  577, 1338,  577,  118, 1050, 1051, 1338, 1338,
     1338, 1338, 1338, 1338, 1052,  814, 1338, 1053,  248,  696,
      697, 1338, 1338,  698, 1338, 1338, 1338,  699,   57,  860,
      363, 1338, 1338, 1338, 1338, 1338, 1338,  861,  366, 1338,

      366,   50,  874,  587, 1338, 1338, 1338, 1338, 1338, 1338,
      875,  590, 1338,  590,   57,  860,  363, 1338, 1338, 1338,
     1338, 1338, 1338,  861,  366, 1338,  366,   50,  622,  192,
     1338, 1338, 1338, 1338, 1338, 1338,  623,  195, 1338,  195,
      864, 1338, 1338,   50,  865,  574,  866,  864,  864,  864,
      866,  866,  867,  577,  866,  577,  864,  626, 1338, 1338,
       57,  627,  344,  628,  626,  626,  626,  628,  628,  629,
      347,  628,  347,  626,  866, 1338, 1338, 1338,  868, 1338,
     1338,  866,  866,  866, 1338, 1338,  869, 1338, 1338, 1338,
      866,  870, 1338, 1338,   50,  871,  587,  872,  870,  870,

      870,  872,  872,  873,  590,  872,  590,  870,  628, 1338,
     1338, 1338,  630, 1338, 1338,  628,  628,  628, 1338, 1338,
      631, 1338, 1338, 1338,  628,   50,  874,  587, 1338, 1338,
     1338, 1338, 1338, 1338,  875,  590, 1338,  590,  632, 1338,
     1338, 1338,  633, 1338, 1338,  632,  632,  632, 1338, 1338,
      635, 1338, 1338, 1338,  632,  241,  428,  429, 1338, 1338,
      430,  248,  453,  454, 1338, 1338,  455,  241,  428,  429,
     1338,  647,  430,  241,  881,  882, 1338, 1338,  883, 1338,
     1338, 1338, 1338,  422, 1338,  884,  248,  658,  659, 1338,
     1338,  660, 1338, 1338, 1338, 1338,  247, 1338,  661,  241,

      881,  882, 1338,  885,  883, 1338, 1338, 1338, 1338,  422,
     1338,  884,  241,  890,  891, 1338, 1338,  892, 1338, 1338,
     1338, 1338,  427, 1338,  893,  241,  887,  424, 1338, 1338,
      888, 1338, 1338, 1338, 1338,  422, 1338,  422,  432, 1055,
     1056, 1338, 1338, 1057, 1338, 1338, 1338, 1338,  643, 1338,
     1058,  241,  887,  424, 1338, 1338,  888, 1338, 1338, 1338,
     1338,  422, 1338,  422,  248,  900,  250, 1338, 1338,  901,
     1338, 1338, 1338, 1338,  247, 1338,  247,  241, 1060,  429,
     1338, 1338, 1061, 1338, 1338, 1338, 1338,  427, 1338,  427,
      241,  890,  891, 1338, 1338,  892, 1338, 1338, 1338, 1338,

      427, 1338,  893,  248,  945,  946, 1338, 1338,  947, 1338,
     1338, 1338, 1338,  452, 1338,  948,  241, 1060,  429, 1338,
     1338, 1061, 1338, 1338, 1338, 1338,  427, 1338,  427,  241,
      653,  654, 1338, 1338,  655, 1338, 1338, 1338, 1338,  240,
     1338,  656,  248,  658,  659, 1338, 1338,  660, 1338, 1338,
     1338, 1338,  247, 1338,  661,  241,  653,  654, 1338,  662,
      655, 1338, 1338, 1338, 1338,  240, 1338,  656,  241,  741,
      742, 1338, 1338,  743, 1338, 1338, 1338, 1338,  273, 1338,
      744,  241,  664,  243, 1338, 1338,  665, 1338, 1338, 1338,
     1338,  240, 1338,  240,  248,  900,  250, 1338, 1338,  901,

     1338, 1338, 1338, 1338,  247, 1338,  247,  241,  903,  275,
     1338, 1338,  904, 1338, 1338, 1338, 1338,  273, 1338,  273,
      248, 1064,  454, 1338, 1338, 1065, 1338, 1338, 1338, 1338,
      452, 1338,  452,  241,  903,  275, 1338, 1338,  904, 1338,
     1338, 1338, 1338,  273, 1338,  273,  432, 1067, 1068, 1338,
     1338, 1069, 1338, 1338, 1338, 1070,  241,  907,  908, 1338,
     1338,  909, 1338, 1338, 1338,  910,  248,  917,  918, 1338,
     1338,  919, 1338, 1338, 1338,  920,  241,  907,  908, 1338,
     1071,  909, 1338, 1338, 1338,  910,  241,  469,  470, 1338,
     1338,  471, 1338, 1338, 1338,  472,  248,  685,  686, 1338,

     1338,  687, 1338, 1338, 1338,  688,  241,  469,  470, 1338,
      689,  471, 1338, 1338, 1338,  472,  241,  691,  692, 1338,
     1338,  693, 1338, 1338, 1338,  694,  248,  917,  918, 1338,
     1338,  919, 1338, 1338, 1338,  920,  432, 1073, 1074, 1338,
     1338, 1075, 1338, 1338, 1338, 1076,  432, 1078, 1079, 1338,
     1338, 1080, 1338, 1338, 1338, 1081,  241,  474,  475, 1338,
     1338,  476, 1338, 1338, 1338,  477,  248,  696,  697, 1338,
     1338,  698, 1338, 1338, 1338,  699,  241,  474,  475, 1338,
      700,  476, 1338, 1338, 1338,  477,  241,  691,  692, 1338,
     1338,  693, 1338, 1338, 1338,  694,  128,  490,  491, 1338,

     1338,  492, 1338, 1338, 1338,  493,  135,  712,  713, 1338,
     1338,  714, 1338, 1338, 1338,  715,  128,  490,  491, 1338,
      716,  492, 1338, 1338, 1338,  493,  241,  741,  742, 1338,
     1338,  743, 1338, 1338, 1338, 1338,  273, 1338,  744,  248,
     1083, 1084, 1338, 1338, 1085, 1338, 1338, 1338, 1338,  666,
     1338, 1086, 1087, 1338, 1338,  278, 1088, 1089, 1087, 1087,
     1090, 1087, 1087, 1087, 1091,  670, 1087, 1092, 1087,  248,
      945,  946, 1338, 1338,  947, 1338, 1338, 1338, 1338,  452,
     1338,  948,  432, 1094, 1095, 1338, 1338, 1096, 1338, 1338,
     1338, 1338,  675, 1338, 1097,  950, 1338, 1338,  241,  951,

      952,  950,  950,  953,  950,  950,  950,  954,  457,  950,
      955,  950, 1023, 1338, 1338,  248, 1024, 1025, 1023, 1023,
     1026, 1023, 1023, 1023, 1027,  594, 1023, 1028, 1023,  963,
     1338, 1338,  241,  964,  965,  963,  963,  966,  963,  963,
      963,  967,  468,  963,  968,  963,  969, 1338, 1338,  241,
      970,  971,  969,  969,  972,  969,  969,  969,  973,  473,
      969,  974,  969,  975, 1338, 1338,  241,  976,  459,  975,
      975,  977,  975,  975,  975,  978,  457,  975,  457,  975,
     1098, 1338, 1338,  432, 1099, 1100, 1098, 1098, 1101, 1098,
     1098, 1098, 1102,  679, 1098, 1103, 1098, 1104, 1338, 1338,

      248, 1105, 1106, 1104, 1104, 1107, 1104, 1104, 1104, 1108,
      684, 1104, 1109, 1104, 1111, 1338, 1338,  241, 1112, 1113,
     1111, 1111, 1114, 1111, 1111, 1111, 1115,  690, 1111, 1116,
     1111, 1117, 1338, 1338,  241, 1118,  470, 1117, 1117, 1119,
     1117, 1117, 1117, 1120,  468, 1117,  468, 1117, 1121, 1338,
     1338,  248, 1122, 1123, 1121, 1121, 1124, 1121, 1121, 1121,
     1125,  695, 1121, 1126, 1121, 1128, 1338, 1338,  241, 1129,
      475, 1128, 1128, 1130, 1128, 1128, 1128, 1131,  473, 1128,
      473, 1128, 1132, 1338, 1338,  248, 1133,  596, 1132, 1132,
     1134, 1132, 1132, 1132, 1135,  594, 1132,  594, 1132,  522,

     1338, 1338,  128,  523,  524,  522,  522,  525,  522,  522,
      522,  526,  140,  522,  527,  522,  751, 1338, 1338,  135,
      752,  753,  751,  751,  754,  751,  751,  751,  755,  283,
      751,  756,  751,  758, 1338, 1338,  128,  759,  760,  758,
      758,  761,  758,  758,  758,  762,  289,  758,  763,  758,
      764, 1338, 1338,  128,  765,  766,  764,  764,  767,  764,
      764,  764,  768,  294,  764,  769,  764,  770, 1338, 1338,
      128,  771,  142,  770,  770,  772,  770,  770,  770,  773,
      140,  770,  140,  770, 1136, 1338, 1338,  248, 1137, 1138,
     1136, 1136, 1139, 1136, 1136, 1136, 1140,  701, 1136, 1141,

     1136, 1142, 1338, 1338,  278, 1143, 1144, 1142, 1142, 1145,
     1142, 1142, 1142, 1146,  706, 1142, 1147, 1142,  992, 1338,
     1338,  128,  993,  994,  992,  992,  995,  992,  992,  992,
      996,  489,  992,  997,  992, 1148, 1338, 1338,  135, 1149,
     1150, 1148, 1148, 1151, 1148, 1148, 1148, 1152,  711, 1148,
     1153, 1148, 1155, 1338, 1338,  128, 1156,  491, 1155, 1155,
     1157, 1155, 1155, 1155, 1158,  489, 1155,  489, 1155,  998,
     1338, 1338,  128,  999,  291,  998,  998, 1000,  998,  998,
      998, 1001,  289,  998,  289,  998, 1159, 1338, 1338,  135,
     1160,  485, 1159, 1159, 1161, 1159, 1159, 1159, 1162,  483,

     1159,  483, 1159, 1163, 1338, 1338,  248, 1164, 1165, 1163,
     1163, 1166, 1163, 1163, 1163, 1167,  717, 1163, 1168, 1163,
     1169, 1338, 1338,  278, 1170, 1171, 1169, 1169, 1172, 1169,
     1169, 1169, 1173,  722, 1169, 1174, 1169, 1009, 1338, 1338,
      128, 1010,  296, 1009, 1009, 1011, 1009, 1009, 1009, 1012,
      294, 1009,  294, 1009, 1175, 1338, 1338,  135, 1176,  496,
     1175, 1175, 1177, 1175, 1175, 1175, 1178,  494, 1175,  494,
     1175, 1179, 1338, 1338,  248, 1180,  464, 1179, 1179, 1181,
     1179, 1179, 1179, 1182,  462, 1179,  462, 1179,  241,  664,
      243, 1338, 1338,  665, 1338, 1338, 1338, 1338,  240, 1338,

      240,  248,  900,  250, 1338, 1338,  901, 1338, 1338, 1338,
     1338,  247, 1338,  247,  248, 1184,  668, 1338, 1338, 1185,
     1338, 1338, 1338, 1338,  666, 1338,  666, 1186, 1338, 1338,
      241, 1187, 1188, 1186, 1186, 1189, 1186, 1186, 1186, 1190,
      822, 1186, 1191, 1186, 1193, 1338, 1338,  241, 1194, 1195,
     1193, 1193, 1196, 1193, 1193, 1193, 1197,  828, 1193, 1198,
     1193, 1199, 1338, 1338,  241, 1200, 1201, 1199, 1199, 1202,
     1199, 1199, 1199, 1203,  833, 1199, 1204, 1199, 1205, 1338,
     1338,  241, 1206,  824, 1205, 1205, 1207, 1205, 1205, 1205,
     1208,  822, 1205,  822, 1205,  118, 1210, 1211, 1338, 1338,

     1338, 1338, 1338, 1338, 1212,  852, 1338, 1213,   50, 1031,
      592, 1338, 1338, 1338, 1338, 1338, 1338, 1032,  590, 1338,
      590,   57, 1039,  501, 1338, 1338, 1338, 1338, 1338, 1338,
     1040,  366, 1338,  366,   50, 1031,  592, 1338, 1338, 1338,
     1338, 1338, 1338, 1032,  590, 1338,  590,   57, 1039,  501,
     1338, 1338, 1338, 1338, 1338, 1338, 1040,  366, 1338,  366,
       50,  793,  303, 1338, 1338, 1338, 1338, 1338, 1338,  794,
      195, 1338,  195,   50,  793,  303, 1338, 1338, 1338, 1338,
     1338, 1338,  794,  195, 1338,  195,  241,  823,  824, 1338,
     1338,  825, 1338, 1338, 1338,  826,  248,  595,  596, 1338,

     1338,  597, 1338, 1338, 1338,  598,  241,  823,  824, 1338,
      827,  825, 1338, 1338, 1338,  826,  241,  829,  830, 1338,
     1338,  831, 1338, 1338, 1338,  832,  241,  834,  835, 1338,
     1338,  836, 1338, 1338, 1338,  837,  241,  881,  882, 1338,
     1338,  883, 1338, 1338, 1338, 1338,  422, 1338,  884,  248,
      658,  659, 1338, 1338,  660, 1338, 1338, 1338, 1338,  247,
     1338,  661,  241,  881,  882, 1338,  885,  883, 1338, 1338,
     1338, 1338,  422, 1338,  884,  241,  890,  891, 1338, 1338,
      892, 1338, 1338, 1338, 1338,  427, 1338,  893,  241,  887,
      424, 1338, 1338,  888, 1338, 1338, 1338, 1338,  422, 1338,

      422,  241, 1060,  429, 1338, 1338, 1061, 1338, 1338, 1338,
     1338,  427, 1338,  427,  248, 1064,  454, 1338, 1338, 1065,
     1338, 1338, 1338, 1338,  452, 1338,  452,  241, 1060,  429,
     1338, 1338, 1061, 1338, 1338, 1338, 1338,  427, 1338,  427,
      432, 1215, 1216, 1338, 1338, 1217, 1338, 1338, 1338, 1338,
      876, 1338, 1218,  248, 1064,  454, 1338, 1338, 1065, 1338,
     1338, 1338, 1338,  452, 1338,  452,  241,  829,  830, 1338,
     1338,  831, 1338, 1338, 1338,  832,  248,  685,  686, 1338,
     1338,  687, 1338, 1338, 1338,  688,  241,  907,  908, 1338,
     1338,  909, 1338, 1338, 1338,  910,  432, 1220, 1221, 1338,

     1338, 1222, 1338, 1338, 1338, 1223,  241,  691,  692, 1338,
     1338,  693, 1338, 1338, 1338,  694,  248,  917,  918, 1338,
     1338,  919, 1338, 1338, 1338,  920,  241,  691,  692, 1338,
      921,  693, 1338, 1338, 1338,  694,  241,  834,  835, 1338,
     1338,  836, 1338, 1338, 1338,  837,  248,  696,  697, 1338,
     1338,  698, 1338, 1338, 1338,  699,  241,  907,  908, 1338,
     1338,  909, 1338, 1338, 1338,  910,  241,  741,  742, 1338,
     1338,  743, 1338, 1338, 1338, 1338,  273, 1338,  744,  248,
      945,  946, 1338, 1338,  947, 1338, 1338, 1338, 1338,  452,
     1338,  948,  241,  741,  742, 1338,  949,  743, 1338, 1338,

     1338, 1338,  273, 1338,  744,  729, 1338, 1338,  128,  730,
      731,  729,  729,  732,  729,  729,  729,  733,  262,  729,
      734,  729,  135,  939,  940, 1338, 1338,  941, 1338, 1338,
     1338, 1338,  447, 1338,  942,  758, 1338, 1338,  128,  759,
      760,  758,  758,  761,  758,  758,  758,  762,  289,  758,
      763,  758,  777, 1338, 1338,  128,  778,  264,  777,  777,
      779,  777,  777,  777,  780,  262,  777,  262,  777,  248,
      945,  946, 1338, 1338,  947, 1338, 1338, 1338, 1338,  452,
     1338,  948,  950, 1338, 1338,  241,  951,  952,  950,  950,
      953,  950,  950,  950,  954,  457,  950,  955,  950,  963,

     1338, 1338,  241,  964,  965,  963,  963,  966,  963,  963,
      963,  967,  468,  963,  968,  963,  975, 1338, 1338,  241,
      976,  459,  975,  975,  977,  975,  975,  975,  978,  457,
      975,  457,  975, 1193, 1338, 1338,  241, 1194, 1195, 1193,
     1193, 1196, 1193, 1193, 1193, 1197,  828, 1193, 1198, 1193,
     1104, 1338, 1338,  248, 1105, 1106, 1104, 1104, 1107, 1104,
     1104, 1104, 1108,  684, 1104, 1109, 1104, 1225, 1338, 1338,
      241, 1226, 1227, 1225, 1225, 1228, 1225, 1225, 1225, 1229,
      906, 1225, 1230, 1225, 1231, 1338, 1338,  241, 1232,  830,
     1231, 1231, 1233, 1231, 1231, 1231, 1234,  828, 1231,  828,

     1231, 1235, 1338, 1338,  432, 1236, 1237, 1235, 1235, 1238,
     1235, 1235, 1235, 1239,  911, 1235, 1240, 1235, 1111, 1338,
     1338,  241, 1112, 1113, 1111, 1111, 1114, 1111, 1111, 1111,
     1115,  690, 1111, 1116, 1111, 1241, 1338, 1338,  248, 1242,
     1243, 1241, 1241, 1244, 1241, 1241, 1241, 1245,  916, 1241,
     1246, 1241, 1248, 1338, 1338,  241, 1249,  692, 1248, 1248,
     1250, 1248, 1248, 1248, 1251,  690, 1248,  690, 1248, 1117,
     1338, 1338,  241, 1118,  470, 1117, 1117, 1119, 1117, 1117,
     1117, 1120,  468, 1117,  468, 1117, 1252, 1338, 1338,  248,
     1253,  686, 1252, 1252, 1254, 1252, 1252, 1252, 1255,  684,

     1252,  684, 1252, 1121, 1338, 1338,  248, 1122, 1123, 1121,
     1121, 1124, 1121, 1121, 1121, 1125,  695, 1121, 1126, 1121,
     1257, 1338, 1338,  241, 1258,  835, 1257, 1257, 1259, 1257,
     1257, 1257, 1260,  833, 1257,  833, 1257, 1261, 1338, 1338,
      432, 1262, 1263, 1261, 1261, 1264, 1261, 1261, 1261, 1265,
      923, 1261, 1266, 1261, 1128, 1338, 1338,  241, 1129,  475,
     1128, 1128, 1130, 1128, 1128, 1128, 1131,  473, 1128,  473,
     1128, 1267, 1338, 1338,  248, 1268,  697, 1267, 1267, 1269,
     1267, 1267, 1267, 1270,  695, 1267,  695, 1267, 1205, 1338,
     1338,  241, 1206,  824, 1205, 1205, 1207, 1205, 1205, 1205,

     1208,  822, 1205,  822, 1205, 1132, 1338, 1338,  248, 1133,
      596, 1132, 1132, 1134, 1132, 1132, 1132, 1135,  594, 1132,
      594, 1132,  985, 1338, 1338,  135,  986,  987,  985,  985,
      988,  985,  985,  985,  989,  483,  985,  990,  985,  992,
     1338, 1338,  128,  993,  994,  992,  992,  995,  992,  992,
      992,  996,  489,  992,  997,  992,  998, 1338, 1338,  128,
      999,  291,  998,  998, 1000,  998,  998,  998, 1001,  289,
      998,  289,  998, 1271, 1338, 1338,  248, 1272, 1273, 1271,
     1271, 1274, 1271, 1271, 1271, 1275,  928, 1271, 1276, 1271,
     1277, 1338, 1338,  278, 1278, 1279, 1277, 1277, 1280, 1277,

     1277, 1277, 1281,  933, 1277, 1282, 1277, 1155, 1338, 1338,
      128, 1156,  491, 1155, 1155, 1157, 1155, 1155, 1155, 1158,
      489, 1155,  489, 1155, 1283, 1338, 1338,  135, 1284,  713,
     1283, 1283, 1285, 1283, 1283, 1283, 1286,  711, 1283,  711,
     1283, 1287, 1338, 1338,  248, 1288,  703, 1287, 1287, 1289,
     1287, 1287, 1287, 1290,  701, 1287,  701, 1287,  764, 1338,
     1338,  128,  765,  766,  764,  764,  767,  764,  764,  764,
      768,  294,  764,  769,  764, 1002, 1338, 1338,  135, 1003,
     1004, 1002, 1002, 1005, 1002, 1002, 1002, 1006,  494, 1002,
     1007, 1002, 1009, 1338, 1338,  128, 1010,  296, 1009, 1009,

     1011, 1009, 1009, 1009, 1012,  294, 1009,  294, 1009, 1291,
     1338, 1338,  248, 1292,  719, 1291, 1291, 1293, 1291, 1291,
     1291, 1294,  717, 1291,  717, 1291,  248, 1064,  454, 1338,
     1338, 1065, 1338, 1338, 1338, 1338,  452, 1338,  452, 1186,
     1338, 1338,  241, 1187, 1188, 1186, 1186, 1189, 1186, 1186,
     1186, 1190,  822, 1186, 1191, 1186, 1295, 1338, 1338,  432,
     1296, 1297, 1295, 1295, 1298, 1295, 1295, 1295, 1299, 1044,
     1295, 1300, 1295,  241,  890,  891, 1338, 1338,  892, 1338,
     1338, 1338, 1338,  427, 1338,  893,  241,  890,  891, 1338,
     1062,  892, 1338, 1338, 1338, 1338,  427, 1338,  893,  241,

     1060,  429, 1338, 1338, 1061, 1338, 1338, 1338, 1338,  427,
     1338,  427,  241,  907,  908, 1338, 1338,  909, 1338, 1338,
     1338,  910,  248,  917,  918, 1338, 1338,  919, 1338, 1338,
     1338,  920,  241,  907,  908, 1338, 1071,  909, 1338, 1338,
     1338,  910, 1301, 1338, 1338,  432, 1302, 1303, 1301, 1301,
     1304, 1301, 1301, 1301, 1305, 1066, 1301, 1306, 1301, 1308,
     1338, 1338,  241, 1309,  908, 1308, 1308, 1310, 1308, 1308,
     1308, 1311,  906, 1308,  906, 1308, 1312, 1338, 1338,  432,
     1313, 1314, 1312, 1312, 1315, 1312, 1312, 1312, 1316, 1072,
     1312, 1317, 1312, 1318, 1338, 1338,  248, 1319,  918, 1318,

     1318, 1320, 1318, 1318, 1318, 1321,  916, 1318,  916, 1318,
     1322, 1338, 1338,  432, 1323, 1324, 1322, 1322, 1325, 1322,
     1322, 1322, 1326, 1077, 1322, 1327, 1322, 1148, 1338, 1338,
      135, 1149, 1150, 1148, 1148, 1151, 1148, 1148, 1148, 1152,
      711, 1148, 1153, 1148, 1328, 1338, 1338,  248, 1329,  930,
     1328, 1328, 1330, 1328, 1328, 1328, 1331,  928, 1328,  928,
     1328, 1332, 1338, 1338,  432, 1333, 1334, 1332, 1332, 1335,
     1332, 1332, 1332, 1336, 1219, 1332, 1337, 1332,   50, 1338,
       50,   54, 1338,   54,   28, 1338,   28,   69, 1338,   69,
      113, 1338,  113,  112, 1338,  112,  117, 1338,  117,  121,

     1338,  121,   61, 1338,   61,  127, 1338,  127,  128, 1338,
      128,  134, 1338,  134,  140, 1338,  140,   90, 1338,   90,
      156, 1338,  156,  176, 1338,  176,  196, 1338,  196,  234,
     1338,  234,  113, 1338,  113,  112, 1338,  112,  240, 1338,
      240,  241, 1338,  241,  247, 1338,  247,  253, 1338,  253,
      257, 1338,  257,   54, 1338,   54,  127, 1338,  127,  128,
     1338,  128,  134, 1338,  134,  262, 1338,  262,  140, 1338,
      140,  267, 1338,  267,  269, 1338,  269,  273, 1338,  273,
      277, 1338,  277,  283, 1338,  283,  289, 1338,  289,  294,
     1338,  294,  182, 1338,  182,  195, 1338,  195,  209, 1338,

      209,  156, 1338,  156,  311, 1338,  311,  315, 1338,  315,
      317, 1338,  317,  322, 1338,  322,  180, 1338,  180,  193,
     1338,  193,  207, 1338,  207,  347, 1338,  347,  351, 1338,
      351,  355, 1338,  355,  375, 1338,  375,  217, 1338,  217,
      224, 1338,  224,  234, 1338,  234,  112, 1338,  112,  410,
     1338,  410,  413, 1338,  413,  240, 1338,  240,  241, 1338,
      241,  247, 1338,  247,  273, 1338,  273,  416, 1338,  416,
      419, 1338,  419,  422, 1338,  422,  427, 1338,  427,  431,
     1338,  431,  253, 1338,  253,  257, 1338,  257,  315, 1338,
      315,  436, 1338,  436,  441, 1338,  441,  443, 1338,  443,

      262, 1338,  262,  447, 1338,  447,  289, 1338,  289,  267,
     1338,  267,  452, 1338,  452,  127, 1338,  127,  128, 1338,
      128,  134, 1338,  134,  140, 1338,  140,  457, 1338,  457,
      462, 1338,  462,  468, 1338,  468,  473, 1338,  473,  478,
     1338,  478,  483, 1338,  483,  489, 1338,  489,  294, 1338,
      294,  494, 1338,  494,  347, 1338,  347,  176, 1338,  176,
      195, 1338,  195,  366, 1338,  366,  374, 1338,  374,  506,
     1338,  506,  508, 1338,  508,  516, 1338,  516,  532, 1338,
      532,  537, 1338,  537,  543, 1338,  543,  548, 1338,  548,
      551, 1338,  551,  556, 1338,  556,  565, 1338,  565,  345,

     1338,  345,  193, 1338,  193,  364, 1338,  364,  372, 1338,
      372,  577, 1338,  577,  590, 1338,  590,  457, 1338,  457,
      594, 1338,  594,  473, 1338,  473,  599, 1338,  599,  608,
     1338,  608,  612, 1338,  612,  195, 1338,  195,  294, 1338,
      294,  494, 1338,  494,  398, 1338,  398,  404, 1338,  404,
      408, 1338,  408,  422, 1338,  422,  247, 1338,  247,  436,
     1338,  436,  257, 1338,  257,  416, 1338,  416,  640, 1338,
      640,  419, 1338,  419,  427, 1338,  427,  643, 1338,  643,
      452, 1338,  452,  240, 1338,  240,  241, 1338,  241,  273,
     1338,  273,  441, 1338,  441,  648, 1338,  648,  508, 1338,

      508,  652, 1338,  652,  657, 1338,  657,  663, 1338,  663,
      666, 1338,  666,  670, 1338,  670,  675, 1338,  675,  457,
     1338,  457,  594, 1338,  594,  468, 1338,  468,  473, 1338,
      473,  679, 1338,  679,  684, 1338,  684,  690, 1338,  690,
      695, 1338,  695,  140, 1338,  140,  283, 1338,  283,  289,
     1338,  289,  294, 1338,  294,  701, 1338,  701,  706, 1338,
      706,  489, 1338,  489,  711, 1338,  711,  717, 1338,  717,
      722, 1338,  722,  366, 1338,  366,  590, 1338,  590,  195,
     1338,  195,  315, 1338,  315,  727, 1338,  727,  516, 1338,
      516,  652, 1338,  652,  735, 1338,  735,  740, 1338,  740,

      663, 1338,  663,  774, 1338,  774,  532, 1338,  532,  599,
     1338,  599,  543, 1338,  543,  548, 1338,  548,  781, 1338,
      781,  786, 1338,  786,  792, 1338,  792,  795, 1338,  795,
      798, 1338,  798,  803, 1338,  803,  808, 1338,  808,  811,
     1338,  811,  364, 1338,  364,  588, 1338,  588,  193, 1338,
      193,  577, 1338,  577,  347, 1338,  347,  814, 1338,  814,
      590, 1338,  590,  818, 1338,  818,  366, 1338,  366,  822,
     1338,  822,  594, 1338,  594,  828, 1338,  828,  833, 1338,
      833,  838, 1338,  838,  844, 1338,  844,  849, 1338,  849,
      852, 1338,  852,  856, 1338,  856,  473, 1338,  473,  695,

     1338,  695,  786, 1338,  786,  628, 1338,  628,  404, 1338,
      404,  634, 1338,  634,  638, 1338,  638,  640, 1338,  640,
      422, 1338,  422,  247, 1338,  247,  427, 1338,  427,  876,
     1338,  876,  880, 1338,  880,  657, 1338,  657,  886, 1338,
      886,  652, 1338,  652,  740, 1338,  740,  663, 1338,  663,
      889, 1338,  889,  894, 1338,  894,  899, 1338,  899,  902,
     1338,  902,  273, 1338,  273,  452, 1338,  452,  262, 1338,
      262,  447, 1338,  447,  289, 1338,  289,  457, 1338,  457,
      594, 1338,  594,  468, 1338,  468,  473, 1338,  473,  828,
     1338,  828,  684, 1338,  684,  906, 1338,  906,  911, 1338,

      911,  690, 1338,  690,  916, 1338,  916,  833, 1338,  833,
      695, 1338,  695,  923, 1338,  923,  483, 1338,  483,  489,
     1338,  489,  928, 1338,  928,  933, 1338,  933,  294, 1338,
      294,  494, 1338,  494,  315, 1338,  315,  508, 1338,  508,
      938, 1338,  938,  652, 1338,  652,  657, 1338,  657,  740,
     1338,  740,  663, 1338,  663,  944, 1338,  944,  902, 1338,
      902,  516, 1338,  516, 1017, 1338, 1017, 1020, 1338, 1020,
      844, 1338,  844,  786, 1338,  786, 1030, 1338, 1030, 1033,
     1338, 1033,  792, 1338,  792, 1038, 1338, 1038,  849, 1338,
      849,  795, 1338,  795,  543, 1338,  543, 1041, 1338, 1041,

      548, 1338,  548,  822, 1338,  822,  594, 1338,  594,  833,
     1338,  833,  838, 1338,  838,  599, 1338,  599,  828, 1338,
      828, 1044, 1338, 1044,  684, 1338,  684,  906, 1338,  906,
      695, 1338,  695, 1049, 1338, 1049,  634, 1338,  634,  872,
     1338,  872,  404, 1338,  404,  427, 1338,  427,  452, 1338,
      452,  880, 1338,  880,  657, 1338,  657,  889, 1338,  889,
      886, 1338,  886, 1054, 1338, 1054,  899, 1338,  899, 1059,
     1338, 1059,  944, 1338,  944,  652, 1338,  652,  740, 1338,
      740,  663, 1338,  663,  902, 1338,  902, 1063, 1338, 1063,
     1066, 1338, 1066,  906, 1338,  906,  916, 1338,  916,  468,

     1338,  468,  684, 1338,  684,  690, 1338,  690, 1072, 1338,
     1072, 1077, 1338, 1077,  473, 1338,  473,  695, 1338,  695,
      489, 1338,  489,  711, 1338,  711, 1082, 1338, 1082, 1093,
     1338, 1093,  663, 1338,  663,  899, 1338,  899, 1183, 1338,
     1183, 1209, 1338, 1209, 1030, 1338, 1030, 1038, 1338, 1038,
      792, 1338,  792,  822, 1338,  822,  594, 1338,  594,  828,
     1338,  828,  833, 1338,  833,  880, 1338,  880,  657, 1338,
      657,  889, 1338,  889,  886, 1338,  886, 1059, 1338, 1059,
     1063, 1338, 1063, 1214, 1338, 1214,  684, 1338,  684,  906,
     1338,  906, 1219, 1338, 1219,  690, 1338,  690,  916, 1338,

      916,  695, 1338,  695,  740, 1338,  740,  944, 1338,  944,
      938, 1338,  938, 1063, 1338, 1063,  889, 1338,  889, 1059,
     1338, 1059,  906, 1338,  906,  916, 1338,  916,    3, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338
    } ;

static const flex_int16_t yy_chk[10347] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    4,   55,   55,
     1545,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    7,  113,  113,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    8,    8,   12,    8, 1483,   19,   44,   12,    8,
        8,    9,   19,   44, 1463,    9,   52,  118,    9,    9,
        9,  118,   52,    9,   59,   98, 1461,    9,   13, 1453,
       59,   98,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   14,   14,  114,  114, 1451,

      133,  150,  135,   14,   16,  133,  135,  150,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   23, 1408, 1405,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   25, 1400,
     1396,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   26,   26,   26,  192,   26,
     1395,  206, 1390,  366,  192,   26,   27,  206,  241,  366,
       27, 1389,  241,   27,   27,   27,  248,  432,   27, 1387,
      248,  432,   27,   28,   28,   28,   29,   29,   29,   31,
       31,   31,  267, 1362, 1359, 1357,  268,  267,   31,   32,

       32,  268, 1356, 1345,  590,  593, 1344,   32,   33,   33,
      590,  593, 1339, 1334, 1324, 1314,   33,   33, 1303,   33,
       34, 1297, 1279, 1273,   34, 1263, 1243,   34,   34,   34,
     1237, 1227,   34, 1223, 1222, 1217,   34,   35, 1211, 1201,
     1195,   35, 1188, 1171,   35,   35,   35, 1165, 1150,   35,
     1144, 1138, 1123,   35,   40, 1113, 1106,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   41,   41, 1100,   41, 1096, 1093, 1089, 1085,   41,
       41,   43, 1079, 1076, 1075,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   46, 1068,

     1051,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   47, 1035, 1025, 1004,   47,
      994,  987,   47,   47,   47,  981,  971,   47,  965,  958,
      952,   47,   48,  946,  940,  937,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   51,
      936,  930,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   62,   62,   62,   64,
       64,   64,   65,   65,   65,  927,  920,  919,  916,  914,
      910,  909,   65,  891,   65,   66,  879,  859,  856,   66,
      854,  847,   66,   66,   66,  844,  841,   66,  838,  835,

      830,   66,   67,   67,   67,   69,   69,   69,  822,  821,
       69,  805,  801,  789,   69,   71,   71,   71,  783,  766,
       71,   72,   72,   72,  760,   72,   72,  753,  747,  742,
       72,   73,   73,   73,  731,  726,   73,  720,  719,  715,
       73,   74,   74,   74,  714,  711,  708,  705,  703,  699,
       74,   76,   76,  694,  693,  687,  678,  675,  673,   76,
       77,   77,  669,  657,  614,  611,  592,  579,   77,   77,
      558,   77,   78,   78,   78,  553,  545,  537,  524,  512,
      496,  493,   78,  492,   78,   79,   79,  485,   79,  475,
      470,  462,  454,   79,   79,  449,   79,   80,   80,  436,

      429,  422,  382,  379,  378,   80,   80,  355,   80,   81,
      349,  331,  319,   81,  311,  307,   81,   81,   81,  304,
      298,   81,  291,  281,  278,   81,   82,  275,  269,  265,
       82,  236,  202,   82,   82,   82,  198,  182,   82,  179,
      176,  173,   82,   83,  163,  156,  149,   83,  142,  134,
       83,   83,   83,  128,  116,   83,   75,   70,   68,   83,
       85,   63,   57,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   86,   50,   38,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   87,   87,   87,   30,   87,   24,

       10,    3,    0,   87,   87,   88,    0,    0,    0,   88,
        0,    0,   88,   88,   88,    0,    0,   88,    0,    0,
        0,   88,   89,    0,    0,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   90,
       90,   90,    0,    0,    0,    0,    0,    0,   90,   91,
       91,   91,    0,    0,    0,    0,    0,    0,   91,   92,
       92,    0,    0,    0,    0,    0,    0,   92,   92,    0,
       92,   94,    0,    0,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   95,   95,
        0,   95,    0,    0,    0,    0,   95,   95,   99,    0,

        0,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,  100,    0,    0,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  101,    0,    0,    0,  101,    0,    0,  101,
      101,  101,    0,    0,  101,    0,    0,    0,  101,  102,
        0,    0,    0,  102,    0,    0,  102,  102,  102,    0,
        0,  102,    0,    0,    0,  102,  103,    0,    0,    0,
      103,    0,    0,  103,  103,  103,    0,    0,  103,    0,
        0,    0,  103,  105,    0,    0,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,

      107,    0,    0,    0,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  108,    0,    0,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  110,  110,  110,    0,  110,    0,
        0,    0,    0,    0,  110,  111,    0,    0,    0,  111,
        0,    0,  111,  111,  111,    0,    0,  111,    0,    0,
        0,  111,  112,  112,  112,  115,  115,  115,  117,  117,
      117,    0,    0,  117,  119,  119,  119,    0,    0,  119,
      120,  120,  120,    0,  120,  120,  121,  121,  121,    0,
        0,    0,    0,    0,    0,    0,  121,    0,  121,  122,

      122,  122,    0,    0,    0,    0,    0,    0,    0,  122,
        0,  122,  123,  123,  123,    0,  123,    0,    0,    0,
        0,    0,  123,    0,  123,  124,    0,    0,    0,  124,
        0,    0,  124,  124,  124,    0,    0,  124,    0,    0,
        0,  124,  125,  125,  125,  126,  126,  126,    0,  126,
      127,  127,  127,    0,    0,  127,    0,    0,    0,  127,
      129,  129,  129,    0,    0,  129,  130,  130,  130,    0,
      130,  130,    0,    0,    0,  130,  131,  131,  131,    0,
        0,  131,    0,    0,    0,  131,  132,  132,  132,    0,
        0,  132,    0,    0,    0,  132,  136,  136,  136,    0,

        0,  136,  138,  138,  138,    0,    0,  138,  139,  139,
      139,    0,    0,  139,    0,    0,    0,  139,  140,  140,
      140,    0,    0,  140,    0,    0,    0,  140,  141,  141,
      141,    0,    0,  141,    0,    0,    0,  141,  143,  143,
      143,    0,    0,  143,    0,    0,    0,  143,  144,  144,
      144,    0,    0,  144,    0,    0,    0,  144,  145,  145,
      145,    0,    0,    0,    0,    0,    0,  145,  146,  146,
      146,    0,  146,    0,    0,    0,    0,  146,  147,  147,
      147,    0,    0,    0,    0,    0,    0,  147,  148,  148,
      148,    0,    0,    0,    0,    0,    0,  148,  151,  151,

        0,    0,    0,    0,    0,    0,  151,  151,    0,  151,
      152,  152,  152,    0,    0,    0,    0,    0,    0,    0,
      152,    0,  152,  153,  153,    0,  153,    0,    0,    0,
        0,  153,  153,    0,  153,  154,  154,    0,    0,    0,
        0,    0,    0,  154,  154,    0,  154,  155,  155,    0,
        0,    0,    0,    0,    0,  155,  155,    0,  155,  157,
      157,  157,    0,    0,    0,    0,    0,    0,    0,  157,
        0,  157,  159,  159,  159,    0,    0,    0,    0,    0,
        0,    0,  159,    0,  159,  160,  160,  160,    0,    0,
        0,    0,    0,    0,  160,  160,    0,  160,  161,  161,

        0,    0,    0,    0,    0,    0,  161,  161,    0,  161,
      162,  162,  162,    0,    0,    0,    0,    0,    0,  162,
      162,    0,  162,  164,  164,    0,    0,    0,    0,    0,
        0,  164,  164,    0,  164,  165,  165,    0,    0,    0,
        0,    0,    0,  165,  165,    0,  165,  167,  167,  167,
        0,    0,    0,    0,    0,    0,  167,  167,    0,  167,
      168,  168,  168,    0,    0,    0,    0,    0,    0,  168,
      168,    0,  168,  169,  169,  169,    0,    0,    0,    0,
        0,    0,  169,  169,    0,  169,  170,  170,    0,    0,
        0,    0,    0,    0,  170,  170,    0,  170,  171,    0,

        0,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  172,    0,    0,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  174,    0,    0,    0,  174,    0,    0,  174,
      174,  174,    0,    0,  174,    0,    0,    0,  174,  175,
        0,    0,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  183,  183,  183,    0,
        0,    0,    0,    0,    0,  183,  185,  185,  185,    0,
        0,    0,    0,    0,    0,  185,  186,  186,  186,    0,
        0,    0,    0,    0,    0,  186,  187,  187,  187,    0,

        0,    0,    0,    0,    0,  187,  187,    0,  187,  188,
        0,    0,    0,  188,    0,    0,  188,  188,  188,    0,
        0,  188,    0,    0,    0,  188,  189,  189,  189,    0,
        0,    0,    0,    0,    0,  189,  189,    0,  189,  191,
        0,    0,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  197,  197,  197,    0,
        0,  197,    0,    0,    0,  197,  199,  199,  199,    0,
        0,  199,    0,    0,    0,  199,  201,  201,  201,    0,
        0,    0,    0,    0,    0,  201,  201,    0,  201,  203,
      203,    0,    0,    0,    0,    0,    0,  203,  203,    0,

      203,  205,    0,    0,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  210,  210,
      210,    0,    0,    0,    0,    0,    0,  210,  211,  211,
        0,    0,    0,    0,    0,    0,  211,  211,    0,  211,
      212,    0,    0,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  213,    0,    0,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  214,    0,    0,    0,  214,    0,
        0,  214,  214,  214,    0,    0,  214,    0,    0,    0,
      214,  218,    0,    0,    0,  218,    0,    0,  218,  218,

      218,    0,    0,  218,    0,    0,    0,  218,  219,  219,
      219,    0,    0,    0,    0,    0,    0,    0,  219,    0,
      219,  220,  220,  220,    0,    0,    0,    0,    0,    0,
      220,  220,    0,  220,  221,  221,    0,    0,    0,    0,
        0,    0,  221,  221,    0,  221,  222,    0,    0,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  223,    0,    0,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      224,    0,    0,    0,  224,    0,    0,  224,  224,  224,
        0,    0,  224,    0,    0,    0,  224,  225,    0,    0,

      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  226,    0,    0,    0,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  227,    0,    0,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  228,  228,
        0,    0,    0,    0,    0,    0,  228,  228,    0,  228,
      230,    0,    0,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  231,    0,    0,
        0,  231,    0,    0,  231,  231,  231,    0,    0,  231,
        0,    0,    0,  231,  232,  232,  232,    0,  232,    0,

        0,    0,    0,    0,  232,  233,    0,    0,    0,  233,
        0,    0,  233,  233,  233,    0,    0,  233,    0,    0,
        0,  233,  234,  234,  234,  235,  235,  235,  237,  237,
      237,  238,  238,  238,    0,    0,    0,    0,    0,    0,
        0,  238,    0,  238,  240,  240,  240,    0,    0,  240,
      242,  242,  242,    0,    0,  242,  243,  243,  243,    0,
      243,  243,  244,  244,  244,    0,    0,  244,  245,  245,
        0,    0,    0,  245,  246,  246,    0,    0,    0,  246,
      247,  247,  247,    0,    0,  247,  249,  249,  249,    0,
        0,  249,  250,  250,  250,    0,  250,  250,  251,  251,

      251,    0,    0,  251,  252,  252,  252,    0,    0,  252,
      253,  253,  253,    0,    0,    0,    0,    0,    0,    0,
      253,    0,  253,  254,  254,  254,    0,    0,    0,    0,
        0,    0,    0,  254,    0,  254,  255,  255,  255,    0,
      255,    0,    0,    0,    0,    0,  255,    0,  255,  256,
      256,  256,    0,    0,    0,    0,    0,    0,    0,  256,
        0,  256,  257,  257,  257,    0,    0,    0,    0,    0,
        0,    0,  257,    0,  257,  258,  258,  258,    0,    0,
        0,    0,    0,    0,    0,  258,    0,  258,  259,  259,
      259,    0,  259,    0,    0,    0,    0,    0,  259,    0,

      259,  260,  260,  260,    0,    0,    0,    0,    0,    0,
        0,  260,    0,  260,  261,  261,  261,    0,    0,    0,
        0,    0,    0,    0,  261,    0,  261,  262,  262,  262,
        0,    0,  262,    0,    0,    0,  262,  263,  263,  263,
        0,    0,  263,  264,  264,  264,    0,  264,  264,    0,
        0,    0,  264,  266,  266,  266,    0,    0,  266,    0,
        0,    0,  266,  272,  272,  272,    0,    0,  272,  274,
      274,  274,    0,    0,  274,  277,  277,  277,    0,    0,
      277,    0,    0,    0,  277,  279,  279,  279,    0,    0,
      279,  280,  280,  280,    0,  280,  280,    0,    0,    0,

      280,  282,  282,  282,    0,    0,  282,    0,    0,    0,
      282,  283,  283,  283,    0,    0,  283,    0,    0,    0,
      283,  284,  284,  284,    0,    0,  284,    0,    0,    0,
      284,  285,  285,  285,    0,  285,  285,    0,    0,    0,
      285,  286,  286,  286,    0,    0,  286,    0,    0,    0,
      286,  287,  287,  287,    0,    0,  287,    0,    0,    0,
      287,  288,  288,  288,    0,    0,  288,    0,    0,    0,
      288,  289,  289,  289,    0,    0,  289,    0,    0,    0,
      289,  290,  290,  290,    0,    0,  290,    0,    0,    0,
      290,  293,  293,  293,    0,    0,  293,    0,    0,    0,

      293,  294,  294,  294,    0,    0,  294,    0,    0,    0,
      294,  295,  295,  295,    0,    0,  295,    0,    0,    0,
      295,  296,  296,  296,    0,  296,  296,    0,    0,    0,
      296,  297,  297,  297,    0,    0,  297,    0,    0,    0,
      297,  299,  299,  299,    0,    0,    0,    0,    0,    0,
      299,  300,  300,  300,    0,  300,    0,    0,    0,    0,
      300,  301,  301,  301,    0,    0,    0,    0,    0,    0,
      301,  302,  302,  302,    0,    0,    0,    0,    0,    0,
      302,  303,  303,  303,    0,  303,    0,    0,    0,    0,
      303,  305,  305,  305,    0,    0,    0,    0,    0,    0,

      305,  308,  308,    0,    0,    0,    0,    0,    0,  308,
      308,    0,  308,  309,  309,  309,    0,    0,    0,    0,
        0,    0,    0,  309,    0,  309,  310,  310,    0,    0,
        0,    0,    0,    0,  310,  310,    0,  310,  314,  314,
      314,    0,    0,    0,    0,    0,    0,    0,  314,    0,
      314,  316,  316,  316,    0,    0,    0,    0,    0,    0,
        0,  316,    0,  316,  317,    0,    0,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  318,  318,  318,    0,    0,  318,    0,    0,    0,
        0,  318,    0,  318,  320,    0,    0,  320,  320,  320,

      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  321,    0,    0,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  322,  322,
      322,    0,    0,    0,    0,    0,    0,  322,  322,    0,
      322,  323,  323,  323,    0,    0,    0,    0,    0,    0,
      323,  323,    0,  323,  324,  324,  324,    0,  324,    0,
        0,    0,    0,  324,  324,    0,  324,  325,  325,  325,
        0,    0,    0,    0,    0,    0,  325,  325,    0,  325,
      326,  326,  326,    0,    0,    0,    0,    0,    0,  326,
      326,    0,  326,  327,  327,  327,    0,    0,    0,    0,

        0,    0,  327,  327,    0,  327,  328,  328,    0,    0,
        0,    0,    0,    0,  328,  328,    0,  328,  329,  329,
      329,    0,    0,    0,    0,    0,    0,  329,  329,    0,
      329,  330,  330,    0,  330,    0,    0,    0,    0,  330,
      330,    0,  330,  332,  332,    0,    0,    0,    0,    0,
        0,  332,  332,    0,  332,  333,  333,    0,    0,    0,
        0,    0,    0,  333,  333,    0,  333,  334,  334,  334,
        0,    0,    0,    0,    0,    0,  334,  334,    0,  334,
      335,  335,    0,    0,    0,    0,    0,    0,  335,  335,
        0,  335,  336,  336,  336,    0,    0,    0,    0,    0,

        0,  336,  336,    0,  336,  337,  337,  337,    0,    0,
        0,    0,    0,    0,  337,  337,    0,  337,  338,  338,
      338,    0,    0,    0,    0,    0,    0,  338,  338,    0,
      338,  339,  339,  339,    0,    0,    0,    0,    0,    0,
      339,  339,    0,  339,  340,  340,  340,    0,    0,    0,
        0,    0,    0,  340,  340,    0,  340,  342,    0,    0,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  343,    0,    0,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  344,  344,  344,    0,  344,    0,    0,    0,    0,

      344,  344,  345,    0,    0,    0,  345,    0,    0,  345,
      345,  345,    0,    0,  345,    0,    0,    0,  345,  346,
        0,    0,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  347,  347,  347,    0,
        0,    0,    0,    0,    0,  347,  348,  348,  348,    0,
        0,    0,    0,    0,    0,  348,  350,  350,  350,    0,
        0,    0,    0,    0,    0,  350,  351,  351,  351,    0,
        0,  351,    0,    0,    0,  351,  352,  352,  352,    0,
        0,  352,    0,    0,    0,  352,  353,  353,  353,    0,
      353,  353,    0,    0,    0,  353,  354,  354,  354,    0,

        0,  354,    0,    0,    0,  354,  356,  356,  356,    0,
        0,    0,    0,    0,    0,  356,  356,    0,  356,  358,
      358,  358,    0,    0,    0,    0,    0,    0,  358,  358,
        0,  358,  359,  359,  359,    0,    0,    0,    0,    0,
        0,  359,  359,    0,  359,  360,    0,    0,    0,  360,
        0,    0,  360,  360,  360,    0,    0,  360,    0,    0,
        0,  360,  362,    0,    0,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  363,
      363,  363,    0,  363,    0,    0,    0,    0,  363,  363,
      367,  367,  367,    0,    0,    0,    0,    0,    0,  367,

      368,  368,  368,    0,    0,    0,    0,    0,    0,  368,
      368,    0,  368,  369,    0,    0,    0,  369,    0,    0,
      369,  369,  369,    0,    0,  369,    0,    0,    0,  369,
      371,  371,  371,    0,  371,    0,    0,    0,    0,  371,
      371,  374,  374,  374,    0,    0,    0,    0,    0,    0,
      374,  375,  375,  375,    0,    0,  375,    0,    0,    0,
      375,  376,  376,  376,    0,    0,  376,    0,    0,    0,
      376,  377,  377,  377,    0,  377,  377,    0,    0,    0,
      377,  380,  380,  380,    0,    0,    0,    0,    0,    0,
      380,  380,    0,  380,  383,    0,    0,  383,  383,  383,

      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  384,    0,    0,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  385,    0,
        0,    0,  385,    0,    0,  385,  385,  385,    0,    0,
      385,    0,    0,    0,  385,  386,    0,    0,    0,  386,
        0,    0,  386,  386,  386,    0,    0,  386,    0,    0,
        0,  386,  388,  388,  388,    0,    0,    0,    0,    0,
        0,  388,  388,    0,  388,  389,  389,  389,    0,    0,
        0,    0,    0,    0,  389,  389,    0,  389,  390,  390,
      390,    0,    0,    0,    0,    0,    0,  390,  390,    0,

      390,  391,  391,    0,    0,    0,    0,    0,    0,  391,
      391,    0,  391,  392,    0,    0,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      393,    0,    0,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  394,    0,    0,
        0,  394,    0,    0,  394,  394,  394,    0,    0,  394,
        0,    0,    0,  394,  395,    0,    0,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  400,    0,    0,    0,  400,    0,    0,  400,  400,
      400,    0,    0,  400,    0,    0,    0,  400,  401,  401,

      401,    0,    0,    0,    0,    0,    0,  401,  401,    0,
      401,  403,    0,    0,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  407,    0,
        0,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  410,  410,  410,    0,    0,
      410,  411,  411,  411,    0,    0,  411,  412,  412,  412,
        0,  412,  412,  413,  413,  413,    0,    0,    0,    0,
        0,    0,    0,  413,    0,  413,  414,  414,  414,    0,
        0,    0,    0,    0,    0,    0,  414,    0,  414,  415,
      415,  415,    0,  415,    0,    0,    0,    0,    0,  415,

        0,  415,  416,  416,    0,    0,    0,  416,  417,  417,
        0,    0,    0,  417,  418,  418,    0,    0,    0,  418,
      419,  419,    0,    0,    0,  419,  420,  420,    0,    0,
        0,  420,  421,  421,    0,    0,    0,  421,  423,  423,
      423,    0,    0,  423,  425,  425,  425,    0,    0,  425,
      426,  426,  426,    0,    0,  426,  427,  427,  427,    0,
        0,  427,  428,  428,  428,    0,    0,  428,  431,  431,
      431,    0,    0,  431,  434,  434,  434,    0,  434,  434,
      435,  435,  435,    0,    0,  435,  437,  437,  437,    0,
        0,    0,    0,    0,    0,    0,  437,    0,  437,  439,

      439,  439,    0,    0,    0,    0,    0,    0,    0,  439,
        0,  439,  440,  440,  440,    0,    0,    0,    0,    0,
        0,    0,  440,    0,  440,  441,  441,  441,    0,    0,
        0,    0,    0,    0,    0,  441,    0,  441,  442,  442,
      442,    0,    0,    0,    0,    0,    0,    0,  442,    0,
      442,  443,  443,  443,    0,    0,  443,    0,    0,    0,
        0,  443,    0,  443,  444,  444,  444,    0,    0,  444,
        0,    0,    0,    0,  444,    0,  444,  445,  445,  445,
        0,  445,  445,    0,    0,    0,    0,  445,    0,  445,
      446,  446,  446,    0,    0,  446,    0,    0,    0,    0,

      446,    0,  446,  447,  447,  447,    0,    0,  447,  448,
      448,  448,    0,    0,  448,  451,  451,  451,    0,    0,
      451,    0,    0,    0,  451,  453,  453,  453,    0,    0,
      453,  456,  456,  456,    0,    0,  456,  457,  457,  457,
        0,    0,  457,    0,    0,    0,  457,  458,  458,  458,
        0,    0,  458,    0,    0,    0,  458,  459,  459,  459,
        0,  459,  459,    0,    0,    0,  459,  460,  460,  460,
        0,    0,  460,    0,    0,    0,  460,  461,  461,  461,
        0,    0,  461,    0,    0,    0,  461,  463,  463,  463,
        0,    0,  463,    0,    0,    0,  463,  465,  465,  465,

        0,    0,  465,    0,    0,    0,  465,  466,  466,  466,
        0,    0,  466,    0,    0,    0,  466,  467,  467,  467,
        0,    0,  467,    0,    0,    0,  467,  469,  469,  469,
        0,    0,  469,    0,    0,    0,  469,  472,  472,  472,
        0,    0,  472,    0,    0,    0,  472,  474,  474,  474,
        0,    0,  474,    0,    0,    0,  474,  476,  476,  476,
        0,    0,  476,    0,    0,    0,  476,  478,  478,  478,
        0,    0,  478,    0,    0,    0,  478,  479,  479,  479,
        0,    0,  479,    0,    0,    0,  479,  480,  480,  480,
        0,  480,  480,    0,    0,    0,  480,  481,  481,  481,

        0,    0,  481,    0,    0,    0,  481,  482,  482,  482,
        0,    0,  482,    0,    0,    0,  482,  484,  484,  484,
        0,    0,  484,    0,    0,    0,  484,  488,  488,  488,
        0,    0,  488,    0,    0,    0,  488,  489,  489,  489,
        0,    0,  489,    0,    0,    0,  489,  490,  490,  490,
        0,    0,  490,    0,    0,    0,  490,  491,  491,  491,
        0,  491,  491,    0,    0,    0,  491,  495,  495,  495,
        0,    0,  495,    0,    0,    0,  495,  499,  499,  499,
        0,    0,  499,    0,    0,    0,  499,  500,  500,  500,
        0,    0,    0,    0,    0,    0,  500,  501,  501,  501,

        0,  501,    0,    0,    0,    0,  501,  502,  502,  502,
        0,    0,    0,    0,    0,    0,  502,  503,  503,  503,
        0,    0,    0,    0,    0,    0,  503,  504,  504,  504,
        0,  504,    0,    0,    0,    0,  504,  505,  505,  505,
        0,    0,    0,    0,    0,    0,  505,  506,  506,  506,
        0,    0,    0,    0,    0,    0,    0,  506,    0,  506,
      507,  507,  507,    0,    0,    0,    0,    0,    0,    0,
      507,    0,  507,  509,  509,  509,    0,    0,    0,    0,
        0,    0,    0,  509,    0,  509,  510,    0,    0,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,

      510,  510,  510,  511,  511,  511,    0,    0,  511,    0,
        0,    0,    0,  511,    0,  511,  513,    0,    0,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  514,    0,    0,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      515,    0,    0,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  516,  516,  516,
        0,    0,  516,    0,    0,    0,    0,  516,    0,  516,
      517,  517,  517,    0,    0,  517,    0,    0,    0,    0,
      517,    0,  517,  518,  518,  518,    0,  518,  518,    0,

        0,    0,    0,  518,    0,  518,  519,  519,  519,    0,
        0,  519,    0,    0,    0,    0,  519,    0,  519,  520,
      520,  520,    0,    0,  520,    0,    0,    0,    0,  520,
        0,  520,  521,    0,    0,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  523,
        0,    0,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  525,    0,    0,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  526,    0,    0,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,

      527,    0,    0,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  529,  529,  529,
        0,    0,  529,    0,    0,    0,    0,  529,    0,  529,
      530,    0,    0,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  532,  532,  532,
        0,    0,    0,    0,    0,    0,  532,  532,    0,  532,
      533,  533,  533,    0,    0,    0,    0,    0,    0,  533,
      533,    0,  533,  534,  534,  534,    0,  534,    0,    0,
        0,    0,  534,  534,    0,  534,  535,  535,  535,    0,
        0,    0,    0,    0,    0,  535,  535,    0,  535,  536,

      536,  536,    0,    0,    0,    0,    0,    0,  536,  536,
        0,  536,  538,  538,  538,    0,    0,    0,    0,    0,
        0,  538,  538,    0,  538,  540,  540,  540,    0,    0,
        0,    0,    0,    0,  540,  540,    0,  540,  541,  541,
      541,    0,    0,    0,    0,    0,    0,  541,  541,    0,
      541,  542,  542,  542,    0,    0,    0,    0,    0,    0,
      542,  542,    0,  542,  544,  544,  544,    0,    0,    0,
        0,    0,    0,  544,  544,    0,  544,  547,  547,  547,
        0,    0,    0,    0,    0,    0,  547,  547,    0,  547,
      549,  549,  549,    0,    0,    0,    0,    0,    0,  549,

      549,    0,  549,  550,  550,  550,    0,    0,    0,    0,
        0,    0,  550,  550,    0,  550,  557,  557,  557,    0,
        0,    0,    0,    0,    0,  557,  557,    0,  557,  561,
      561,  561,    0,    0,    0,    0,    0,    0,  561,  561,
        0,  561,  562,  562,    0,    0,    0,    0,    0,    0,
      562,  562,    0,  562,  563,  563,  563,    0,    0,    0,
        0,    0,    0,  563,  563,    0,  563,  564,  564,    0,
        0,    0,    0,    0,    0,  564,  564,    0,  564,  566,
      566,  566,    0,    0,    0,    0,    0,    0,  566,  566,
        0,  566,  568,  568,  568,    0,    0,    0,    0,    0,

        0,  568,  568,    0,  568,  569,  569,  569,    0,    0,
        0,    0,    0,    0,  569,  569,    0,  569,  570,  570,
      570,    0,    0,    0,    0,    0,    0,  570,  570,    0,
      570,  571,  571,  571,    0,    0,    0,    0,    0,    0,
      571,  571,    0,  571,  572,    0,    0,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  573,    0,    0,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  574,  574,
      574,    0,  574,    0,    0,    0,    0,  574,  574,  575,
        0,    0,    0,  575,    0,    0,  575,  575,  575,    0,

        0,  575,    0,    0,    0,  575,  576,    0,    0,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  577,  577,  577,    0,    0,    0,    0,
        0,    0,  577,  578,  578,  578,    0,    0,    0,    0,
        0,    0,  578,  580,  580,  580,    0,    0,    0,    0,
        0,    0,  580,  581,  581,  581,    0,    0,    0,    0,
        0,    0,  581,  582,  582,  582,    0,    0,    0,    0,
        0,    0,  582,  582,    0,  582,  583,    0,    0,    0,
      583,    0,    0,  583,  583,  583,    0,    0,  583,    0,
        0,    0,  583,  584,  584,  584,    0,    0,    0,    0,

        0,    0,  584,  584,    0,  584,  586,    0,    0,    0,
      586,    0,    0,  586,  586,  586,    0,    0,  586,    0,
        0,    0,  586,  587,  587,  587,    0,  587,    0,    0,
        0,    0,  587,  587,  591,  591,  591,    0,    0,    0,
        0,    0,    0,  591,  594,  594,  594,    0,    0,  594,
        0,    0,    0,  594,  595,  595,  595,    0,    0,  595,
        0,    0,    0,  595,  596,  596,  596,    0,  596,  596,
        0,    0,    0,  596,  597,  597,  597,    0,    0,  597,
        0,    0,    0,  597,  598,  598,  598,    0,    0,  598,
        0,    0,    0,  598,  599,  599,  599,    0,    0,    0,

        0,    0,    0,  599,  599,    0,  599,  601,  601,  601,
        0,  601,    0,    0,    0,    0,  601,  601,    0,  601,
      602,  602,  602,    0,    0,    0,    0,    0,    0,  602,
      602,    0,  602,  603,  603,  603,    0,    0,    0,    0,
        0,    0,  603,  603,    0,  603,  606,  606,  606,    0,
        0,    0,    0,    0,    0,  606,  607,  607,  607,    0,
        0,    0,    0,    0,    0,  607,  607,    0,  607,  608,
      608,  608,    0,    0,  608,    0,    0,    0,  608,  609,
      609,  609,    0,    0,  609,    0,    0,    0,  609,  610,
      610,  610,    0,  610,  610,    0,    0,    0,  610,  613,

      613,  613,    0,    0,    0,    0,    0,    0,  613,  613,
        0,  613,  616,    0,    0,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  617,
        0,    0,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  618,    0,    0,    0,
      618,    0,    0,  618,  618,  618,    0,    0,  618,    0,
        0,    0,  618,  619,    0,    0,    0,  619,    0,    0,
      619,  619,  619,    0,    0,  619,    0,    0,    0,  619,
      620,  620,  620,    0,    0,    0,    0,    0,    0,  620,
      620,    0,  620,  621,  621,  621,    0,    0,    0,    0,

        0,    0,  621,  621,    0,  621,  622,  622,  622,    0,
        0,    0,    0,    0,    0,  622,  622,    0,  622,  623,
      623,  623,    0,    0,    0,    0,    0,    0,  623,  623,
        0,  623,  624,  624,  624,    0,    0,    0,    0,    0,
        0,  624,  624,    0,  624,  626,    0,    0,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  627,    0,    0,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  628,
        0,    0,    0,  628,    0,    0,  628,  628,  628,    0,
        0,  628,    0,    0,    0,  628,  629,    0,    0,  629,

      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  630,  630,  630,    0,    0,    0,    0,
        0,    0,  630,  630,    0,  630,  631,    0,    0,    0,
      631,    0,    0,  631,  631,  631,    0,    0,  631,    0,
        0,    0,  631,  633,    0,    0,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      636,    0,    0,    0,  636,    0,    0,  636,  636,  636,
        0,    0,  636,    0,    0,    0,  636,  640,  640,    0,
        0,    0,  640,  641,  641,    0,    0,    0,  641,  643,
      643,  643,    0,    0,  643,  644,  644,  644,    0,    0,

      644,  645,  645,  645,    0,  645,  645,  646,  646,  646,
        0,    0,  646,  647,  647,  647,    0,    0,  647,  648,
      648,  648,    0,    0,  648,    0,    0,    0,    0,  648,
        0,  648,  649,  649,  649,    0,    0,  649,    0,    0,
        0,    0,  649,    0,  649,  650,  650,  650,    0,  650,
      650,    0,    0,    0,    0,  650,    0,  650,  651,  651,
      651,    0,    0,  651,    0,    0,    0,    0,  651,    0,
      651,  652,  652,  652,    0,    0,  652,    0,    0,    0,
        0,  652,    0,  652,  653,  653,  653,    0,    0,  653,
        0,    0,    0,    0,  653,    0,  653,  654,  654,  654,

        0,  654,  654,    0,    0,    0,    0,  654,    0,  654,
      655,  655,  655,    0,    0,  655,    0,    0,    0,    0,
      655,    0,  655,  656,  656,  656,    0,    0,  656,    0,
        0,    0,    0,  656,    0,  656,  660,  660,  660,    0,
        0,  660,    0,    0,    0,    0,  660,    0,  660,  661,
      661,  661,    0,    0,  661,    0,    0,    0,    0,  661,
        0,  661,  662,  662,  662,    0,    0,  662,    0,    0,
        0,    0,  662,    0,  662,  663,  663,  663,    0,    0,
      663,    0,    0,    0,    0,  663,    0,  663,  664,  664,
      664,    0,    0,  664,    0,    0,    0,    0,  664,    0,

      664,  665,  665,  665,    0,    0,  665,    0,    0,    0,
        0,  665,    0,  665,  666,  666,  666,    0,    0,  666,
      667,  667,  667,    0,    0,  667,  668,  668,  668,    0,
      668,  668,  670,  670,  670,    0,    0,  670,    0,    0,
        0,  670,  671,  671,  671,    0,    0,  671,  672,  672,
      672,    0,  672,  672,    0,    0,    0,  672,  674,  674,
      674,    0,    0,  674,    0,    0,    0,  674,  676,  676,
      676,    0,    0,  676,  679,  679,  679,    0,    0,  679,
        0,    0,    0,  679,  680,  680,  680,    0,    0,  680,
        0,    0,    0,  680,  681,  681,  681,    0,  681,  681,

        0,    0,    0,  681,  682,  682,  682,    0,    0,  682,
        0,    0,    0,  682,  683,  683,  683,    0,    0,  683,
        0,    0,    0,  683,  684,  684,  684,    0,    0,  684,
        0,    0,    0,  684,  685,  685,  685,    0,    0,  685,
        0,    0,    0,  685,  686,  686,  686,    0,  686,  686,
        0,    0,    0,  686,  688,  688,  688,    0,    0,  688,
        0,    0,    0,  688,  689,  689,  689,    0,    0,  689,
        0,    0,    0,  689,  690,  690,  690,    0,    0,  690,
        0,    0,    0,  690,  691,  691,  691,    0,    0,  691,
        0,    0,    0,  691,  692,  692,  692,    0,  692,  692,

        0,    0,    0,  692,  695,  695,  695,    0,    0,  695,
        0,    0,    0,  695,  696,  696,  696,    0,    0,  696,
        0,    0,    0,  696,  697,  697,  697,    0,  697,  697,
        0,    0,    0,  697,  698,  698,  698,    0,    0,  698,
        0,    0,    0,  698,  700,  700,  700,    0,    0,  700,
        0,    0,    0,  700,  701,  701,  701,    0,    0,  701,
        0,    0,    0,  701,  702,  702,  702,    0,    0,  702,
        0,    0,    0,  702,  706,  706,  706,    0,    0,  706,
        0,    0,    0,  706,  707,  707,  707,    0,    0,  707,
        0,    0,    0,  707,  710,  710,  710,    0,    0,  710,

        0,    0,    0,  710,  712,  712,  712,    0,    0,  712,
        0,    0,    0,  712,  716,  716,  716,    0,    0,  716,
        0,    0,    0,  716,  717,  717,  717,    0,    0,  717,
        0,    0,    0,  717,  718,  718,  718,    0,    0,  718,
        0,    0,    0,  718,  722,  722,  722,    0,    0,  722,
        0,    0,    0,  722,  723,  723,  723,    0,    0,  723,
        0,    0,    0,  723,  724,  724,  724,    0,  724,  724,
        0,    0,    0,  724,  725,  725,  725,    0,    0,  725,
        0,    0,    0,  725,  727,  727,  727,    0,    0,    0,
        0,    0,    0,    0,  727,    0,  727,  728,  728,  728,

        0,    0,    0,    0,    0,    0,    0,  728,    0,  728,
      729,    0,    0,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  730,  730,  730,
        0,    0,  730,    0,    0,    0,    0,  730,    0,  730,
      733,    0,    0,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  734,    0,    0,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  735,  735,  735,    0,    0,  735,
        0,    0,    0,    0,  735,    0,  735,  736,  736,  736,
        0,    0,  736,    0,    0,    0,    0,  736,    0,  736,

      737,  737,  737,    0,  737,  737,    0,    0,    0,    0,
      737,    0,  737,  738,  738,  738,    0,    0,  738,    0,
        0,    0,    0,  738,    0,  738,  739,  739,  739,    0,
        0,  739,    0,    0,    0,    0,  739,    0,  739,  740,
      740,  740,    0,    0,  740,    0,    0,    0,    0,  740,
        0,  740,  741,  741,  741,    0,    0,  741,    0,    0,
        0,    0,  741,    0,  741,  744,  744,  744,    0,    0,
      744,    0,    0,    0,    0,  744,    0,  744,  745,    0,
        0,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  746,  746,  746,    0,    0,

      746,    0,    0,    0,    0,  746,    0,  746,  749,    0,
        0,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  750,    0,    0,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  751,    0,    0,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  752,
        0,    0,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  754,    0,    0,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  755,    0,    0,  755,  755,  755,  755,

      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      756,    0,    0,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  757,    0,    0,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  759,    0,    0,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  762,    0,    0,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  763,    0,
        0,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  764,    0,    0,  764,  764,

      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  765,    0,    0,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  769,
        0,    0,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  770,    0,    0,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  771,    0,    0,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      774,  774,  774,    0,    0,  774,    0,    0,    0,    0,
      774,    0,  774,  775,  775,  775,    0,    0,  775,    0,

        0,    0,    0,  775,    0,  775,  776,  776,  776,    0,
        0,  776,    0,    0,    0,    0,  776,    0,  776,  778,
      778,  778,    0,    0,  778,    0,    0,    0,    0,  778,
        0,  778,  782,    0,    0,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  786,
      786,  786,    0,    0,    0,    0,    0,    0,  786,  786,
        0,  786,  787,  787,  787,    0,    0,    0,    0,    0,
        0,  787,  787,    0,  787,  788,  788,  788,    0,  788,
        0,    0,    0,    0,  788,  788,    0,  788,  790,  790,
      790,    0,    0,    0,    0,    0,    0,  790,  790,    0,

      790,  791,  791,  791,    0,    0,    0,    0,    0,    0,
      791,  791,    0,  791,  792,  792,  792,    0,    0,    0,
        0,    0,    0,  792,  792,    0,  792,  793,  793,  793,
        0,    0,    0,    0,    0,    0,  793,  793,    0,  793,
      794,  794,  794,    0,    0,    0,    0,    0,    0,  794,
      794,    0,  794,  795,  795,  795,    0,    0,    0,    0,
        0,    0,  795,  795,    0,  795,  796,  796,  796,    0,
        0,    0,    0,    0,    0,  796,  796,    0,  796,  797,
      797,  797,    0,    0,    0,    0,    0,    0,  797,  797,
        0,  797,  798,  798,  798,    0,    0,    0,    0,    0,

        0,  798,  798,    0,  798,  799,  799,  799,    0,    0,
        0,    0,    0,    0,  799,  799,    0,  799,  800,  800,
      800,    0,  800,    0,    0,    0,    0,  800,  800,    0,
      800,  809,  809,  809,    0,    0,    0,    0,    0,    0,
      809,  809,    0,  809,  811,  811,  811,    0,    0,    0,
        0,    0,    0,  811,  811,    0,  811,  812,  812,  812,
        0,    0,    0,    0,    0,    0,  812,  812,    0,  812,
      814,  814,  814,    0,    0,  814,    0,    0,    0,  814,
      815,  815,  815,    0,    0,  815,    0,    0,    0,  815,
      816,  816,  816,    0,  816,  816,    0,    0,    0,  816,

      817,  817,  817,    0,    0,  817,    0,    0,    0,  817,
      818,  818,  818,    0,    0,    0,    0,    0,    0,  818,
      818,    0,  818,  819,  819,  819,    0,    0,    0,    0,
        0,    0,  819,  819,    0,  819,  820,  820,  820,    0,
      820,    0,    0,    0,    0,  820,  820,    0,  820,  823,
      823,  823,    0,    0,  823,    0,    0,    0,  823,  825,
      825,  825,    0,    0,  825,    0,    0,    0,  825,  826,
      826,  826,    0,    0,  826,    0,    0,    0,  826,  827,
      827,  827,    0,    0,  827,    0,    0,    0,  827,  828,
      828,  828,    0,    0,  828,    0,    0,    0,  828,  829,

      829,  829,    0,    0,  829,    0,    0,    0,  829,  832,
      832,  832,    0,    0,  832,    0,    0,    0,  832,  834,
      834,  834,    0,    0,  834,    0,    0,    0,  834,  836,
      836,  836,    0,    0,  836,    0,    0,    0,  836,  839,
      839,  839,    0,    0,    0,    0,    0,    0,  839,  839,
        0,  839,  842,  842,  842,    0,    0,    0,    0,    0,
        0,  842,  842,    0,  842,  843,  843,  843,    0,    0,
        0,    0,    0,    0,  843,  843,    0,  843,  853,  853,
      853,    0,    0,  853,    0,    0,    0,  853,  860,  860,
      860,    0,    0,    0,    0,    0,    0,  860,  860,    0,

      860,  861,  861,  861,    0,    0,    0,    0,    0,    0,
      861,  861,    0,  861,  862,  862,  862,    0,    0,    0,
        0,    0,    0,  862,  862,    0,  862,  863,  863,  863,
        0,    0,    0,    0,    0,    0,  863,  863,    0,  863,
      864,    0,    0,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  865,    0,    0,
      865,  865,  865,  865,  865,  865,  865,  865,  865,  865,
      865,  865,  865,  865,  866,    0,    0,    0,  866,    0,
        0,  866,  866,  866,    0,    0,  866,    0,    0,    0,
      866,  867,    0,    0,  867,  867,  867,  867,  867,  867,

      867,  867,  867,  867,  867,  867,  867,  867,  868,    0,
        0,    0,  868,    0,    0,  868,  868,  868,    0,    0,
      868,    0,    0,    0,  868,  869,  869,  869,    0,    0,
        0,    0,    0,    0,  869,  869,    0,  869,  871,    0,
        0,    0,  871,    0,    0,  871,  871,  871,    0,    0,
      871,    0,    0,    0,  871,  876,  876,  876,    0,    0,
      876,  877,  877,  877,    0,    0,  877,  878,  878,  878,
        0,  878,  878,  880,  880,  880,    0,    0,  880,    0,
        0,    0,    0,  880,    0,  880,  881,  881,  881,    0,
        0,  881,    0,    0,    0,    0,  881,    0,  881,  882,

      882,  882,    0,  882,  882,    0,    0,    0,    0,  882,
        0,  882,  883,  883,  883,    0,    0,  883,    0,    0,
        0,    0,  883,    0,  883,  884,  884,  884,    0,    0,
      884,    0,    0,    0,    0,  884,    0,  884,  885,  885,
      885,    0,    0,  885,    0,    0,    0,    0,  885,    0,
      885,  886,  886,  886,    0,    0,  886,    0,    0,    0,
        0,  886,    0,  886,  887,  887,  887,    0,    0,  887,
        0,    0,    0,    0,  887,    0,  887,  888,  888,  888,
        0,    0,  888,    0,    0,    0,    0,  888,    0,  888,
      889,  889,  889,    0,    0,  889,    0,    0,    0,    0,

      889,    0,  889,  890,  890,  890,    0,    0,  890,    0,
        0,    0,    0,  890,    0,  890,  893,  893,  893,    0,
        0,  893,    0,    0,    0,    0,  893,    0,  893,  894,
      894,  894,    0,    0,  894,    0,    0,    0,    0,  894,
        0,  894,  895,  895,  895,    0,    0,  895,    0,    0,
        0,    0,  895,    0,  895,  896,  896,  896,    0,  896,
      896,    0,    0,    0,    0,  896,    0,  896,  897,  897,
      897,    0,    0,  897,    0,    0,    0,    0,  897,    0,
      897,  898,  898,  898,    0,    0,  898,    0,    0,    0,
        0,  898,    0,  898,  900,  900,  900,    0,    0,  900,

        0,    0,    0,    0,  900,    0,  900,  902,  902,  902,
        0,    0,  902,    0,    0,    0,    0,  902,    0,  902,
      903,  903,  903,    0,    0,  903,    0,    0,    0,    0,
      903,    0,  903,  904,  904,  904,    0,    0,  904,    0,
        0,    0,    0,  904,    0,  904,  905,  905,  905,    0,
        0,  905,    0,    0,    0,  905,  906,  906,  906,    0,
        0,  906,    0,    0,    0,  906,  907,  907,  907,    0,
        0,  907,    0,    0,    0,  907,  908,  908,  908,    0,
      908,  908,    0,    0,    0,  908,  911,  911,  911,    0,
        0,  911,    0,    0,    0,  911,  912,  912,  912,    0,

        0,  912,    0,    0,    0,  912,  913,  913,  913,    0,
      913,  913,    0,    0,    0,  913,  915,  915,  915,    0,
        0,  915,    0,    0,    0,  915,  917,  917,  917,    0,
        0,  917,    0,    0,    0,  917,  921,  921,  921,    0,
        0,  921,    0,    0,    0,  921,  922,  922,  922,    0,
        0,  922,    0,    0,    0,  922,  923,  923,  923,    0,
        0,  923,    0,    0,    0,  923,  924,  924,  924,    0,
        0,  924,    0,    0,    0,  924,  925,  925,  925,    0,
      925,  925,    0,    0,    0,  925,  926,  926,  926,    0,
        0,  926,    0,    0,    0,  926,  933,  933,  933,    0,

        0,  933,    0,    0,    0,  933,  934,  934,  934,    0,
        0,  934,    0,    0,    0,  934,  935,  935,  935,    0,
      935,  935,    0,    0,    0,  935,  938,  938,  938,    0,
        0,  938,    0,    0,    0,    0,  938,    0,  938,  939,
      939,  939,    0,    0,  939,    0,    0,    0,    0,  939,
        0,  939,  943,    0,    0,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  945,
      945,  945,    0,    0,  945,    0,    0,    0,    0,  945,
        0,  945,  949,  949,  949,    0,    0,  949,    0,    0,
        0,    0,  949,    0,  949,  950,    0,    0,  950,  950,

      950,  950,  950,  950,  950,  950,  950,  950,  950,  950,
      950,  950,  951,    0,    0,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  953,
        0,    0,  953,  953,  953,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  953,  953,  954,    0,    0,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  955,    0,    0,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      962,    0,    0,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  964,    0,    0,

      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  964,  967,    0,    0,  967,  967,  967,
      967,  967,  967,  967,  967,  967,  967,  967,  967,  967,
      967,  968,    0,    0,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  970,    0,
        0,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  974,    0,    0,  974,  974,
      974,  974,  974,  974,  974,  974,  974,  974,  974,  974,
      974,  974,  976,    0,    0,  976,  976,  976,  976,  976,
      976,  976,  976,  976,  976,  976,  976,  976,  976,  979,

        0,    0,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  980,    0,    0,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  982,    0,    0,  982,  982,  982,  982,
      982,  982,  982,  982,  982,  982,  982,  982,  982,  982,
      983,    0,    0,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  984,    0,    0,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  986,    0,    0,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,

      986,  991,    0,    0,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  992,    0,
        0,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  993,    0,    0,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  997,    0,    0,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  998,
        0,    0,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  999,    0,    0,  999,
      999,  999,  999,  999,  999,  999,  999,  999,  999,  999,

      999,  999,  999, 1003,    0,    0, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1008,    0,    0, 1008, 1008, 1008, 1008, 1008, 1008, 1008,
     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1009,    0,    0,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1010,    0,    0, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,
     1010, 1014,    0,    0, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1017, 1017,
     1017,    0,    0, 1017,    0,    0,    0,    0, 1017,    0,

     1017, 1018, 1018, 1018,    0,    0, 1018,    0,    0,    0,
        0, 1018,    0, 1018, 1021, 1021, 1021,    0,    0, 1021,
        0,    0,    0,    0, 1021,    0, 1021, 1023,    0,    0,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1026,    0,    0, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1027,    0,    0, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1028,    0,
        0, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1029, 1029, 1029,    0,    0,

        0,    0,    0,    0, 1029, 1029,    0, 1029, 1030, 1030,
     1030,    0,    0,    0,    0,    0,    0, 1030, 1030,    0,
     1030, 1031, 1031, 1031,    0,    0,    0,    0,    0,    0,
     1031, 1031,    0, 1031, 1032, 1032, 1032,    0,    0,    0,
        0,    0,    0, 1032, 1032,    0, 1032, 1039, 1039, 1039,
        0,    0,    0,    0,    0,    0, 1039, 1039,    0, 1039,
     1041, 1041, 1041,    0,    0,    0,    0,    0,    0, 1041,
     1041,    0, 1041, 1043, 1043, 1043,    0,    0,    0,    0,
        0,    0, 1043, 1043,    0, 1043, 1044, 1044, 1044,    0,
        0, 1044,    0,    0,    0, 1044, 1045, 1045, 1045,    0,

        0, 1045,    0,    0,    0, 1045, 1046, 1046, 1046,    0,
     1046, 1046,    0,    0,    0, 1046, 1047, 1047, 1047,    0,
        0, 1047,    0,    0,    0, 1047, 1048, 1048, 1048,    0,
        0, 1048,    0,    0,    0, 1048, 1054, 1054, 1054,    0,
        0, 1054,    0,    0,    0,    0, 1054,    0, 1054, 1055,
     1055, 1055,    0,    0, 1055,    0,    0,    0,    0, 1055,
        0, 1055, 1056, 1056, 1056,    0, 1056, 1056,    0,    0,
        0,    0, 1056,    0, 1056, 1057, 1057, 1057,    0,    0,
     1057,    0,    0,    0,    0, 1057,    0, 1057, 1058, 1058,
     1058,    0,    0, 1058,    0,    0,    0,    0, 1058,    0,

     1058, 1059, 1059, 1059,    0,    0, 1059,    0,    0,    0,
        0, 1059,    0, 1059, 1060, 1060, 1060,    0,    0, 1060,
        0,    0,    0,    0, 1060,    0, 1060, 1061, 1061, 1061,
        0,    0, 1061,    0,    0,    0,    0, 1061,    0, 1061,
     1062, 1062, 1062,    0,    0, 1062,    0,    0,    0,    0,
     1062,    0, 1062, 1064, 1064, 1064,    0,    0, 1064,    0,
        0,    0,    0, 1064,    0, 1064, 1066, 1066, 1066,    0,
        0, 1066,    0,    0,    0, 1066, 1067, 1067, 1067,    0,
        0, 1067,    0,    0,    0, 1067, 1070, 1070, 1070,    0,
        0, 1070,    0,    0,    0, 1070, 1071, 1071, 1071,    0,

        0, 1071,    0,    0,    0, 1071, 1072, 1072, 1072,    0,
        0, 1072,    0,    0,    0, 1072, 1073, 1073, 1073,    0,
        0, 1073,    0,    0,    0, 1073, 1074, 1074, 1074,    0,
     1074, 1074,    0,    0,    0, 1074, 1077, 1077, 1077,    0,
        0, 1077,    0,    0,    0, 1077, 1078, 1078, 1078,    0,
        0, 1078,    0,    0,    0, 1078, 1080, 1080, 1080,    0,
        0, 1080,    0,    0,    0, 1080, 1082, 1082, 1082,    0,
        0, 1082,    0,    0,    0,    0, 1082,    0, 1082, 1083,
     1083, 1083,    0,    0, 1083,    0,    0,    0,    0, 1083,
        0, 1083, 1084, 1084, 1084,    0, 1084, 1084,    0,    0,

        0,    0, 1084,    0, 1084, 1087,    0,    0, 1087, 1087,
     1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087,
     1087, 1087, 1088, 1088, 1088,    0,    0, 1088,    0,    0,
        0,    0, 1088,    0, 1088, 1091,    0,    0, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1092,    0,    0, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1094,
     1094, 1094,    0,    0, 1094,    0,    0,    0,    0, 1094,
        0, 1094, 1098,    0,    0, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1101,

        0,    0, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1103,    0,    0, 1103,
     1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103,
     1103, 1103, 1103, 1104,    0,    0, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1105,    0,    0, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1108,    0,    0,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1109,    0,    0, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,

     1109, 1110,    0,    0, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1111,    0,
        0, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1112,    0,    0, 1112, 1112,
     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
     1112, 1112, 1116,    0,    0, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1117,
        0,    0, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
     1117, 1117, 1117, 1117, 1117, 1117, 1118,    0,    0, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,

     1118, 1118, 1118, 1122,    0,    0, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1126,    0,    0, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1127,    0,    0,
     1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127,
     1127, 1127, 1127, 1127, 1128,    0,    0, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1129,    0,    0, 1129, 1129, 1129, 1129, 1129, 1129,
     1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1132,    0,
        0, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132,

     1132, 1132, 1132, 1132, 1132, 1133,    0,    0, 1133, 1133,
     1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133,
     1133, 1133, 1143,    0,    0, 1143, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1146,
        0,    0, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1147,    0,    0, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1149,    0,    0, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1154,    0,    0, 1154, 1154, 1154, 1154, 1154, 1154, 1154,

     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1155,    0,    0,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1156,    0,    0, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1160,    0,    0, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1169,    0,
        0, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1170,    0,    0, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1174,    0,    0, 1174, 1174, 1174, 1174, 1174,

     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1176,
        0,    0, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1184, 1184, 1184,    0,
        0, 1184,    0,    0,    0,    0, 1184,    0, 1184, 1186,
        0,    0, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1192,    0,    0, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1214, 1214, 1214,    0,    0, 1214,    0,
        0,    0,    0, 1214,    0, 1214, 1216, 1216, 1216,    0,
     1216, 1216,    0,    0,    0,    0, 1216,    0, 1216, 1218,

     1218, 1218,    0,    0, 1218,    0,    0,    0,    0, 1218,
        0, 1218, 1219, 1219, 1219,    0,    0, 1219,    0,    0,
        0, 1219, 1220, 1220, 1220,    0,    0, 1220,    0,    0,
        0, 1220, 1221, 1221, 1221,    0, 1221, 1221,    0,    0,
        0, 1221, 1224,    0,    0, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1230,
        0,    0, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1247,    0,    0, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1249,    0,    0, 1249, 1249, 1249, 1249,

     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1256,    0,    0, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1278,    0,    0,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1284,    0,    0, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1307,    0,    0, 1307, 1307, 1307, 1307, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1340,    0,
     1340, 1341,    0, 1341, 1342,    0, 1342, 1343,    0, 1343,
     1346,    0, 1346, 1347,    0, 1347, 1348,    0, 1348, 1349,

        0, 1349, 1350,    0, 1350, 1351,    0, 1351, 1352,    0,
     1352, 1353,    0, 1353, 1354,    0, 1354, 1355,    0, 1355,
     1358,    0, 1358, 1360,    0, 1360, 1361,    0, 1361, 1363,
        0, 1363, 1364,    0, 1364, 1365,    0, 1365, 1366,    0,
     1366, 1367,    0, 1367, 1368,    0, 1368, 1369,    0, 1369,
     1370,    0, 1370, 1371,    0, 1371, 1372,    0, 1372, 1373,
        0, 1373, 1374,    0, 1374, 1375,    0, 1375, 1376,    0,
     1376, 1377,    0, 1377, 1378,    0, 1378, 1379,    0, 1379,
     1380,    0, 1380, 1381,    0, 1381, 1382,    0, 1382, 1383,
        0, 1383, 1384,    0, 1384, 1385,    0, 1385, 1386,    0,

     1386, 1388,    0, 1388, 1391,    0, 1391, 1392,    0, 1392,
     1393,    0, 1393, 1394,    0, 1394, 1397,    0, 1397, 1398,
        0, 1398, 1399,    0, 1399, 1401,    0, 1401, 1402,    0,
     1402, 1403,    0, 1403, 1404,    0, 1404, 1406,    0, 1406,
     1407,    0, 1407, 1409,    0, 1409, 1410,    0, 1410, 1411,
        0, 1411, 1412,    0, 1412, 1413,    0, 1413, 1414,    0,
     1414, 1415,    0, 1415, 1416,    0, 1416, 1417,    0, 1417,
     1418,    0, 1418, 1419,    0, 1419, 1420,    0, 1420, 1421,
        0, 1421, 1422,    0, 1422, 1423,    0, 1423, 1424,    0,
     1424, 1425,    0, 1425, 1426,    0, 1426, 1427,    0, 1427,

     1428,    0, 1428, 1429,    0, 1429, 1430,    0, 1430, 1431,
        0, 1431, 1432,    0, 1432, 1433,    0, 1433, 1434,    0,
     1434, 1435,    0, 1435, 1436,    0, 1436, 1437,    0, 1437,
     1438,    0, 1438, 1439,    0, 1439, 1440,    0, 1440, 1441,
        0, 1441, 1442,    0, 1442, 1443,    0, 1443, 1444,    0,
     1444, 1445,    0, 1445, 1446,    0, 1446, 1447,    0, 1447,
     1448,    0, 1448, 1449,    0, 1449, 1450,    0, 1450, 1452,
        0, 1452, 1454,    0, 1454, 1455,    0, 1455, 1456,    0,
     1456, 1457,    0, 1457, 1458,    0, 1458, 1459,    0, 1459,
     1460,    0, 1460, 1462,    0, 1462, 1464,    0, 1464, 1465,

        0, 1465, 1466,    0, 1466, 1467,    0, 1467, 1468,    0,
     1468, 1469,    0, 1469, 1470,    0, 1470, 1471,    0, 1471,
     1472,    0, 1472, 1473,    0, 1473, 1474,    0, 1474, 1475,
        0, 1475, 1476,    0, 1476, 1477,    0, 1477, 1478,    0,
     1478, 1479,    0, 1479, 1480,    0, 1480, 1481,    0, 1481,
     1482,    0, 1482, 1484,    0, 1484, 1485,    0, 1485, 1486,
        0, 1486, 1487,    0, 1487, 1488,    0, 1488, 1489,    0,
     1489, 1490,    0, 1490, 1491,    0, 1491, 1492,    0, 1492,
     1493,    0, 1493, 1494,    0, 1494, 1495,    0, 1495, 1496,
        0, 1496, 1497,    0, 1497, 1498,    0, 1498, 1499,    0,

     1499, 1500,    0, 1500, 1501,    0, 1501, 1502,    0, 1502,
     1503,    0, 1503, 1504,    0, 1504, 1505,    0, 1505, 1506,
        0, 1506, 1507,    0, 1507, 1508,    0, 1508, 1509,    0,
     1509, 1510,    0, 1510, 1511,    0, 1511, 1512,    0, 1512,
     1513,    0, 1513, 1514,    0, 1514, 1515,    0, 1515, 1516,
        0, 1516, 1517,    0, 1517, 1518,    0, 1518, 1519,    0,
     1519, 1520,    0, 1520, 1521,    0, 1521, 1522,    0, 1522,
     1523,    0, 1523, 1524,    0, 1524, 1525,    0, 1525, 1526,
        0, 1526, 1527,    0, 1527, 1528,    0, 1528, 1529,    0,
     1529, 1530,    0, 1530, 1531,    0, 1531, 1532,    0, 1532,

     1533,    0, 1533, 1534,    0, 1534, 1535,    0, 1535, 1536,
        0, 1536, 1537,    0, 1537, 1538,    0, 1538, 1539,    0,
     1539, 1540,    0, 1540, 1541,    0, 1541, 1542,    0, 1542,
     1543,    0, 1543, 1544,    0, 1544, 1546,    0, 1546, 1547,
        0, 1547, 1548,    0, 1548, 1549,    0, 1549, 1550,    0,
     1550, 1551,    0, 1551, 1552,    0, 1552, 1553,    0, 1553,
     1554,    0, 1554, 1555,    0, 1555, 1556,    0, 1556, 1557,
        0, 1557, 1558,    0, 1558, 1559,    0, 1559, 1560,    0,
     1560, 1561,    0, 1561, 1562,    0, 1562, 1563,    0, 1563,
     1564,    0, 1564, 1565,    0, 1565, 1566,    0, 1566, 1567,

        0, 1567, 1568,    0, 1568, 1569,    0, 1569, 1570,    0,
     1570, 1571,    0, 1571, 1572,    0, 1572, 1573,    0, 1573,
     1574,    0, 1574, 1575,    0, 1575, 1576,    0, 1576, 1577,
        0, 1577, 1578,    0, 1578, 1579,    0, 1579, 1580,    0,
     1580, 1581,    0, 1581, 1582,    0, 1582, 1583,    0, 1583,
     1584,    0, 1584, 1585,    0, 1585, 1586,    0, 1586, 1587,
        0, 1587, 1588,    0, 1588, 1589,    0, 1589, 1590,    0,
     1590, 1591,    0, 1591, 1592,    0, 1592, 1593,    0, 1593,
     1594,    0, 1594, 1595,    0, 1595, 1596,    0, 1596, 1597,
        0, 1597, 1598,    0, 1598, 1599,    0, 1599, 1600,    0,

     1600, 1601,    0, 1601, 1602,    0, 1602, 1603,    0, 1603,
     1604,    0, 1604, 1605,    0, 1605, 1606,    0, 1606, 1607,
        0, 1607, 1608,    0, 1608, 1609,    0, 1609, 1610,    0,
     1610, 1611,    0, 1611, 1612,    0, 1612, 1613,    0, 1613,
     1614,    0, 1614, 1615,    0, 1615, 1616,    0, 1616, 1617,
        0, 1617, 1618,    0, 1618, 1619,    0, 1619, 1620,    0,
     1620, 1621,    0, 1621, 1622,    0, 1622, 1623,    0, 1623,
     1624,    0, 1624, 1625,    0, 1625, 1626,    0, 1626, 1627,
        0, 1627, 1628,    0, 1628, 1629,    0, 1629, 1630,    0,
     1630, 1631,    0, 1631, 1632,    0, 1632, 1633,    0, 1633,

     1634,    0, 1634, 1635,    0, 1635, 1636,    0, 1636, 1637,
        0, 1637, 1638,    0, 1638, 1639,    0, 1639, 1640,    0,
     1640, 1641,    0, 1641, 1642,    0, 1642, 1643,    0, 1643,
     1644,    0, 1644, 1645,    0, 1645, 1646,    0, 1646, 1647,
        0, 1647, 1648,    0, 1648, 1649,    0, 1649, 1650,    0,
     1650, 1651,    0, 1651, 1652,    0, 1652, 1653,    0, 1653,
     1654,    0, 1654, 1655,    0, 1655, 1656,    0, 1656, 1657,
        0, 1657, 1658,    0, 1658, 1659,    0, 1659, 1660,    0,
     1660, 1661,    0, 1661, 1662,    0, 1662, 1663,    0, 1663,
     1664,    0, 1664, 1665,    0, 1665, 1666,    0, 1666, 1667,

        0, 1667, 1668,    0, 1668, 1669,    0, 1669, 1670,    0,
     1670, 1671,    0, 1671, 1672,    0, 1672, 1673,    0, 1673,
     1674,    0, 1674, 1675,    0, 1675, 1676,    0, 1676, 1677,
        0, 1677, 1678,    0, 1678, 1679,    0, 1679, 1680,    0,
     1680, 1681,    0, 1681, 1682,    0, 1682, 1683,    0, 1683,
     1684,    0, 1684, 1685,    0, 1685, 1686,    0, 1686, 1687,
        0, 1687, 1688,    0, 1688, 1689,    0, 1689, 1690,    0,
     1690, 1691,    0, 1691, 1692,    0, 1692, 1693,    0, 1693,
     1694,    0, 1694, 1695,    0, 1695, 1696,    0, 1696, 1697,
        0, 1697, 1698,    0, 1698, 1699,    0, 1699, 1700,    0,

     1700, 1701,    0, 1701, 1702,    0, 1702, 1703,    0, 1703,
     1704,    0, 1704, 1705,    0, 1705, 1706,    0, 1706, 1707,
        0, 1707, 1708,    0, 1708, 1709,    0, 1709, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[18] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
/*
 *
 * CS-252 
 * shell.l: lexical analyzer for shell
 * You have to extend it.
 *
 */
#line 11 "shell.l"

#include <cstring>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include "y.tab.hh"

#include <string.h>
#include "y.tab.hh"

////////////  Start added code ///////////


extern “C” char * read_line();

int mygetc(FILE * f) {
  static char *p;
  char ch;

     if (!isatty(0)) {
  // stdin is not a tty. Call real getc
    return getc(f);
  }

  // stdin is a tty. Call our read_line.
  if (p==NULL || *p == 0) {
    char * s = read_line();
    p = s;
  }

  ch = *p;
  p++;

  return ch;
}

#undef getc
#define getc(f) mygetc(f)

/////////// End added code ///////////*/

#define MAX_INCLUDE_DEPTH 10
YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

static  void yyunput (int c,char *buf_ptr  );

char *getenv(const char *name);

void myunputc(int c) {
  unput(c);
}

void remove_character(char* s, char c, int p) {
  int j, n = strlen(s);
  int escaped = 0; 
  int count = 0;

  for (int i = j = 0; i < n; i++) {
    if (s[i] != c || escaped || (p && count == p)) {
      s[j++] = s[i];
      escaped = 0;
    } else {
      escaped = 1;
      count++;
    }
  }   

  s[j] = '\0';
}

/*void source(char *s) {
  FILE *yyin = fopen(s, "r");

  if (!yyin) {
    fprintf( stderr, "No File" );
  } else {
    yypush_buffer_state( yy_create_buffer( yyin, YY_BUF_SIZE ) );
    yyparse();
    fclose(yyin);
  }
}*/

void removeStartAndEnd(char* s) {
  int j, n = strlen(s);

  s[0] = '\0';
  for (int i = 1; i < n; i++) {
    s[i - 1] = s[i];
  }   
  s[n - 2] = '\0';
}

#line 3368 "lex.yy.cc"
#line 3369 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 108 "shell.l"


#line 3589 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1339 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 10329 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 110 "shell.l"
{
  return NEWLINE;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 114 "shell.l"
{
  /* Discard spaces and tabs */
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 118 "shell.l"
{
  return GREAT;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 122 "shell.l"
{
  return GREATGREAT;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 126 "shell.l"
{
  return LESS;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 130 "shell.l"
{
  return PIPE;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 134 "shell.l"
{
  return AMPERSAND;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 138 "shell.l"
{
  return TWOGREAT;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 142 "shell.l"
{
  return GREATAMPERSAND;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 146 "shell.l"
{
  return GREATGREATAMPERSAND;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 150 "shell.l"
{ 
  remove_character(yytext, '$', NULL);
  remove_character(yytext, '(', NULL);
  remove_character(yytext, ')', NULL);

  char** arguments = (char**) malloc(sizeof(char*));

  int pin[2], pout[2];
  pipe(pin); pipe(pout);

  int ret = fork();
  if (ret == 0) {
      close(pin[1]);
      close(pout[0]);

      dup2(pin[0], 0);
      close(pin[0]);

      dup2(pout[1], 1);
      close(pout[1]);
      
      // Execute shell executable
      execvp("/proc/self/exe", arguments);
      perror("Error in Child Process");
      exit(1);
  } else if (ret < 0) {
      perror("Error Forking Child");
      exit(1);
  }

  close(pin[0]);
  close(pout[1]);

  write(pin[1], strcat(yytext, "\n"), strlen(yytext) + 1);
  write(pin[1], "exit\n", 6);
  close(pin[1]);
  
  int size = 1024;
  char* buffer = (char*) malloc(sizeof(char) * size);
  char* iterator = buffer;
  int n = read(pout[0], iterator++, 1);
  while (n > 0) {
    n = read(pout[0], iterator++, 1);
    if (strlen(buffer) == size) {
      size = size * 2;
      realloc(buffer, size);
    }
  }

  *iterator = '\0';
  close(pout[0]);

  for (int i = strlen(buffer) - 1; i >= 0; i--) {
    char c = ' ';
    if (buffer[i] == '\n') {
      myunputc(' ');
    } else {
      myunputc(buffer[i]);
    }
  }

  free(buffer);
  free(arguments);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 215 "shell.l"
{
  char path[100];
  char home[] = "/homes";

  char* iterator = path;
  strncpy(iterator, home, strlen(home));
  iterator += strlen(home);

  char* def = getenv("USER");

  path[strlen(home)] = '\0';  
  char* suffix = strchr(yytext, '/');

  if (suffix) {
    if ((int) (suffix - yytext) - 1) {
      char username[100];
      iterator[0] = '/';
      iterator++;

      strncpy(iterator, yytext + 1, (int) (suffix - yytext) - 1);
      iterator += (int) (suffix - yytext) - 1;
      iterator[0] = '\0';

      strncpy(iterator, suffix, strlen(suffix));
      iterator += strlen(suffix);
      iterator[0] = '\0';
    } else {
      iterator[0] = '/';
      iterator++;

      strncpy(iterator, def, strlen(def));
      iterator += strlen(def);
      iterator[0] = '\0';

      strncpy(iterator, suffix, strlen(suffix));
      iterator += strlen(suffix);
      iterator[0] = '\0';    
    }
  } else if (strlen(yytext) > 1) {
    char username[100];
    sprintf(username, "/%s", yytext + 1);
    strncpy(iterator, username, strlen(username));
    iterator += strlen(username);
    iterator[0] = '\0';
  } else {
    iterator[0] = '/';
    iterator++;
    
    strncpy(iterator, def, strlen(def));
    iterator += strlen(def);
    iterator[0] = '\0';
  }

  yylval.cpp_string = new std::string(path);
  return WORD;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 272 "shell.l"
{ 
  remove_character(yytext, '\\', NULL);
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 278 "shell.l"
{
  char* envStart = strchr(yytext, '{') + 1;
  char* envEnd = strchr(yytext, '}');
  int length = (int)(envEnd - envStart);

  char* env = (char*) malloc(sizeof(char) * length);
  env = strncpy(env, envStart, length);
  env[length] = '\0';

  int size = 1024;
  char* buffer = (char*) malloc(sizeof(char) * size);
  char* initialBuffer = buffer;

  if (!strcmp(env, "$")) {
    // Return PID of the Shell
    sprintf(buffer, "%d", getpid());
  } else if (!strcmp(env, "?")) {
    // Return exit code of last command
    if (getenv("LAST_STAT")) buffer = getenv("LAST_STAT");
    else buffer[0] = '\0';  
  } else if (!strcmp(env, "!")) {
    // Return PID of last background process
    if (getenv("LAST_BP")) buffer = getenv("LAST_BP");
    else buffer[0] = '\0';
  } else if (!strcmp(env, "_")) {
    // Return the last argument of the last command
    if (getenv("LAST_ARG")) buffer = getenv("LAST_ARG");
    else buffer[0] = '\0';
  } else if (!strcmp(env, "SHELL")) {
    // Return the path of the shell
    realpath(getenv("SHELL_PATH"), buffer);
  } else {
    // Return ENV variable expansion
    if (getenv(env)) buffer = getenv(env);
    else buffer[0] = '\0';
  }

  free(env);

  char* target = (char*) malloc(sizeof(char) * size);
  char* iterator = target;

  strncpy(iterator, yytext, (int) (envStart - yytext) - 2);
  iterator += (int) (envStart - yytext) - 2;

  strncpy(iterator, buffer, strlen(buffer));
  iterator += strlen(buffer);

  strncpy(iterator, yytext + (int) (envStart - yytext) + length + 1, (int) (yytext + strlen(yytext) - envEnd + 1));
  iterator += (int) (yytext + strlen(yytext) - envEnd);
  
  iterator[(int) (iterator - target)] = '\0';

  if(target) {
    for (int i = strlen(target) - 1; i >= 0; i--) {
      myunputc(target[i]);
    }
  }

  free(initialBuffer);
  free(target);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 341 "shell.l"
{
  removeStartAndEnd(yytext);
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 347 "shell.l"
{
  /* Assume that file names have only alpha chars */
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 352 "shell.l"
ECHO;
	YY_BREAK
#line 3953 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1339 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1339 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1338);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 352 "shell.l"
