#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 16
#define YY_END_OF_BUFFER 17
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[898] =
    {   0,
        0,    0,   17,   15,    2,    1,   15,   16,    7,   15,
        5,    3,   12,    6,   15,   15,   15,    0,   12,   15,
        0,   15,   15,    0,    0,    0,    0,   12,    0,    8,
        9,    4,   12,   12,   12,   12,   12,   15,   15,    0,
       14,   15,    0,   14,   15,    0,   14,   15,    0,   15,
       14,    0,    0,    0,    0,    0,    0,    0,   12,   12,
       12,   12,    0,    0,    0,   12,   10,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   15,   15,
       15,   12,   14,   14,   14,   14,   14,   14,   15,    0,
       14,   15,    0,   14,   14,    0,   14,    0,    0,    0,

        0,    0,   11,   12,   11,    0,    0,    0,    0,   11,
        0,   12,   12,   12,   11,   12,   12,   12,   12,   12,
       12,   12,   12,    0,    0,    0,   12,   13,   13,    0,
        0,    0,   13,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   15,   15,   15,
       11,   12,   15,   15,   15,   11,   15,   12,   12,   12,
       11,   12,   14,   14,   14,   14,   14,   14,   14,   15,
        0,   14,   15,    0,   11,   14,   11,   14,    0,   14,

       14,   14,   11,   15,   14,    0,   11,   14,   14,    0,
       11,   11,   11,   11,   11,   11,   11,    0,   14,    0,
       11,    0,   11,   11,   11,   11,    0,    0,    0,    0,
       11,   12,   12,   12,   12,   11,   12,   12,   11,   11,
       11,   11,   11,   12,   12,   12,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,    0,    0,   14,   13,   14,   13,    0,    0,
       14,   13,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   11,   12,   12,   12,   12,   12,   11,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       11,   11,   11,   11,   11,   15,   14,   15,   11,   11,
       11,   11,   11,   15,   15,   15,   11,   12,   11,   11,
       11,   11,   11,   14,   14,   14,   14,   14,   14,   11,
       11,   11,   11,   14,   14,   14,   14,   11,   14,   14,
       14,   11,   11,   11,   11,   11,   11,   15,    0,   14,
       15,    0,   11,   14,   14,   11,   14,   14,   11,   11,
       11,   11,   11,   14,    0,   11,   11,   11,   11,   11,
       11,   12,   12,   12,   11,   12,   12,   12,   12,   11,

       12,   12,   11,   11,   11,   11,   11,   12,   12,   12,
       11,   12,   12,   12,   12,   11,   12,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   12,   12,
       12,   11,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   14,   14,   13,
       14,   14,   13,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   11,   12,   12,   12,
       12,   12,   11,   12,   12,   12,   12,   12,   11,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   11,   12,   11,   11,   11,   11,   11,
       12,   12,   12,   11,   12,   12,   12,   12,   11,   12,
       12,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   14,   14,   14,   14,   11,
       14,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   12,
       12,   11,   12,   12,   12,   12,   11,   12,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   12,

       12,   12,   11,   12,   12,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   12,   12,   12,   11,   12,   12,   12,   12,   11,
       12,   12,   12,   12,   12,   14,   14,   13,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   11,
       12,   12,   12,   12,   11,   12,   11,   11,   11,   11,
       11,   11,   12,   12,   12,   12,   11,   12,   12,   12,
       12,   11,   12,   12,   12,   12,   11,   12,   12,   11,
       11,   11,   11,   11,   12,   12,   12,   12,   12,   12,

       12,   12,   11,   11,   11,   11,   11,   11,   12,   12,
       12,   11,   12,   12,   12,   12,   11,   12,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   14,   14,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   12,   11,
       11,   11,   11,   12,   12,   11,   12,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   12,   12,   12,   12,   11,   12,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   11,   12,   11,   11,   11,
       11,   11,   11,   12,   12,   12,   12,   11,   12,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       12,   12,   11,   12,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   12,   12,   12,   11,   12,
       11,   11,   11,   11,   11,   11,   12,   12,   12,   11,
       12,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    6,    1,    7,    1,    8,
        9,    1,    1,    1,    1,    1,    1,    1,    1,   10,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   11,
        1,   12,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   13,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   14,   15,   16,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[17] =
    {   0,
        1,    2,    2,    3,    1,    4,    1,    1,    1,    1,
        1,    1,    1,    4,    1,    1
    } ;

static const flex_int16_t yy_base[1088] =
    {   0,
        0,    0,  697,   16, 5975, 5975,   32,   44,   54,  680,
        0,   44,   67,    0,    0,    0,  683,    0,    0,   83,
      685,   99,  681,  112,  115,  680,  118,  127,  140,    0,
        0,  680,    0,  156,  674,  168,  181,  197,    0,  676,
      213,  672,  226,   14,    0,  674,    0,  670,    0,  232,
      245,  669,  248,  664,  251,  662,  261,  267,  277,  287,
      662,  296,  309,  653,  322,  338,    0,  354,  370,  659,
      383,  396,  412,    0,  428,  654,  440,    0,  453,  469,
      653,  485,  501,    0,  652,  514,   30,   49,  520,   56,
      536,  651,  549,  555,  558,  563,    0,  650,  649,  643,

      566,    0,  572,  582,   60,  592,   57,  598,  643,  604,
      610,    0,  620,  642,  630,  640,  650,  660,  670,  680,
      690,  640,    0,  703,  631,  716,  732,  744, 5975,  754,
      766,  779,    0,    0,  795,  811,  823,  836,  852,  634,
      633,  868,    0,    0,  632,  630,    0,  884,  897,    0,
      907,    0,  920,  629,    0,    0,  936,  952,  624,    0,
      968,    0,  984,  623,    0,    0, 1000, 1016, 1032,  622,
     1048,    0, 1064, 1080,  620, 1096, 1112,    0,    0,  619,
     1128,    0, 1144, 1160,  614, 1173, 1179, 1192, 1195,    0,
      120, 1203,  613, 1216,    0, 1222, 1228, 1237,  121,    0,

      612, 1250, 1259, 1275, 1288, 1294, 1300, 1306, 1309,    0,
     1315, 1325, 1331,  610, 1341,  130,  133,  609,    0,    0,
     1351, 1357,    0, 1363,  604,    0, 1369,  602, 1379, 1385,
      598,    0, 1395, 1405, 1415, 1425, 1435, 1445, 1455, 1465,
      597,    0, 1475, 1485, 1495, 1505, 1515,  592, 1525, 1535,
     1545, 1555, 1565, 1575,  591, 1585,  586,  585, 1595,    0,
      584, 1605, 1615, 1627, 1640, 1653, 1656,  585, 1669, 1681,
     1694, 1707, 1713, 1729, 1745, 1758, 1771, 1787,    0, 1799,
     1812, 1828,  581, 1841, 1854, 1870, 1886,  576,  575, 1902,
     1915, 1925, 1935,    0, 1948,  574, 1961,    0, 1974,    0,

     1990,  572, 2006,    0, 2022, 2038, 2054,  571, 2070,    0,
     2086,    0,  566,  565,    0,    0,    0,  557,  549,    0,
     2102, 2118,  548,    0, 2134, 2150, 2166,  531, 2182,    0,
     2198,  530,    0, 2214, 2230,  515,    0, 2246,    0, 2262,
      514,    0,    0, 2278,    0,  496, 2291, 2297, 2303, 2309,
     2315, 2321, 2327,    0,    0,  495, 2333, 2342, 2358, 2371,
      480, 2377,    0,    0,  479, 2383,    0,    0,  170,    0,
      464, 2389,    0, 2395,  463,    0,    0,  448, 2401, 2407,
     2413,  447, 2419,    0, 2429,  444,    0, 2435,  443,    0,
     2441, 2447, 2457, 2467, 2477, 2487,  442, 2497,    0, 2507,

     2517, 2527,    0, 2537,  441,    0, 2547,    0, 2557,  440,
     2567,    0, 2577, 2587, 2597, 2607, 2617,    0, 2627,  439,
        0,    0, 2637, 2647, 2657, 2667,  423,  422,    0, 2677,
      407,    0,    0, 2687,    0,    0,    0, 2697, 2707, 2717,
     2727, 2737, 2747, 2757, 2767, 2777,  406, 2787, 2800, 2813,
     2816, 2829,   66, 2845, 2861, 2877, 2890,    0,    0,    0,
     2900,    0, 2913,    0,    0,    0, 2929,    0,    0, 2945,
     2961,  391, 2974, 2987, 3003, 3016, 3026,    0,    0, 3039,
      390,    0,    0, 3055, 3071,  387, 3087, 3103, 3119,    0,
      386, 3132, 3145, 3161, 3177,    0, 3193,  385, 3209,    0,

     3222,    0,  384,    0, 3235,    0,    0,  383,    0,    0,
        0,    0,  382,    0,    0,    0, 3251,  365,    0,    0,
     3267, 3283,  364, 3299, 3315,    0, 3331,  349,    0,    0,
     3347, 3363, 3379,  348,    0,    0, 3395, 3411,  333,    0,
     3427, 3443, 3459,  332,    0, 3475,    0, 3491,  329,    0,
        0, 3507, 3520, 3526,    0, 3535, 3551,  327, 3564,    0,
     3570, 3576, 3582, 3588, 3597, 3610, 3616, 3622,  326, 3628,
     3638, 3644,  325, 3654, 3664,  324,    0,    0,  323, 3670,
     3683, 3696, 3706, 3716, 3726, 3736, 3746,    0, 3756, 3766,
      322,    0, 3776, 3786, 3796, 3806, 3816,  321,  304, 3826,

     3836,  303, 3846,    0, 3856, 3866, 3876,  300,    0,  299,
     3886, 3896,  298,    0, 3906,  297, 3916,    0,  296,  295,
     3926,    0, 3936,  291,  290,    0, 3946, 3956, 3966, 3976,
      289, 3986,    0,  288,    0, 3996, 4009, 4022, 4028, 4044,
     4060, 4073,    0, 4086,    0, 4099, 4112,    0,    0, 4125,
     4138, 4154,  287,  286, 4170,    0,    0,  281,  280, 4186,
        0, 4202, 4215,    0,    0,    0,    0, 4228,  279,    0,
        0, 4244,    0, 4260,  277,    0,    0,    0, 4276,    0,
      276, 4292, 4308,    0,    0,  271,    0,    0, 4324, 4340,
     4356,  270,    0,    0,    0,    0,    0,    0,    0,  269,

        0,    0,    0,    0,  266,    0,    0, 4372,    0,    0,
      261,    0,    0, 4388, 4404,  260, 4420,    0,    0, 4436,
      255,    0,    0, 4452, 4468, 4484,  254,    0, 4500, 4516,
      253,    0, 4532,    0,    0,  251,    0,    0,    0,  250,
        0,    0,    0, 4548,  227,    0,    0, 4561, 4567, 4573,
     4582,    0,  226, 4595,    0, 4601,  208,    0, 4607, 4617,
      207,    0, 4627, 4637,  192, 4647,    0, 4657,    0, 4667,
      191,    0,    0, 4677, 4687, 4697,  177, 4707,    0, 4717,
      176,    0,    0, 4727, 4737, 4747, 4757, 4767, 4777,  175,
        0,    0,  172,    0,    0, 4787, 4797, 4807,  170,  169,

        0,  168,    0, 4820, 4836, 4852, 4865,    0, 4878,    0,
     4891, 4904, 4920,  151, 4933, 4946, 4962, 4978, 4994, 5010,
      150,    0,    0, 5026, 5042, 5058,  135, 5074,    0,    0,
        0,  130,    0,    0, 5090, 5106, 5122,  128,    0,    0,
        0,    0,  127,    0,    0, 5138, 5154,  120,    0,    0,
     5167, 5177,    0,    0,    0,    0,  119,    0,    0, 5187,
        0,    0,   94,    0,    0,    0,    0,   93,    0,    0,
        0,    0,   78,    0,    0, 5200,    0,    0,   77,    0,
        0,    0,    0,   55,    0,    0,    0,    0,   47,    0,
        0,    0,    0,   12,    0,    0, 5975, 5216, 5220, 5224,

     5228, 5232, 5236, 5240, 5244, 5248, 5252, 5256, 5260, 5264,
     5268, 5272, 5276, 5279, 5283, 5287, 5291, 5295, 5299, 5303,
     5307, 5311, 5315, 5319, 5323, 5327, 5331, 5335, 5339, 5343,
     5347, 5351, 5354, 5358, 5362, 5366, 5370, 5374, 5378, 5382,
     5386, 5390, 5394, 5398, 5402, 5406, 5410, 5414, 5418, 5422,
     5426, 5430, 5434, 5438, 5442, 5446, 5450, 5454, 5458, 5462,
     5466, 5470, 5474, 5478, 5482, 5486, 5490, 5494, 5498, 5502,
     5506, 5510, 5514, 5518, 5522, 5526, 5530, 5534, 5538, 5542,
     5546, 5550, 5554, 5558, 5562, 5566, 5570, 5574, 5578, 5582,
     5586, 5590, 5594, 5598, 5602, 5606, 5610, 5614, 5618, 5622,

     5626, 5630, 5634, 5638, 5642, 5646, 5650, 5654, 5658, 5662,
     5666, 5670, 5674, 5678, 5682, 5686, 5690, 5694, 5698, 5702,
     5706, 5710, 5714, 5718, 5722, 5726, 5730, 5734, 5738, 5742,
     5746, 5750, 5754, 5758, 5762, 5766, 5770, 5774, 5778, 5782,
     5786, 5790, 5794, 5798, 5802, 5806, 5810, 5814, 5818, 5822,
     5826, 5830, 5834, 5838, 5842, 5846, 5850, 5854, 5858, 5862,
     5866, 5870, 5874, 5878, 5882, 5886, 5890, 5894, 5898, 5902,
     5906, 5910, 5914, 5918, 5922, 5926, 5930, 5934, 5938, 5942,
     5946, 5950, 5954, 5958, 5962, 5966, 5970
    } ;

static const flex_int16_t yy_def[1088] =
    {   0,
      897,    1,  897,  897,  897,  897,  897,  898,  898,    4,
        9,    9,  897,    9,    4,    7,    4,    9,   13,  897,
      899,  897,   20,  900,  901,    9,  902,  903,  897,    9,
        9,    9,   13,  897,   13,  903,  897,  897,   20,  899,
      897,   20,  900,  904,   20,  899,   41,   20,   43,  897,
      905,   43,  906,   43,  907,  908,  909,  907,  910,  911,
       36,  912,  897,  913,  914,  897,    9,  897,  897,   68,
      915,  897,  897,   37,  897,   37,  912,   37,  897,  897,
       79,  897,  897,   41,   83,  916,  904,  904,  897,  917,
      897,   89,  918,  905,  916,  919,   94,   43,   58,  908,

      909,   58,  920,  910,  921,  918,  917,  922,  106,  923,
      924,  104,  925,  104,  926,  927,  928,  915,  929,  930,
      931,   77,   77,  897,  932,  933,  897,  934,  897,  935,
      936,  937,   43,  127,  897,  897,  938,  897,  897,  138,
      118,  897,  138,  139,  138,  118,  142,  897,  939,  118,
      929,  142,  897,  142,  151,  142,  897,  897,  157,  104,
      897,  142,  897,  142,  151,  142,  897,  897,  897,  168,
      897,  157,  897,  897,  173,  897,  897,  157,  158,  157,
      897,  161,  897,  897,  183,  940,  897,  941,  940,  173,
      942,  897,  173,  943,  176,  944,  945,  897,  942,  192,

      198,  946,  897,  897,  947,  943,  948,  949,  947,  206,
      950,  951,  950,  213,  952,  953,  953,  206,  209,  206,
      948,  954,  221,  955,  221,  221,  956,  957,  958,  956,
      213,  104,  959,  960,  959,  961,  962,  963,  952,  964,
      239,  239,  965,  966,  967,  966,  965,  246,  968,  969,
      970,  971,  972,  970,  254,  973,  104,  246,  974,  254,
      254,  975,  976,  977,  978,  979,  980,  981,  976,  977,
      978,  979,  897,  897,  897,  969,  897,  897,  277,  982,
      897,  897,  281,  983,  897,  897,  897,  286,  235,  897,
      968,  983,  984,  285,  897,  285,  984,  285,  897,  286,

      897,  286,  897,  290,  897,  897,  897,  306,  897,  306,
      897,  295,  311,  254,  311,  306,  307,  306,  246,  306,
      897,  897,  321,  321,  897,  897,  897,  326,  897,  329,
      897,  329,  329,  897,  897,  334,  321,  897,  325,  897,
      325,  325,  309,  897,  327,  344,  985,  986,  986,  987,
      988,  987,  988,  344,  327,  344,  985,  897,  897,  989,
      357,  990,  358,  331,  358,  990,  358,  326,  991,  327,
      326,  992,  329,  989,  357,  366,  374,  357,  993,  994,
      993,  381,  995,  374,  992,  381,  366,  996,  366,  366,
      997,  998,  999,  998, 1000, 1001,  394,  999,  394, 1000,

     1001, 1002,  400, 1003,  400,  400, 1004,  401, 1005,  401,
     1004,  401, 1006, 1007, 1006, 1008, 1009,  400, 1010,  400,
      400,  411, 1011, 1012, 1013, 1012,  426,  426,  401, 1014,
      401,  411,  401, 1015,  398,  394,  401, 1016, 1017, 1017,
     1018, 1016, 1019, 1019, 1020, 1009,  446, 1021, 1022, 1023,
     1024, 1024, 1025,  897,  897,  897, 1026,  454,  455,  456,
     1026,  456,  897,  456,  444,  456,  897,  456,  444,  897,
      897,  470, 1027,  897,  897, 1028, 1027,  440,  474,  897,
      474,  440,  474,  897,  897,  484,  897,  897,  897,  485,
      489, 1029,  897,  897,  897,  488,  897,  488,  897,  488,

     1030,  442,  440,  440,  897,  488,  497,  488,  401,  488,
      484,  485,  484,  487,  488,  487,  897,  487,  487,  499,
      897,  897,  521,  897,  897,  488,  897,  488,  499,  488,
      897,  897,  897,  532,  532,  532,  897,  897,  537,  537,
      897,  897,  897,  542,  542,  897,  487,  897,  487,  487,
      499,  897, 1031, 1031,  554,  897,  897,  556, 1032,  542,
     1033, 1034, 1035, 1035,  897, 1036, 1034, 1036,  568, 1037,
     1038, 1037,  572, 1039, 1040,  568,  567,  568,  568, 1041,
      897, 1042, 1043, 1044, 1041, 1044, 1045,  401, 1042, 1046,
      589,  589, 1047, 1048, 1049, 1050, 1049,  597,  597, 1043,

     1051,  600, 1047,  600, 1052, 1045, 1046,  606,  606,  597,
     1039, 1053,  611,  611, 1054,  597, 1055,  597,  597,  597,
     1056,  401, 1051,  401,  597,  401, 1057, 1058, 1057, 1054,
      629, 1059,  623,  401,  401, 1060, 1061, 1062,  897,  897,
      897, 1063,  641,  897,  641, 1064,  897,  644,  647, 1065,
      897,  897,  651,  581,  897,  651,  652,  651,  581,  897,
      655,  897, 1041,  581,  589,  600,  660,  897,  660,  589,
      660,  897,  655,  897,  655,  600,  672,  655,  897,  652,
      679,  897,  897,  655,  674,  655,  672,  655,  897,  897,
      897,  690,  690,  690,  663,  581,  600,  655,  674,  655,

      600,  655,  660,  668,  660,  660,  672,  897,  683,  674,
      683,  690,  683,  897,  897,  714,  897,  714,  690,  897,
      690,  690,  690,  897,  897,  897,  725,  725,  897,  897,
      729,  729,  897,  725,  726,  725,  725,  682,  668,  682,
      682,  690,  733,  897,  733,  733,  717, 1066, 1067, 1068,
      897,  726,  751, 1068,  751, 1069,  754,  754, 1070, 1071,
      589,  589, 1072, 1073,  600, 1072,  600, 1074,  766, 1075,
      766,  766,  766, 1076, 1071, 1076,  776, 1077,  766, 1075,
      766,  766,  766, 1078, 1079, 1080, 1073, 1080, 1077,  788,
      789,  780,  789,  789,  789, 1081, 1082, 1081,  798,  798,

      787,  600,  600,  897,  897,  897, 1083,  806,  897,  806,
     1084,  897,  897,  812, 1085,  897,  897,  897,  897,  897,
      819,  819,  819,  897,  897,  897,  825,  897,  825,  819,
      820,  819,  819,  819,  897,  897,  897,  836,  836,  828,
      828,  820,  828,  828,  828,  897,  897,  846,  846,  846,
     1086, 1085,  589,  600,  589,  775,  589,  589,  766, 1087,
      789,  780,  789,  789,  789,  600,  787,  600,  766,  600,
      816,  837,  816,  816,  819,  897,  817,  826,  817,  819,
      817,  828,  820,  828,  828,  828,  766,  780,  766,  766,
      766,  819,  820,  819,  819,  819,    0,  897,  897,  897,

      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,

      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897
    } ;

static const flex_int16_t yy_nxt[5992] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,    4,    4,   10,
       11,   12,   13,    4,   14,    4,   15,   40,   88,  876,
       16,   17,   18,   15,   15,   15,   18,   18,   19,   15,
       18,   18,   20,   40,   88,   21,   22,   23,   24,   20,
       20,   20,   24,   24,   20,   20,   24,   24,   25,   26,
       31,   27,   40,   88,  860,   32,   28,   29,   25,   26,
      196,  196,  835,  100,  197,  197,   28,   33,  217,   40,
       88,   34,   35,   36,   33,   33,   33,   36,   36,   37,
       33,   36,   36,   39,  824,  818,   40,   41,   42,   43,
       39,   39,   39,   43,   43,   39,   39,   43,   43,   45,

      785,  784,   46,   47,   48,   49,   45,   45,   45,   49,
       49,   45,   45,   49,   49,   40,   51,   52,   21,   53,
       54,   56,   57,   58,  196,  196,  768,  724,  197,  197,
       59,   60,   61,  100,  835,  708,  100,  876,  217,   62,
       63,  217,  689,   64,   65,   26,   63,   63,   63,   63,
       63,   63,   66,   18,   63,   18,   68,  876,  662,   21,
       69,   70,   71,   68,   68,   68,   71,   71,   72,   68,
       71,   71,   60,   61,  196,  785,  424,  424,  197,  784,
       62,   74,  408,  860,  403,   75,   76,   77,   74,   74,
       74,   77,   77,   78,   74,   77,   77,   79,  860,  785,

       56,   80,   81,   55,   79,   79,   79,   55,   55,   82,
       79,   55,   55,   83,  768,  575,   46,   84,   85,   86,
       83,   83,   83,   86,   86,   83,   83,   86,   86,   40,
       51,   52,   89,  565,  552,   90,   91,   92,   93,   89,
       89,   89,   93,   93,   89,   89,   93,   93,   46,   94,
       95,   46,   97,   98,  100,  101,  102,  708,  546,  103,
      541,  546,  835,  104,  107,  108,  109,  531,  689,  110,
      100,  101,  102,  818,  111,  103,  824,  835,  824,  104,
      100,  113,  114,  495,  824,  115,  818,  659,  662,  116,
       21,  117,  118,  659,  662,  605,  244,  595,  605,  119,

      121,  122,  595,  595,  595,  423,  595,  594,  123,  124,
      785,  595,  125,  126,   26,  124,  124,  124,  124,  124,
      124,  127,   18,  124,  128,  131,  132,   54,  595,  768,
      223,  223,  211,  223,  359,   24,  708,  133,  134,  565,
      546,  125,  135,   61,  134,  134,  134,  134,  134,  134,
      136,   36,  134,  137,  138,  724,  689,   40,  139,  140,
      141,  138,  138,  138,  141,  141,  142,  138,  141,  141,
      143,  305,  708,   46,  144,  145,  146,  143,  143,  143,
      146,  146,  147,  143,  146,  146,   40,  149,  150,  495,
      689,  632,  689,  662,  495,  151,  152,  505,  475,   40,

      153,  154,  155,  152,  152,  152,  155,  155,  156,  152,
      155,  155,  157,  244,  605,   56,  158,  159,  160,  157,
      157,  157,  160,  160,  161,  157,  160,  160,  162,  424,
      424,   21,  163,  164,  165,  162,  162,  162,  165,  165,
      166,  162,  165,  165,  121,  122,  594,  605,  594,  392,
      575,  223,  123,  168,  223,  561,  100,  169,  170,   99,
      168,  171,  168,   99,   99,  172,  168,   99,   99,  173,
      561,  204,  107,  174,  175,  106,  173,  176,  173,  106,
      106,  173,  173,  106,  106,  178,  565,  561,  100,  179,
      180,  112,  178,  181,  178,  112,  112,  182,  178,  112,

      112,  183,  359,  359,   40,  184,  185,  186,  183,  183,
      183,  186,  186,  183,  183,  186,  186,   40,  188,  189,
      190,  552,  177,  191,  192,  193,  194,  190,  195,  190,
      194,  194,  190,  190,  194,  194,  198,  546,  204,  199,
      200,  201,  202,  198,  203,  198,  202,  202,  198,  198,
      202,  202,  191,  205,  206,  541,  244,  207,   46,   94,
       95,   40,  188,  189,  531,  208,   90,  209,  210,  107,
      108,  109,  155,  299,  110,  100,  212,  213,  531,  495,
      214,  505,  392,  495,  215,  100,  113,  114,  475,   44,
      115,  155,  244,  238,  116,  191,  205,  206,  155,  244,

      207,  199,  219,  220,  423,  211,  221,  191,  224,  225,
      105,  391,  226,  228,  229,  230,  194,  211,  231,  359,
      204,  187,  232,  107,  234,  235,  305,  204,  236,  177,
      299,  305,  237,  100,  240,  241,  299,  141,  242,  148,
      141,  148,  243,  100,  245,  246,  129,  262,  247,  238,
      222,  105,  248,   46,  249,  250,   99,   96,  204,  187,
      177,  167,  251,   40,  149,  150,  148,  252,  129,  120,
      105,   96,  151,   40,  253,  254,   96,   50,   44,   50,
       44,   73,  255,   56,  256,  257,   67,   27,   50,   44,
       38,   30,  258,   21,  259,  260,  897,  897,  897,  897,

      897,  897,  261,  124,  897,  897,  125,  126,   26,  124,
      124,  124,  124,  124,  124,  127,   18,  124,  128,  131,
      132,   54,  897,  897,  897,  897,  897,  897,  897,   24,
      897,  133,  134,  897,  897,  125,  135,   61,  134,  134,
      134,  134,  134,  134,  136,   36,  134,  137,   25,   26,
      897,  897,  897,  897,  897,  897,   28,  264,  265,   52,
      897,  897,  897,  897,  897,  897,  897,   43,  897,  266,
      267,   40,  897,  897,  897,  897,  897,  897,  897,   40,
      897,  268,  270,  271,   98,  897,  897,  897,  897,  897,
      897,  897,   49,  897,  272,  273,  897,  897,  131,  274,

      118,  273,  273,  273,  273,  273,  273,  275,   71,  273,
      276,  277,  897,  897,  125,  278,  122,  277,  277,  277,
      277,  277,  277,  279,   77,  277,  280,   60,   61,  897,
      897,  897,  897,  897,  897,   62,  138,  897,  897,   40,
      139,  140,  141,  138,  138,  138,  141,  141,  142,  138,
      141,  141,  281,  897,  897,   46,  282,  283,  284,  281,
      281,  281,  284,  284,  285,  281,  284,  284,  152,  897,
      897,   40,  153,  154,  155,  152,  152,  152,  155,  155,
      156,  152,  155,  155,  286,  897,  897,   90,  287,  288,
      289,  286,  286,  286,  289,  289,  290,  286,  289,  289,

       46,  291,  292,  897,  897,  897,  897,  897,  897,  293,
       40,  253,  254,  897,  897,  897,  897,  897,  897,  255,
      294,  897,  897,   46,  295,  296,  297,  294,  294,  294,
      297,  297,  298,  294,  297,  297,  178,  897,  897,  100,
      179,  180,  112,  178,  181,  178,  112,  112,  182,  178,
      112,  112,  300,  897,  897,  107,  301,  302,  233,  300,
      303,  300,  233,  233,  304,  300,  233,  233,  306,  897,
      897,  100,  307,  308,  244,  306,  309,  306,  244,  244,
      310,  306,  244,  244,  311,  897,  897,   46,  312,  313,
      314,  311,  311,  311,  314,  314,  315,  311,  314,  314,

      316,  897,  897,   56,  317,  318,  319,  316,  316,  316,
      319,  319,  320,  316,  319,  319,  168,  897,  897,  100,
      169,  170,   99,  168,  171,  168,   99,   99,  172,  168,
       99,   99,  173,  897,  897,  107,  174,  175,  106,  173,
      176,  173,  106,  106,  173,  173,  106,  106,  321,  897,
      897,  100,  322,  323,  211,  321,  324,  321,  211,  211,
      325,  321,  211,  211,  190,  897,  897,  191,  192,  193,
      194,  190,  195,  190,  194,  194,  190,  190,  194,  194,
      326,  897,  897,  199,  327,  328,  218,  326,  329,  326,
      218,  218,  326,  326,  218,  218,  330,  897,  897,  191,

      331,  332,  223,  330,  333,  330,  223,  223,  330,  330,
      223,  223,  334,  897,  897,  228,  335,  336,  227,  334,
      337,  334,  227,  227,  338,  334,  227,  227,  339,  897,
      897,  100,  340,  341,  239,  339,  342,  339,  239,  239,
      343,  339,  239,  239,  183,  897,  897,   40,  184,  185,
      186,  183,  183,  183,  186,  186,  183,  183,  186,  186,
       83,  897,  897,   46,   84,   85,   86,   83,   83,   83,
       86,   86,   83,   83,   86,   86,   40,  188,  189,  344,
      897,  897,   90,  345,  346,  347,  344,  344,  344,  347,
      347,  344,  344,  347,  347,   46,   94,   95,   40,  188,

      189,  897,  208,  198,  897,  897,  199,  200,  201,  202,
      198,  203,  198,  202,  202,  198,  198,  202,  202,  191,
      205,  206,  897,  897,  207,  191,  349,  897,  897,  897,
      350,  191,  352,  897,  897,  897,  353,  354,  897,  897,
      191,  355,  356,  357,  354,  358,  354,  357,  357,  354,
      354,  357,  357,  191,  360,  361,  897,  897,  362,  363,
      897,  897,  191,  364,  365,  366,  363,  367,  363,  366,
      366,  363,  363,  366,  366,  368,  897,  897,  369,  370,
      371,  372,  368,  373,  368,  372,  372,  368,  368,  372,
      372,  199,  374,  375,  897,  897,  376,  191,  205,  206,

      897,  222,  207,  191,  224,  225,  897,  897,  226,   90,
      377,  378,  199,  374,  375,  897,  897,  376,  100,  212,
      213,  897,  897,  214,  897,  897,  897,  215,  107,  380,
      381,  897,  897,  382,  100,  212,  213,  897,  383,  214,
      897,  897,  897,  215,  100,  240,  241,  897,  897,  242,
      897,  897,  897,  243,  191,  224,  225,  897,  897,  226,
      369,  384,  385,  897,  897,  386,  199,  388,  389,  897,
      897,  390,  100,  101,  102,  897,  897,  103,  897,  897,
      897,  104,  107,  108,  109,  897,  897,  110,  100,  101,
      102,  897,  111,  103,  897,  897,  897,  104,  191,  393,

      394,  897,  897,  395,  897,  897,  897,  396,  199,  398,
      399,  897,  897,  400,  897,  897,  897,  401,  191,  393,
      394,  897,  402,  395,  897,  897,  897,  396,  191,  404,
      405,  897,  897,  406,  897,  897,  897,  407,  191,  409,
      410,  897,  897,  411,  897,  897,  897,  412,  228,  414,
      415,  897,  897,  416,  897,  897,  897,  417,  100,  240,
      241,  897,  897,  242,  897,  897,  897,  243,  107,  419,
      420,  897,  897,  421,  897,  897,  897,  422,  100,  425,
      426,  897,  897,  427,  897,  897,  897,  428,  100,  245,
      246,  897,  897,  247,  897,  897,  897,  248,  107,  430,

      431,  897,  897,  432,  897,  897,  897,  433,  100,  245,
      246,  897,  434,  247,  897,  897,  897,  248,  100,  425,
      426,  897,  897,  427,  897,  897,  897,  428,   46,  291,
      292,  897,  897,  897,  897,  897,  897,  293,   40,  149,
      150,  897,  252,  897,  897,  897,  897,  151,   40,  253,
      254,  897,  897,  897,  897,  897,  897,  255,   90,  435,
      436,  897,  897,  897,  897,  897,  897,  437,   46,  438,
      439,  897,  897,  897,  897,  897,  897,  440,   40,  253,
      254,  897,  441,  897,  897,  897,  897,  255,  107,  234,
      235,  897,  897,  236,  897,  897,  897,  237,   46,  442,

      443,  897,  897,  897,  897,  897,  897,  444,   56,  445,
      446,  897,  897,  897,  897,  897,  897,  447,  264,  265,
       52,  897,  897,  897,  897,  897,  897,  897,   43,  897,
      266,  267,   40,  897,  897,  897,  897,  897,  897,  897,
       40,  897,  268,  270,  449,   95,  897,  897,  897,  897,
      897,  897,  897,   86,  897,  450,   40,   51,   52,  264,
      452,   87,  897,  897,  897,  897,  897,  897,  897,   87,
      897,  453,  264,  265,   52,  897,  897,  897,  897,  897,
      897,  897,   43,  897,  266,  267,   40,  897,  897,  897,
      897,  897,  897,  897,   40,  897,  268,  270,  449,   95,

      897,  897,  897,  897,  897,  897,  897,   86,  897,  450,
       40,   51,   52,  454,  897,  897,  264,  455,  150,  454,
      454,  454,  454,  454,  454,  456,  141,  454,  457,  458,
      897,  897,  270,  459,  250,  458,  458,  458,  458,  458,
      458,  460,  146,  458,  461,  462,  897,  897,  264,  463,
      254,  462,  462,  462,  462,  462,  462,  464,  155,  462,
      465,   40,  149,  150,  897,  897,  897,  897,  897,  897,
      151,  277,  897,  897,  125,  278,  122,  277,  277,  277,
      277,  277,  277,  279,   77,  277,  280,  466,  897,  897,
      131,  467,  260,  466,  466,  466,  466,  466,  466,  468,

      165,  466,  469,  121,  122,  897,  897,  897,  897,  897,
      897,  123,  470,  897,  897,   40,  471,  472,  473,  470,
      470,  470,  473,  473,  474,  470,  473,  473,  281,  897,
      897,   46,  282,  283,  284,  281,  281,  281,  284,  284,
      285,  281,  284,  284,   40,  476,  477,  897,  897,  897,
      897,  897,  897,  478,  479,  897,  897,   40,  480,  481,
      482,  479,  479,  479,  482,  482,  483,  479,  482,  482,
      484,  897,  897,  191,  485,  486,  392,  484,  487,  484,
      392,  392,  488,  484,  392,  392,  489,  897,  897,  199,
      490,  491,  492,  489,  493,  489,  492,  492,  494,  489,

      492,  492,  496,  897,  897,  191,  497,  498,  408,  496,
      499,  496,  408,  408,  500,  496,  408,  408,   46,  291,
      292,  897,  897,  897,  897,  897,  897,  293,   40,  476,
      477,  897,  501,  897,  897,  897,  897,  478,   40,  502,
      503,  897,  897,  897,  897,  897,  897,  504,  294,  897,
      897,   46,  295,  296,  297,  294,  294,  294,  297,  297,
      298,  294,  297,  297,   40,  502,  503,  897,  897,  897,
      897,  897,  897,  504,  506,  897,  897,   90,  507,  508,
      509,  506,  506,  506,  509,  509,  510,  506,  509,  509,
      511,  897,  897,  199,  512,  513,  397,  511,  514,  511,

      397,  397,  515,  511,  397,  397,  516,  897,  897,  191,
      517,  518,  403,  516,  519,  516,  403,  403,  520,  516,
      403,  403,  521,  897,  897,  228,  522,  523,  413,  521,
      524,  521,  413,  413,  525,  521,  413,  413,  306,  897,
      897,  100,  307,  308,  244,  306,  309,  306,  244,  244,
      310,  306,  244,  244,  526,  897,  897,  107,  527,  528,
      429,  526,  529,  526,  429,  429,  530,  526,  429,  429,
      532,  897,  897,  100,  533,  534,  424,  532,  535,  532,
      424,  424,  536,  532,  424,  424,  152,  897,  897,   40,
      153,  154,  155,  152,  152,  152,  155,  155,  156,  152,

      155,  155,  321,  897,  897,  100,  322,  323,  211,  321,
      324,  321,  211,  211,  325,  321,  211,  211,  537,  897,
      897,  107,  538,  539,  379,  537,  540,  537,  379,  379,
      537,  537,  379,  379,  339,  897,  897,  100,  340,  341,
      239,  339,  342,  339,  239,  239,  343,  339,  239,  239,
      190,  897,  897,  191,  192,  193,  194,  190,  195,  190,
      194,  194,  190,  190,  194,  194,  198,  897,  897,  199,
      200,  201,  202,  198,  203,  198,  202,  202,  198,  198,
      202,  202,  330,  897,  897,  191,  331,  332,  223,  330,
      333,  330,  223,  223,  330,  330,  223,  223,  542,  897,

      897,  199,  543,  544,  387,  542,  545,  542,  387,  387,
      542,  542,  387,  387,  168,  897,  897,  100,  169,  170,
       99,  168,  171,  168,   99,   99,  172,  168,   99,   99,
      173,  897,  897,  107,  174,  175,  106,  173,  176,  173,
      106,  106,  173,  173,  106,  106,  178,  897,  897,  100,
      179,  180,  112,  178,  181,  178,  112,  112,  182,  178,
      112,  112,  547,  897,  897,  107,  548,  549,  418,  547,
      550,  547,  418,  418,  551,  547,  418,  418,  354,  897,
      897,  191,  355,  356,  357,  354,  358,  354,  357,  357,
      354,  354,  357,  357,  191,  360,  361,  897,  897,  362,

      191,  349,  897,  897,  897,  350,  191,  349,  897,  897,
      897,  350,  191,  554,  897,  897,  897,  555,  191,  352,
      897,  897,  897,  353,  191,  554,  897,  897,  897,  555,
      191,  352,  897,  897,  897,  353,  191,  360,  361,  897,
      897,  362,  363,  897,  897,  191,  364,  365,  366,  363,
      367,  363,  366,  366,  363,  363,  366,  366,  556,  897,
      897,  369,  557,  558,  559,  556,  560,  556,  559,  559,
      556,  556,  559,  559,  199,  374,  375,  897,  897,  376,
      191,  562,  563,  897,  897,  564,  191,  562,  563,  897,
      897,  564,  191,  205,  206,  897,  897,  207,  199,  374,

      375,  897,  897,  376,  191,  224,  225,  897,  897,  226,
      199,  567,  568,  897,  897,  569,  191,  224,  225,  897,
      391,  226,  228,  571,  572,  897,  897,  573,  897,  897,
      897,  574,  191,  205,  206,  897,  222,  207,  199,  388,
      389,  897,  897,  390,  369,  577,  578,  897,  897,  579,
      191,  393,  394,  897,  897,  395,  897,  897,  897,  396,
      199,  580,  581,  897,  897,  582,  897,  897,  897,  583,
      191,  393,  394,  897,  402,  395,  897,  897,  897,  396,
      191,  404,  405,  897,  897,  406,  897,  897,  897,  407,
      191,  409,  410,  897,  897,  411,  897,  897,  897,  412,

      199,  580,  581,  897,  897,  582,  897,  897,  897,  583,
      191,  404,  405,  897,  897,  406,  897,  897,  897,  407,
      191,  409,  410,  897,  897,  411,  897,  897,  897,  412,
      369,  585,  586,  897,  897,  587,  897,  897,  897,  588,
      199,  590,  591,  897,  897,  592,  897,  897,  897,  593,
      191,  596,  597,  897,  897,  598,  897,  897,  897,  599,
      199,  601,  602,  897,  897,  603,  897,  897,  897,  604,
      191,  596,  597,  897,  897,  598,  897,  897,  897,  599,
      100,  113,  114,  897,  897,  115,  897,  897,  897,  116,
      107,  234,  235,  897,  897,  236,  897,  897,  897,  237,

      100,  113,  114,  897,  238,  115,  897,  897,  897,  116,
      100,  240,  241,  897,  897,  242,  897,  897,  897,  243,
      100,  245,  246,  897,  897,  247,  897,  897,  897,  248,
      199,  607,  608,  897,  897,  609,  897,  897,  897,  610,
      228,  612,  613,  897,  897,  614,  897,  897,  897,  615,
      100,  425,  426,  897,  897,  427,  897,  897,  897,  428,
      107,  617,  618,  897,  897,  619,  897,  897,  897,  620,
      100,  425,  426,  897,  621,  427,  897,  897,  897,  428,
      199,  623,  624,  897,  897,  625,  897,  897,  897,  626,
      228,  628,  629,  897,  897,  630,  897,  897,  897,  631,

       46,  438,  439,  897,  897,  897,  897,  897,  897,  440,
       40,  502,  503,  897,  632,  897,  897,  897,  897,  504,
       40,  502,  503,  897,  897,  897,  897,  897,  897,  504,
       90,  633,  634,  897,  897,  897,  897,  897,  897,  635,
       46,  438,  439,  897,  897,  897,  897,  897,  897,  440,
       40,  253,  254,  897,  441,  897,  897,  897,  897,  255,
       40,  253,  254,  897,  897,  897,  897,  897,  897,  255,
      107,  430,  431,  897,  897,  432,  897,  897,  897,  433,
      100,  245,  246,  897,  434,  247,  897,  897,  897,  248,
      264,  637,  189,  897,  897,  897,  897,  897,  897,  897,

      186,  897,  638,  270,  449,   95,  897,  897,  897,  897,
      897,  897,  897,   86,  897,  450,   40,  188,  189,  264,
      452,   87,  897,  897,  897,  897,  897,  897,  897,   87,
      897,  453,  264,  452,   87,  897,  897,  897,  897,  897,
      897,  897,   87,  897,  453,  454,  897,  897,  264,  455,
      150,  454,  454,  454,  454,  454,  454,  456,  141,  454,
      457,  639,  897,  897,  270,  640,  292,  639,  639,  639,
      639,  639,  639,  641,  284,  639,  642,  462,  897,  897,
      264,  463,  254,  462,  462,  462,  462,  462,  462,  464,
      155,  462,  465,   40,  149,  150,  897,  897,  897,  897,

      897,  897,  151,   40,  149,  150,  897,  897,  897,  897,
      897,  897,  151,  643,  897,  897,  270,  644,  439,  643,
      643,  643,  643,  643,  643,  645,  297,  643,  646,  647,
      897,  897,  270,  648,  443,  647,  647,  647,  647,  647,
      647,  649,  314,  647,  650,  470,  897,  897,   40,  471,
      472,  473,  470,  470,  470,  473,  473,  474,  470,  473,
      473,  281,  897,  897,   46,  282,  283,  284,  281,  281,
      281,  284,  284,  285,  281,  284,  284,   40,  476,  477,
      897,  897,  897,  897,  897,  897,  478,  479,  897,  897,
       40,  480,  481,  482,  479,  479,  479,  482,  482,  483,

      479,  482,  482,  651,  897,  897,   90,  652,  653,  654,
      651,  651,  651,  654,  654,  655,  651,  654,  654,   46,
      291,  292,  897,  897,  897,  897,  897,  897,  293,   40,
      476,  477,  897,  501,  897,  897,  897,  897,  478,  294,
      897,  897,   46,  295,  296,  297,  294,  294,  294,  297,
      297,  298,  294,  297,  297,  484,  897,  897,  191,  485,
      486,  392,  484,  487,  484,  392,  392,  488,  484,  392,
      392,  489,  897,  897,  199,  490,  491,  492,  489,  493,
      489,  492,  492,  494,  489,  492,  492,  516,  897,  897,
      191,  517,  518,  403,  516,  519,  516,  403,  403,  520,

      516,  403,  403,  496,  897,  897,  191,  497,  498,  408,
      496,  499,  496,  408,  408,  500,  496,  408,  408,  656,
      897,  897,  191,  657,  658,  659,  656,  660,  656,  659,
      659,  661,  656,  659,  659,  191,  663,  664,  897,  897,
      665,  897,  897,  897,  666,  667,  897,  897,  191,  668,
      669,  670,  667,  671,  667,  670,  670,  672,  667,  670,
      670,  673,  897,  897,  191,  674,  675,  676,  673,  677,
      673,  676,  676,  678,  673,  676,  676,  679,  897,  897,
      369,  680,  681,  584,  679,  682,  679,  584,  584,  683,
      679,  584,  584,  684,  897,  897,  199,  685,  686,  600,

      684,  687,  684,  600,  600,  688,  684,  600,  600,  690,
      897,  897,  191,  691,  692,  595,  690,  693,  690,  595,
      595,  694,  690,  595,  595,   90,  695,  696,  897,  897,
      897,  897,  897,  897,  697,  698,  897,  897,   90,  699,
      700,  701,  698,  698,  698,  701,  701,  702,  698,  701,
      701,  703,  897,  897,  199,  704,  705,  589,  703,  706,
      703,  589,  589,  707,  703,  589,  589,  178,  897,  897,
      100,  179,  180,  112,  178,  181,  178,  112,  112,  182,
      178,  112,  112,  300,  897,  897,  107,  301,  302,  233,
      300,  303,  300,  233,  233,  304,  300,  233,  233,  339,

      897,  897,  100,  340,  341,  239,  339,  342,  339,  239,
      239,  343,  339,  239,  239,  306,  897,  897,  100,  307,
      308,  244,  306,  309,  306,  244,  244,  310,  306,  244,
      244,  709,  897,  897,  199,  710,  711,  622,  709,  712,
      709,  622,  622,  713,  709,  622,  622,  714,  897,  897,
      228,  715,  716,  627,  714,  717,  714,  627,  627,  718,
      714,  627,  627,  532,  897,  897,  100,  533,  534,  424,
      532,  535,  532,  424,  424,  536,  532,  424,  424,  719,
      897,  897,  107,  720,  721,  616,  719,  722,  719,  616,
      616,  723,  719,  616,  616,  330,  897,  897,  191,  331,

      332,  223,  330,  333,  330,  223,  223,  330,  330,  223,
      223,  725,  897,  897,  199,  726,  727,  566,  725,  728,
      725,  566,  566,  725,  725,  566,  566,  729,  897,  897,
      228,  730,  731,  570,  729,  732,  729,  570,  570,  733,
      729,  570,  570,  363,  897,  897,  191,  364,  365,  366,
      363,  367,  363,  366,  366,  363,  363,  366,  366,  542,
      897,  897,  199,  543,  544,  387,  542,  545,  542,  387,
      387,  542,  542,  387,  387,  734,  897,  897,  369,  735,
      736,  576,  734,  737,  734,  576,  576,  734,  734,  576,
      576,  738,  897,  897,  199,  739,  740,  606,  738,  741,

      738,  606,  606,  742,  738,  606,  606,  743,  897,  897,
      228,  744,  745,  611,  743,  746,  743,  611,  611,  747,
      743,  611,  611,  191,  554,  897,  897,  897,  555,  191,
      554,  897,  897,  897,  555,  354,  897,  897,  191,  355,
      356,  357,  354,  358,  354,  357,  357,  354,  354,  357,
      357,  198,  897,  897,  199,  200,  201,  202,  198,  203,
      198,  202,  202,  198,  198,  202,  202,  191,  360,  361,
      897,  897,  362,  369,  748,  749,  897,  897,  750,  199,
      388,  389,  897,  897,  390,  191,  562,  563,  897,  575,
      564,  191,  562,  563,  897,  897,  564,  751,  897,  897,

      369,  752,  753,  754,  751,  755,  751,  754,  754,  751,
      751,  754,  754,  191,  224,  225,  897,  897,  226,  199,
      388,  389,  897,  897,  390,  191,  224,  225,  897,  391,
      226,  100,  212,  213,  897,  897,  214,  897,  897,  897,
      215,  107,  380,  381,  897,  897,  382,  100,  212,  213,
      897,  383,  214,  897,  897,  897,  215,  100,  240,  241,
      897,  897,  242,  897,  897,  897,  243,  369,  756,  757,
      897,  897,  758,  199,  580,  581,  897,  897,  582,  897,
      897,  897,  583,  659,  897,  897,  191,  663,  664,  659,
      759,  665,  659,  659,  659,  666,  659,  659,  659,  191,

      760,  761,  897,  897,  762,  897,  897,  897,  763,  191,
      764,  765,  897,  897,  766,  897,  897,  897,  767,  191,
      393,  394,  897,  897,  395,  897,  897,  897,  396,  199,
      580,  581,  897,  897,  582,  897,  897,  897,  583,  191,
      393,  394,  897,  402,  395,  897,  897,  897,  396,  191,
      404,  405,  897,  897,  406,  897,  897,  897,  407,  191,
      760,  761,  897,  897,  762,  897,  897,  897,  763,  199,
      590,  591,  897,  897,  592,  897,  897,  897,  593,  191,
      770,  771,  897,  897,  772,  897,  897,  897,  773,  369,
      775,  776,  897,  897,  777,  897,  897,  897,  778,  191,

      596,  597,  897,  897,  598,  897,  897,  897,  599,  199,
      780,  781,  897,  897,  782,  897,  897,  897,  783,  191,
      596,  597,  897,  784,  598,  897,  897,  897,  599,  191,
      764,  765,  897,  897,  766,  897,  897,  897,  767,  199,
      601,  602,  897,  897,  603,  897,  897,  897,  604,  191,
      770,  771,  897,  897,  772,  897,  897,  897,  773,  369,
      787,  788,  897,  897,  789,  897,  897,  897,  790,  191,
      404,  405,  897,  897,  406,  897,  897,  897,  407,  199,
      590,  591,  897,  897,  592,  897,  897,  897,  593,  100,
      240,  241,  897,  897,  242,  897,  897,  897,  243,  107,

      419,  420,  897,  897,  421,  897,  897,  897,  422,  100,
      425,  426,  897,  897,  427,  897,  897,  897,  428,  199,
      792,  793,  897,  897,  794,  897,  897,  897,  795,  228,
      797,  798,  897,  897,  799,  897,  897,  897,  800,  199,
      601,  602,  897,  897,  603,  897,  897,  897,  604,  100,
      245,  246,  897,  897,  247,  897,  897,  897,  248,  107,
      430,  431,  897,  897,  432,  897,  897,  897,  433,  100,
      245,  246,  897,  434,  247,  897,  897,  897,  248,  100,
      425,  426,  897,  897,  427,  897,  897,  897,  428,   90,
      801,  802,  897,  897,  897,  897,  897,  897,  803,  264,

      637,  189,  897,  897,  897,  897,  897,  897,  897,  186,
      897,  638,  270,  449,   95,  897,  897,  897,  897,  897,
      897,  897,   86,  897,  450,   40,  188,  189,  804,  897,
      897,  264,  805,  477,  804,  804,  804,  804,  804,  804,
      806,  473,  804,  807,  639,  897,  897,  270,  640,  292,
      639,  639,  639,  639,  639,  639,  641,  284,  639,  642,
      808,  897,  897,  264,  809,  503,  808,  808,  808,  808,
      808,  808,  810,  482,  808,  811,   40,  476,  477,  897,
      897,  897,  897,  897,  897,  478,  643,  897,  897,  270,
      644,  439,  643,  643,  643,  643,  643,  643,  645,  297,

      643,  646,   40,  502,  503,  897,  897,  897,  897,  897,
      897,  504,  462,  897,  897,  264,  463,  254,  462,  462,
      462,  462,  462,  462,  464,  155,  462,  465,   40,  253,
      254,  897,  897,  897,  897,  897,  897,  255,  656,  897,
      897,  191,  657,  658,  659,  656,  660,  656,  659,  659,
      661,  656,  659,  659,  489,  897,  897,  199,  490,  491,
      492,  489,  493,  489,  492,  492,  494,  489,  492,  492,
      673,  897,  897,  191,  674,  675,  676,  673,  677,  673,
      676,  676,  678,  673,  676,  676,  667,  897,  897,  191,
      668,  669,  670,  667,  671,  667,  670,  670,  672,  667,

      670,  670,  812,  897,  897,  369,  813,  814,  815,  812,
      816,  812,  815,  815,  817,  812,  815,  815,  199,  580,
      581,  897,  897,  582,  897,  897,  897,  583,  703,  897,
      897,  199,  704,  705,  589,  703,  706,  703,  589,  589,
      707,  703,  589,  589,  819,  897,  897,  191,  820,  821,
      769,  819,  822,  819,  769,  769,  823,  819,  769,  769,
      684,  897,  897,  199,  685,  686,  600,  684,  687,  684,
      600,  600,  688,  684,  600,  600,  484,  897,  897,  191,
      485,  486,  392,  484,  487,  484,  392,  392,  488,  484,
      392,  392,  516,  897,  897,  191,  517,  518,  403,  516,

      519,  516,  403,  403,  520,  516,  403,  403,  496,  897,
      897,  191,  497,  498,  408,  496,  499,  496,  408,  408,
      500,  496,  408,  408,  825,  897,  897,  369,  826,  827,
      786,  825,  828,  825,  786,  786,  829,  825,  786,  786,
      690,  897,  897,  191,  691,  692,  595,  690,  693,  690,
      595,  595,  694,  690,  595,  595,  830,  897,  897,  199,
      831,  832,  779,  830,  833,  830,  779,  779,  834,  830,
      779,  779,  836,  897,  897,  369,  837,  838,  774,  836,
      839,  836,  774,  774,  840,  836,  774,  774,  306,  897,
      897,  100,  307,  308,  244,  306,  309,  306,  244,  244,

      310,  306,  244,  244,  526,  897,  897,  107,  527,  528,
      429,  526,  529,  526,  429,  429,  530,  526,  429,  429,
      532,  897,  897,  100,  533,  534,  424,  532,  535,  532,
      424,  424,  536,  532,  424,  424,  841,  897,  897,  199,
      842,  843,  791,  841,  844,  841,  791,  791,  845,  841,
      791,  791,  846,  897,  897,  228,  847,  848,  796,  846,
      849,  846,  796,  796,  850,  846,  796,  796,  330,  897,
      897,  191,  331,  332,  223,  330,  333,  330,  223,  223,
      330,  330,  223,  223,  542,  897,  897,  199,  543,  544,
      387,  542,  545,  542,  387,  387,  542,  542,  387,  387,

      321,  897,  897,  100,  322,  323,  211,  321,  324,  321,
      211,  211,  325,  321,  211,  211,  537,  897,  897,  107,
      538,  539,  379,  537,  540,  537,  379,  379,  537,  537,
      379,  379,  339,  897,  897,  100,  340,  341,  239,  339,
      342,  339,  239,  239,  343,  339,  239,  239,  547,  897,
      897,  107,  548,  549,  418,  547,  550,  547,  418,  418,
      551,  547,  418,  418,  199,  374,  375,  897,  897,  376,
      191,  360,  361,  897,  561,  362,  191,  562,  563,  897,
      897,  564,  363,  897,  897,  191,  364,  365,  366,  363,
      367,  363,  366,  366,  363,  363,  366,  366,  191,  562,

      563,  897,  897,  564,  199,  388,  389,  897,  897,  390,
      369,  851,  852,  897,  897,  853,  897,  897,  897,  854,
      199,  590,  591,  897,  897,  592,  897,  897,  897,  593,
      191,  770,  771,  897,  897,  772,  897,  897,  897,  773,
      199,  601,  602,  897,  897,  603,  897,  897,  897,  604,
      191,  770,  771,  897,  897,  772,  897,  897,  897,  773,
      369,  856,  857,  897,  897,  858,  897,  897,  897,  859,
      199,  780,  781,  897,  897,  782,  897,  897,  897,  783,
      191,  404,  405,  897,  897,  406,  897,  897,  897,  407,
      199,  590,  591,  897,  897,  592,  897,  897,  897,  593,

      191,  404,  405,  897,  594,  406,  897,  897,  897,  407,
      191,  596,  597,  897,  897,  598,  897,  897,  897,  599,
      199,  780,  781,  897,  897,  782,  897,  897,  897,  783,
      369,  862,  863,  897,  897,  864,  897,  897,  897,  865,
      369,  867,  868,  897,  897,  869,  897,  897,  897,  870,
      191,  409,  410,  897,  897,  411,  897,  897,  897,  412,
      199,  601,  602,  897,  897,  603,  897,  897,  897,  604,
      191,  409,  410,  897,  605,  411,  897,  897,  897,  412,
      191,  596,  597,  897,  897,  598,  897,  897,  897,  599,
      100,  425,  426,  897,  897,  427,  897,  897,  897,  428,

      107,  617,  618,  897,  897,  619,  897,  897,  897,  620,
      100,  425,  426,  897,  621,  427,  897,  897,  897,  428,
      804,  897,  897,  264,  805,  477,  804,  804,  804,  804,
      804,  804,  806,  473,  804,  807,  639,  897,  897,  270,
      640,  292,  639,  639,  639,  639,  639,  639,  641,  284,
      639,  642,  808,  897,  897,  264,  809,  503,  808,  808,
      808,  808,  808,  808,  810,  482,  808,  811,   40,  476,
      477,  897,  897,  897,  897,  897,  897,  478,  643,  897,
      897,  270,  644,  439,  643,  643,  643,  643,  643,  643,
      645,  297,  643,  646,   40,  502,  503,  897,  897,  897,

      897,  897,  897,  504,  656,  897,  897,  191,  657,  658,
      659,  656,  660,  656,  659,  659,  661,  656,  659,  659,
      489,  897,  897,  199,  490,  491,  492,  489,  493,  489,
      492,  492,  494,  489,  492,  492,  191,  663,  664,  897,
      897,  665,  897,  897,  897,  666,  667,  897,  897,  191,
      668,  669,  670,  667,  671,  667,  670,  670,  672,  667,
      670,  670,  673,  897,  897,  191,  674,  675,  676,  673,
      677,  673,  676,  676,  678,  673,  676,  676,  871,  897,
      897,  369,  872,  873,  855,  871,  874,  871,  855,  855,
      875,  871,  855,  855,  819,  897,  897,  191,  820,  821,

      769,  819,  822,  819,  769,  769,  823,  819,  769,  769,
      830,  897,  897,  199,  831,  832,  779,  830,  833,  830,
      779,  779,  834,  830,  779,  779,  877,  897,  897,  369,
      878,  879,  866,  877,  880,  877,  866,  866,  881,  877,
      866,  866,  496,  897,  897,  191,  497,  498,  408,  496,
      499,  496,  408,  408,  500,  496,  408,  408,  684,  897,
      897,  199,  685,  686,  600,  684,  687,  684,  600,  600,
      688,  684,  600,  600,  690,  897,  897,  191,  691,  692,
      595,  690,  693,  690,  595,  595,  694,  690,  595,  595,
      882,  897,  897,  369,  883,  884,  861,  882,  885,  882,

      861,  861,  886,  882,  861,  861,  516,  897,  897,  191,
      517,  518,  403,  516,  519,  516,  403,  403,  520,  516,
      403,  403,  703,  897,  897,  199,  704,  705,  589,  703,
      706,  703,  589,  589,  707,  703,  589,  589,  532,  897,
      897,  100,  533,  534,  424,  532,  535,  532,  424,  424,
      536,  532,  424,  424,  719,  897,  897,  107,  720,  721,
      616,  719,  722,  719,  616,  616,  723,  719,  616,  616,
      199,  580,  581,  897,  897,  582,  897,  897,  897,  583,
      191,  663,  664,  897,  759,  665,  897,  897,  897,  666,
      369,  888,  889,  897,  897,  890,  897,  897,  897,  891,

      892,  897,  897,  369,  893,  894,  887,  892,  895,  892,
      887,  887,  896,  892,  887,  887,   18,  897,  897,   18,
       40,  897,   40,   40,   43,  897,   43,   43,   24,  897,
       24,   24,   55,  897,   55,   55,   36,  897,  897,   36,
       87,  897,   87,   87,   86,  897,   86,   86,   49,  897,
       49,   49,   99,  897,   99,   99,  100,  897,  100,  100,
      106,  897,  106,  106,  112,  897,  112,  112,   71,  897,
       71,   71,   77,  897,  897,   77,  125,  897,  125,  130,
      897,  130,  130,  141,  897,  141,  141,  186,  897,  186,
      186,  191,  897,  191,  191,  194,  897,  194,  194,   93,

      897,   93,   93,  211,  897,  211,  211,  216,  897,  216,
      216,  218,  897,  218,  218,  223,  897,  223,  223,  227,
      897,  227,  227,  233,  897,  233,  233,  239,  897,  239,
      239,  244,  897,  244,  244,  146,  897,  146,  146,  155,
      897,  155,  155,  160,  897,  160,  160,  165,  897,  165,
      165,  125,  897,  125,  130,  897,  130,  130,   18,  897,
      897,   18,  263,  897,  263,  263,  264,  897,  264,  264,
      269,  897,  269,  269,   36,  897,  897,   36,  284,  897,
      284,  284,  186,  897,  186,  186,   86,  897,   86,   86,
      191,  897,  191,  191,  194,  897,  194,  194,  348,  897,

      348,  348,  351,  897,  351,  351,  357,  897,  357,  357,
      202,  897,  202,  202,  223,  897,  223,  223,  347,  897,
      347,  347,  211,  897,  211,  211,  379,  897,  379,  379,
      239,  897,  239,  239,  216,  897,  216,  216,  372,  897,
      372,  372,  387,  897,  387,  387,   99,  897,   99,   99,
      100,  897,  100,  100,  106,  897,  106,  106,  392,  897,
      392,  392,  397,  897,  397,  397,  403,  897,  403,  403,
      408,  897,  408,  408,  413,  897,  413,  413,  418,  897,
      418,  418,  424,  897,  424,  424,  244,  897,  244,  244,
      429,  897,  429,  429,  284,  897,  284,  284,  141,  897,

      141,  141,  155,  897,  155,  155,  289,  897,  289,  289,
      297,  897,  297,  297,  233,  897,  233,  233,  314,  897,
      314,  314,  319,  897,  319,  319,  263,  897,  263,  263,
      264,  897,  264,  264,  448,  897,  448,  448,   43,  897,
       43,   43,  451,  897,  451,  451,   40,  897,   40,   40,
       77,  897,  897,   77,  473,  897,  473,  473,  482,  897,
      482,  482,  357,  897,  357,  357,  348,  897,  348,  348,
      553,  897,  553,  553,  351,  897,  351,  351,  202,  897,
      202,  202,  366,  897,  366,  366,  191,  897,  191,  191,
      194,  897,  194,  194,  223,  897,  223,  223,  566,  897,

      566,  566,  570,  897,  570,  570,  387,  897,  387,  387,
      576,  897,  576,  576,  392,  897,  392,  392,  492,  897,
      492,  492,  403,  897,  403,  403,  408,  897,  408,  408,
      584,  897,  584,  584,  589,  897,  589,  589,  595,  897,
      595,  595,  600,  897,  600,  600,  112,  897,  112,  112,
      233,  897,  233,  233,  239,  897,  239,  239,  244,  897,
      244,  244,  606,  897,  606,  606,  611,  897,  611,  611,
      424,  897,  424,  424,  616,  897,  616,  616,  622,  897,
      622,  622,  627,  897,  627,  627,  297,  897,  297,  297,
      482,  897,  482,  482,  509,  897,  509,  509,  155,  897,

      155,  155,  429,  897,  429,  429,  636,  897,  636,  636,
      448,  897,  448,  448,  186,  897,  186,  186,  451,  897,
      451,  451,   87,  897,   87,   87,  141,  897,  141,  141,
      473,  897,  473,  473,  284,  897,  284,  284,  659,  897,
      659,  659,  654,  897,  654,  654,  553,  897,  553,  553,
      357,  897,  357,  357,  559,  897,  559,  559,  387,  897,
      387,  387,  366,  897,  366,  366,  223,  897,  223,  223,
      211,  897,  211,  211,  379,  897,  379,  379,  239,  897,
      239,  239,  754,  897,  754,  754,  492,  897,  492,  492,
      670,  897,  670,  670,  676,  897,  676,  676,  392,  897,

      392,  392,  403,  897,  403,  403,  589,  897,  589,  589,
      769,  897,  769,  769,  774,  897,  774,  774,  595,  897,
      595,  595,  779,  897,  779,  779,  600,  897,  600,  600,
      786,  897,  786,  786,  418,  897,  418,  418,  424,  897,
      424,  424,  791,  897,  791,  791,  796,  897,  796,  796,
      244,  897,  244,  244,  429,  897,  429,  429,  701,  897,
      701,  701,  636,  897,  636,  636,  448,  897,  448,  448,
      186,  897,  186,  186,  473,  897,  473,  473,  482,  897,
      482,  482,  155,  897,  155,  155,  202,  897,  202,  202,
      357,  897,  357,  357,  366,  897,  366,  366,  387,  897,

      387,  387,  815,  897,  815,  815,  589,  897,  589,  589,
      769,  897,  769,  769,  600,  897,  600,  600,  855,  897,
      855,  855,  779,  897,  779,  779,  403,  897,  403,  403,
      595,  897,  595,  595,  861,  897,  861,  861,  866,  897,
      866,  866,  408,  897,  408,  408,  424,  897,  424,  424,
      616,  897,  616,  616,  473,  897,  473,  473,  482,  897,
      482,  482,  659,  897,  659,  659,  492,  897,  492,  492,
      887,  897,  887,  887,    3,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897

    } ;

static const flex_int16_t yy_chk[5992] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    4,   44,   44,  894,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    7,   87,   87,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    8,    8,
       12,    8,   88,   88,  889,   12,    8,    8,    9,    9,
       90,  107,  884,  105,   90,  107,    9,   13,  105,  453,
      453,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   20,  879,  873,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   22,

      868,  863,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   24,   24,   24,   25,   25,
       25,   27,   27,   27,  191,  199,  857,  848,  191,  199,
       27,   28,   28,  216,  843,  838,  217,  832,  216,   28,
       29,  217,  827,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   34,  821,  814,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   36,   36,  369,  802,  800,  799,  369,  793,
       36,   37,  790,  781,  777,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   38,  771,  765,

       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   41,  761,  757,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   43,
       43,   43,   50,  753,  745,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   51,   51,
       51,   53,   53,   53,   55,   55,   55,  740,  736,   55,
      731,  727,  721,   55,   57,   57,   57,  716,  711,   57,
       58,   58,   58,  705,   58,   58,  700,  692,  686,   58,
       59,   59,   59,  681,  675,   59,  669,  659,  658,   59,
       60,   60,   60,  654,  653,  634,  631,  625,  624,   60,

       62,   62,  620,  619,  616,  613,  610,  608,   62,   63,
      602,  599,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   65,   65,   65,  598,  591,
      579,  576,  573,  569,  558,   65,  549,   65,   66,  544,
      539,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   68,  534,  528,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       69,  523,  518,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   71,   71,   71,  513,
      508,  503,  498,  491,  486,   71,   72,  481,  472,   72,

       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   73,  447,  431,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   75,  428,
      427,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   77,   77,  420,  410,  405,  397,
      389,  386,   77,   79,  382,  378,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   80,
      375,  371,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   82,  365,  361,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,

       82,   83,  356,  346,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   86,   86,   86,
       89,  341,  336,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   91,  332,  328,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   93,   93,   93,  323,  319,   93,   94,   94,
       94,   95,   95,   95,  318,   95,   96,   96,   96,  101,
      101,  101,  314,  313,  101,  103,  103,  103,  308,  302,
      103,  296,  289,  288,  103,  104,  104,  104,  283,  268,
      104,  261,  258,  257,  104,  106,  106,  106,  255,  248,

      106,  108,  108,  108,  241,  231,  108,  110,  110,  110,
      228,  225,  110,  111,  111,  111,  218,  214,  111,  201,
      193,  185,  111,  113,  113,  113,  180,  175,  113,  170,
      164,  159,  113,  115,  115,  115,  154,  146,  115,  145,
      141,  140,  115,  116,  116,  116,  125,  122,  116,  114,
      109,  100,  116,  117,  117,  117,   99,   98,   92,   85,
       81,   76,  117,  118,  118,  118,   70,  118,   64,   61,
       56,   54,  118,  119,  119,  119,   52,   48,   46,   42,
       40,   35,  119,  120,  120,  120,   32,   26,   23,   21,
       17,   10,  120,  121,  121,  121,    3,    0,    0,    0,

        0,    0,  121,  124,    0,    0,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  126,
      126,  126,    0,    0,    0,    0,    0,    0,    0,  126,
        0,  126,  127,    0,    0,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  128,  128,
        0,    0,    0,    0,    0,    0,  128,  130,  130,  130,
        0,    0,    0,    0,    0,    0,    0,  130,    0,  130,
      131,  131,    0,    0,    0,    0,    0,    0,    0,  131,
        0,  131,  132,  132,  132,    0,    0,    0,    0,    0,
        0,    0,  132,    0,  132,  135,    0,    0,  135,  135,

      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  136,    0,    0,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  137,  137,    0,
        0,    0,    0,    0,    0,  137,  138,    0,    0,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  139,    0,    0,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  142,    0,
        0,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  148,    0,    0,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,

      149,  149,  149,    0,    0,    0,    0,    0,    0,  149,
      151,  151,  151,    0,    0,    0,    0,    0,    0,  151,
      153,    0,    0,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  157,    0,    0,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  158,    0,    0,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  161,    0,
        0,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  163,    0,    0,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,

      167,    0,    0,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  168,    0,    0,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  169,    0,    0,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  171,    0,
        0,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  173,    0,    0,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      174,    0,    0,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  176,    0,    0,  176,

      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  177,    0,    0,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  181,    0,
        0,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  183,    0,    0,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      184,    0,    0,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  186,  186,  186,  187,
        0,    0,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  188,  188,  188,  189,  189,

      189,    0,  189,  192,    0,    0,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  194,
      194,  194,    0,    0,  194,  196,  196,    0,    0,    0,
      196,  197,  197,    0,    0,    0,  197,  198,    0,    0,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  202,  202,  202,    0,    0,  202,  203,
        0,    0,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  204,    0,    0,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  205,  205,  205,    0,    0,  205,  206,  206,  206,

        0,  206,  206,  207,  207,  207,    0,    0,  207,  208,
      208,  208,  209,  209,  209,    0,    0,  209,  211,  211,
      211,    0,    0,  211,    0,    0,    0,  211,  212,  212,
      212,    0,    0,  212,  213,  213,  213,    0,  213,  213,
        0,    0,    0,  213,  215,  215,  215,    0,    0,  215,
        0,    0,    0,  215,  221,  221,  221,    0,    0,  221,
      222,  222,  222,    0,    0,  222,  224,  224,  224,    0,
        0,  224,  227,  227,  227,    0,    0,  227,    0,    0,
        0,  227,  229,  229,  229,    0,    0,  229,  230,  230,
      230,    0,  230,  230,    0,    0,    0,  230,  233,  233,

      233,    0,    0,  233,    0,    0,    0,  233,  234,  234,
      234,    0,    0,  234,    0,    0,    0,  234,  235,  235,
      235,    0,  235,  235,    0,    0,    0,  235,  236,  236,
      236,    0,    0,  236,    0,    0,    0,  236,  237,  237,
      237,    0,    0,  237,    0,    0,    0,  237,  238,  238,
      238,    0,    0,  238,    0,    0,    0,  238,  239,  239,
      239,    0,    0,  239,    0,    0,    0,  239,  240,  240,
      240,    0,    0,  240,    0,    0,    0,  240,  243,  243,
      243,    0,    0,  243,    0,    0,    0,  243,  244,  244,
      244,    0,    0,  244,    0,    0,    0,  244,  245,  245,

      245,    0,    0,  245,    0,    0,    0,  245,  246,  246,
      246,    0,  246,  246,    0,    0,    0,  246,  247,  247,
      247,    0,    0,  247,    0,    0,    0,  247,  249,  249,
      249,    0,    0,    0,    0,    0,    0,  249,  250,  250,
      250,    0,  250,    0,    0,    0,    0,  250,  251,  251,
      251,    0,    0,    0,    0,    0,    0,  251,  252,  252,
      252,    0,    0,    0,    0,    0,    0,  252,  253,  253,
      253,    0,    0,    0,    0,    0,    0,  253,  254,  254,
      254,    0,  254,    0,    0,    0,    0,  254,  256,  256,
      256,    0,    0,  256,    0,    0,    0,  256,  259,  259,

      259,    0,    0,    0,    0,    0,    0,  259,  262,  262,
      262,    0,    0,    0,    0,    0,    0,  262,  263,  263,
      263,    0,    0,    0,    0,    0,    0,    0,  263,    0,
      263,  264,  264,    0,    0,    0,    0,    0,    0,    0,
      264,    0,  264,  265,  265,  265,    0,    0,    0,    0,
        0,    0,    0,  265,    0,  265,  266,  266,  266,  267,
      267,  267,    0,    0,    0,    0,    0,    0,    0,  267,
        0,  267,  269,  269,  269,    0,    0,    0,    0,    0,
        0,    0,  269,    0,  269,  270,  270,    0,    0,    0,
        0,    0,    0,    0,  270,    0,  270,  271,  271,  271,

        0,    0,    0,    0,    0,    0,    0,  271,    0,  271,
      272,  272,  272,  273,    0,    0,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  274,
        0,    0,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  275,    0,    0,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  276,  276,  276,    0,    0,    0,    0,    0,    0,
      276,  277,    0,    0,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  278,    0,    0,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,

      278,  278,  278,  280,  280,    0,    0,    0,    0,    0,
        0,  280,  281,    0,    0,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  282,    0,
        0,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  284,  284,  284,    0,    0,    0,
        0,    0,    0,  284,  285,    0,    0,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      286,    0,    0,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  287,    0,    0,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,

      287,  287,  290,    0,    0,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  291,  291,
      291,    0,    0,    0,    0,    0,    0,  291,  292,  292,
      292,    0,  292,    0,    0,    0,    0,  292,  293,  293,
      293,    0,    0,    0,    0,    0,    0,  293,  295,    0,
        0,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  297,  297,  297,    0,    0,    0,
        0,    0,    0,  297,  299,    0,    0,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      301,    0,    0,  301,  301,  301,  301,  301,  301,  301,

      301,  301,  301,  301,  301,  301,  303,    0,    0,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  305,    0,    0,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  306,    0,
        0,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  307,    0,    0,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      309,    0,    0,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  311,    0,    0,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,

      311,  311,  321,    0,    0,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  322,    0,
        0,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  325,    0,    0,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      326,    0,    0,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  327,    0,    0,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  329,    0,    0,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  331,    0,

        0,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  334,    0,    0,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      335,    0,    0,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  338,    0,    0,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  340,    0,    0,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  344,    0,
        0,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  347,  347,  347,    0,    0,  347,

      348,  348,    0,    0,    0,  348,  349,  349,    0,    0,
        0,  349,  350,  350,    0,    0,    0,  350,  351,  351,
        0,    0,    0,  351,  352,  352,    0,    0,    0,  352,
      353,  353,    0,    0,    0,  353,  357,  357,  357,    0,
        0,  357,  358,    0,    0,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  359,    0,
        0,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  360,  360,  360,    0,    0,  360,
      362,  362,  362,    0,    0,  362,  366,  366,  366,    0,
        0,  366,  372,  372,  372,    0,    0,  372,  374,  374,

      374,    0,    0,  374,  379,  379,  379,    0,    0,  379,
      380,  380,  380,    0,    0,  380,  381,  381,  381,    0,
      381,  381,  383,  383,  383,    0,    0,  383,    0,    0,
        0,  383,  385,  385,  385,    0,  385,  385,  388,  388,
      388,    0,    0,  388,  391,  391,  391,    0,    0,  391,
      392,  392,  392,    0,    0,  392,    0,    0,    0,  392,
      393,  393,  393,    0,    0,  393,    0,    0,    0,  393,
      394,  394,  394,    0,  394,  394,    0,    0,    0,  394,
      395,  395,  395,    0,    0,  395,    0,    0,    0,  395,
      396,  396,  396,    0,    0,  396,    0,    0,    0,  396,

      398,  398,  398,    0,    0,  398,    0,    0,    0,  398,
      400,  400,  400,    0,    0,  400,    0,    0,    0,  400,
      401,  401,  401,    0,    0,  401,    0,    0,    0,  401,
      402,  402,  402,    0,    0,  402,    0,    0,    0,  402,
      404,  404,  404,    0,    0,  404,    0,    0,    0,  404,
      407,  407,  407,    0,    0,  407,    0,    0,    0,  407,
      409,  409,  409,    0,    0,  409,    0,    0,    0,  409,
      411,  411,  411,    0,    0,  411,    0,    0,    0,  411,
      413,  413,  413,    0,    0,  413,    0,    0,    0,  413,
      414,  414,  414,    0,    0,  414,    0,    0,    0,  414,

      415,  415,  415,    0,  415,  415,    0,    0,    0,  415,
      416,  416,  416,    0,    0,  416,    0,    0,    0,  416,
      417,  417,  417,    0,    0,  417,    0,    0,    0,  417,
      419,  419,  419,    0,    0,  419,    0,    0,    0,  419,
      423,  423,  423,    0,    0,  423,    0,    0,    0,  423,
      424,  424,  424,    0,    0,  424,    0,    0,    0,  424,
      425,  425,  425,    0,    0,  425,    0,    0,    0,  425,
      426,  426,  426,    0,  426,  426,    0,    0,    0,  426,
      430,  430,  430,    0,    0,  430,    0,    0,    0,  430,
      434,  434,  434,    0,    0,  434,    0,    0,    0,  434,

      438,  438,  438,    0,    0,    0,    0,    0,    0,  438,
      439,  439,  439,    0,  439,    0,    0,    0,    0,  439,
      440,  440,  440,    0,    0,    0,    0,    0,    0,  440,
      441,  441,  441,    0,    0,    0,    0,    0,    0,  441,
      442,  442,  442,    0,    0,    0,    0,    0,    0,  442,
      443,  443,  443,    0,  443,    0,    0,    0,    0,  443,
      444,  444,  444,    0,    0,    0,    0,    0,    0,  444,
      445,  445,  445,    0,    0,  445,    0,    0,    0,  445,
      446,  446,  446,    0,  446,  446,    0,    0,    0,  446,
      448,  448,  448,    0,    0,    0,    0,    0,    0,    0,

      448,    0,  448,  449,  449,  449,    0,    0,    0,    0,
        0,    0,    0,  449,    0,  449,  450,  450,  450,  451,
      451,  451,    0,    0,    0,    0,    0,    0,    0,  451,
        0,  451,  452,  452,  452,    0,    0,    0,    0,    0,
        0,    0,  452,    0,  452,  454,    0,    0,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  455,    0,    0,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  456,    0,    0,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  457,  457,  457,    0,    0,    0,    0,

        0,    0,  457,  461,  461,  461,    0,    0,    0,    0,
        0,    0,  461,  463,    0,    0,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  467,
        0,    0,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  470,    0,    0,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  471,    0,    0,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  473,  473,  473,
        0,    0,    0,    0,    0,    0,  473,  474,    0,    0,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,

      474,  474,  474,  475,    0,    0,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  476,
      476,  476,    0,    0,    0,    0,    0,    0,  476,  477,
      477,  477,    0,  477,    0,    0,    0,    0,  477,  480,
        0,    0,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  484,    0,    0,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  485,    0,    0,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  487,    0,    0,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,

      487,  487,  487,  488,    0,    0,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  489,
        0,    0,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  492,  492,  492,    0,    0,
      492,    0,    0,    0,  492,  493,    0,    0,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  494,    0,    0,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  495,    0,    0,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  497,    0,    0,  497,  497,  497,  497,

      497,  497,  497,  497,  497,  497,  497,  497,  497,  499,
        0,    0,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  501,  501,  501,    0,    0,
        0,    0,    0,    0,  501,  505,    0,    0,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  517,    0,    0,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  521,    0,    0,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  522,    0,    0,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  524,

        0,    0,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  525,    0,    0,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  527,    0,    0,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  531,    0,    0,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  532,    0,    0,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  533,
        0,    0,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  537,    0,    0,  537,  537,

      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  538,    0,    0,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  541,    0,    0,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  542,    0,    0,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  543,
        0,    0,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  546,    0,    0,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  548,    0,    0,  548,  548,  548,  548,  548,  548,

      548,  548,  548,  548,  548,  548,  548,  552,    0,    0,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  553,  553,    0,    0,    0,  553,  554,
      554,    0,    0,    0,  554,  556,    0,    0,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  557,    0,    0,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  559,  559,  559,
        0,    0,  559,  561,  561,  561,    0,    0,  561,  562,
      562,  562,    0,    0,  562,  563,  563,  563,    0,  563,
      563,  564,  564,  564,    0,    0,  564,  565,    0,    0,

      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  566,  566,  566,    0,    0,  566,  567,
      567,  567,    0,    0,  567,  568,  568,  568,    0,  568,
      568,  570,  570,  570,    0,    0,  570,    0,    0,    0,
      570,  571,  571,  571,    0,    0,  571,  572,  572,  572,
        0,  572,  572,    0,    0,    0,  572,  574,  574,  574,
        0,    0,  574,    0,    0,    0,  574,  575,  575,  575,
        0,    0,  575,  580,  580,  580,    0,    0,  580,    0,
        0,    0,  580,  581,    0,    0,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  582,

      582,  582,    0,    0,  582,    0,    0,    0,  582,  583,
      583,  583,    0,    0,  583,    0,    0,    0,  583,  584,
      584,  584,    0,    0,  584,    0,    0,    0,  584,  585,
      585,  585,    0,    0,  585,    0,    0,    0,  585,  586,
      586,  586,    0,  586,  586,    0,    0,    0,  586,  587,
      587,  587,    0,    0,  587,    0,    0,    0,  587,  589,
      589,  589,    0,    0,  589,    0,    0,    0,  589,  590,
      590,  590,    0,    0,  590,    0,    0,    0,  590,  593,
      593,  593,    0,    0,  593,    0,    0,    0,  593,  594,
      594,  594,    0,    0,  594,    0,    0,    0,  594,  595,

      595,  595,    0,    0,  595,    0,    0,    0,  595,  596,
      596,  596,    0,    0,  596,    0,    0,    0,  596,  597,
      597,  597,    0,  597,  597,    0,    0,    0,  597,  600,
      600,  600,    0,    0,  600,    0,    0,    0,  600,  601,
      601,  601,    0,    0,  601,    0,    0,    0,  601,  603,
      603,  603,    0,    0,  603,    0,    0,    0,  603,  605,
      605,  605,    0,    0,  605,    0,    0,    0,  605,  606,
      606,  606,    0,    0,  606,    0,    0,    0,  606,  607,
      607,  607,    0,    0,  607,    0,    0,    0,  607,  611,
      611,  611,    0,    0,  611,    0,    0,    0,  611,  612,

      612,  612,    0,    0,  612,    0,    0,    0,  612,  615,
      615,  615,    0,    0,  615,    0,    0,    0,  615,  617,
      617,  617,    0,    0,  617,    0,    0,    0,  617,  621,
      621,  621,    0,    0,  621,    0,    0,    0,  621,  623,
      623,  623,    0,    0,  623,    0,    0,    0,  623,  627,
      627,  627,    0,    0,  627,    0,    0,    0,  627,  628,
      628,  628,    0,    0,  628,    0,    0,    0,  628,  629,
      629,  629,    0,  629,  629,    0,    0,    0,  629,  630,
      630,  630,    0,    0,  630,    0,    0,    0,  630,  632,
      632,  632,    0,    0,    0,    0,    0,    0,  632,  636,

      636,  636,    0,    0,    0,    0,    0,    0,    0,  636,
        0,  636,  637,  637,  637,    0,    0,    0,    0,    0,
        0,    0,  637,    0,  637,  638,  638,  638,  639,    0,
        0,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  640,    0,    0,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      641,    0,    0,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  642,  642,  642,    0,
        0,    0,    0,    0,    0,  642,  644,    0,    0,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,

      644,  644,  646,  646,  646,    0,    0,    0,    0,    0,
        0,  646,  647,    0,    0,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  650,  650,
      650,    0,    0,    0,    0,    0,    0,  650,  651,    0,
        0,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  652,    0,    0,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      655,    0,    0,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  660,    0,    0,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,

      660,  660,  662,    0,    0,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  663,  663,
      663,    0,    0,  663,    0,    0,    0,  663,  668,    0,
        0,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  672,    0,    0,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      674,    0,    0,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  679,    0,    0,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  682,    0,    0,  682,  682,  682,  682,  682,

      682,  682,  682,  682,  682,  682,  682,  682,  683,    0,
        0,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  689,    0,    0,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      690,    0,    0,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  691,    0,    0,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  708,    0,    0,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  714,    0,
        0,  714,  714,  714,  714,  714,  714,  714,  714,  714,

      714,  714,  714,  714,  715,    0,    0,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      717,    0,    0,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  720,    0,    0,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  724,    0,    0,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  725,    0,
        0,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  726,    0,    0,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,

      729,    0,    0,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  730,    0,    0,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  733,    0,    0,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  744,    0,
        0,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  748,  748,  748,    0,    0,  748,
      749,  749,  749,    0,  749,  749,  750,  750,  750,    0,
        0,  750,  751,    0,    0,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  754,  754,

      754,    0,    0,  754,  756,  756,  756,    0,    0,  756,
      759,  759,  759,    0,    0,  759,    0,    0,    0,  759,
      760,  760,  760,    0,    0,  760,    0,    0,    0,  760,
      763,  763,  763,    0,    0,  763,    0,    0,    0,  763,
      764,  764,  764,    0,    0,  764,    0,    0,    0,  764,
      766,  766,  766,    0,    0,  766,    0,    0,    0,  766,
      768,  768,  768,    0,    0,  768,    0,    0,    0,  768,
      770,  770,  770,    0,    0,  770,    0,    0,    0,  770,
      774,  774,  774,    0,    0,  774,    0,    0,    0,  774,
      775,  775,  775,    0,    0,  775,    0,    0,    0,  775,

      776,  776,  776,    0,  776,  776,    0,    0,    0,  776,
      778,  778,  778,    0,    0,  778,    0,    0,    0,  778,
      780,  780,  780,    0,    0,  780,    0,    0,    0,  780,
      784,  784,  784,    0,    0,  784,    0,    0,    0,  784,
      785,  785,  785,    0,    0,  785,    0,    0,    0,  785,
      786,  786,  786,    0,    0,  786,    0,    0,    0,  786,
      787,  787,  787,    0,    0,  787,    0,    0,    0,  787,
      788,  788,  788,    0,  788,  788,    0,    0,    0,  788,
      789,  789,  789,    0,    0,  789,    0,    0,    0,  789,
      796,  796,  796,    0,    0,  796,    0,    0,    0,  796,

      797,  797,  797,    0,    0,  797,    0,    0,    0,  797,
      798,  798,  798,    0,  798,  798,    0,    0,    0,  798,
      804,    0,    0,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  805,    0,    0,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  806,    0,    0,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  807,  807,
      807,    0,    0,    0,    0,    0,    0,  807,  809,    0,
        0,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  811,  811,  811,    0,    0,    0,

        0,    0,    0,  811,  812,    0,    0,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      813,    0,    0,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  815,  815,  815,    0,
        0,  815,    0,    0,    0,  815,  816,    0,    0,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  817,    0,    0,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  818,    0,
        0,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  819,    0,    0,  819,  819,  819,

      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      820,    0,    0,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  824,    0,    0,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  825,    0,    0,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  826,    0,
        0,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  828,    0,    0,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      835,    0,    0,  835,  835,  835,  835,  835,  835,  835,

      835,  835,  835,  835,  835,  835,  836,    0,    0,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  837,    0,    0,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  846,    0,
        0,  846,  846,  846,  846,  846,  846,  846,  846,  846,
      846,  846,  846,  846,  847,    0,    0,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      851,  851,  851,    0,    0,  851,    0,    0,    0,  851,
      852,  852,  852,    0,  852,  852,    0,    0,    0,  852,
      860,  860,  860,    0,    0,  860,    0,    0,    0,  860,

      876,    0,    0,  876,  876,  876,  876,  876,  876,  876,
      876,  876,  876,  876,  876,  876,  898,    0,    0,  898,
      899,    0,  899,  899,  900,    0,  900,  900,  901,    0,
      901,  901,  902,    0,  902,  902,  903,    0,    0,  903,
      904,    0,  904,  904,  905,    0,  905,  905,  906,    0,
      906,  906,  907,    0,  907,  907,  908,    0,  908,  908,
      909,    0,  909,  909,  910,    0,  910,  910,  911,    0,
      911,  911,  912,    0,    0,  912,  913,    0,  913,  914,
        0,  914,  914,  915,    0,  915,  915,  916,    0,  916,
      916,  917,    0,  917,  917,  918,    0,  918,  918,  919,

        0,  919,  919,  920,    0,  920,  920,  921,    0,  921,
      921,  922,    0,  922,  922,  923,    0,  923,  923,  924,
        0,  924,  924,  925,    0,  925,  925,  926,    0,  926,
      926,  927,    0,  927,  927,  928,    0,  928,  928,  929,
        0,  929,  929,  930,    0,  930,  930,  931,    0,  931,
      931,  932,    0,  932,  933,    0,  933,  933,  934,    0,
        0,  934,  935,    0,  935,  935,  936,    0,  936,  936,
      937,    0,  937,  937,  938,    0,    0,  938,  939,    0,
      939,  939,  940,    0,  940,  940,  941,    0,  941,  941,
      942,    0,  942,  942,  943,    0,  943,  943,  944,    0,

      944,  944,  945,    0,  945,  945,  946,    0,  946,  946,
      947,    0,  947,  947,  948,    0,  948,  948,  949,    0,
      949,  949,  950,    0,  950,  950,  951,    0,  951,  951,
      952,    0,  952,  952,  953,    0,  953,  953,  954,    0,
      954,  954,  955,    0,  955,  955,  956,    0,  956,  956,
      957,    0,  957,  957,  958,    0,  958,  958,  959,    0,
      959,  959,  960,    0,  960,  960,  961,    0,  961,  961,
      962,    0,  962,  962,  963,    0,  963,  963,  964,    0,
      964,  964,  965,    0,  965,  965,  966,    0,  966,  966,
      967,    0,  967,  967,  968,    0,  968,  968,  969,    0,

      969,  969,  970,    0,  970,  970,  971,    0,  971,  971,
      972,    0,  972,  972,  973,    0,  973,  973,  974,    0,
      974,  974,  975,    0,  975,  975,  976,    0,  976,  976,
      977,    0,  977,  977,  978,    0,  978,  978,  979,    0,
      979,  979,  980,    0,  980,  980,  981,    0,  981,  981,
      982,    0,    0,  982,  983,    0,  983,  983,  984,    0,
      984,  984,  985,    0,  985,  985,  986,    0,  986,  986,
      987,    0,  987,  987,  988,    0,  988,  988,  989,    0,
      989,  989,  990,    0,  990,  990,  991,    0,  991,  991,
      992,    0,  992,  992,  993,    0,  993,  993,  994,    0,

      994,  994,  995,    0,  995,  995,  996,    0,  996,  996,
      997,    0,  997,  997,  998,    0,  998,  998,  999,    0,
      999,  999, 1000,    0, 1000, 1000, 1001,    0, 1001, 1001,
     1002,    0, 1002, 1002, 1003,    0, 1003, 1003, 1004,    0,
     1004, 1004, 1005,    0, 1005, 1005, 1006,    0, 1006, 1006,
     1007,    0, 1007, 1007, 1008,    0, 1008, 1008, 1009,    0,
     1009, 1009, 1010,    0, 1010, 1010, 1011,    0, 1011, 1011,
     1012,    0, 1012, 1012, 1013,    0, 1013, 1013, 1014,    0,
     1014, 1014, 1015,    0, 1015, 1015, 1016,    0, 1016, 1016,
     1017,    0, 1017, 1017, 1018,    0, 1018, 1018, 1019,    0,

     1019, 1019, 1020,    0, 1020, 1020, 1021,    0, 1021, 1021,
     1022,    0, 1022, 1022, 1023,    0, 1023, 1023, 1024,    0,
     1024, 1024, 1025,    0, 1025, 1025, 1026,    0, 1026, 1026,
     1027,    0, 1027, 1027, 1028,    0, 1028, 1028, 1029,    0,
     1029, 1029, 1030,    0, 1030, 1030, 1031,    0, 1031, 1031,
     1032,    0, 1032, 1032, 1033,    0, 1033, 1033, 1034,    0,
     1034, 1034, 1035,    0, 1035, 1035, 1036,    0, 1036, 1036,
     1037,    0, 1037, 1037, 1038,    0, 1038, 1038, 1039,    0,
     1039, 1039, 1040,    0, 1040, 1040, 1041,    0, 1041, 1041,
     1042,    0, 1042, 1042, 1043,    0, 1043, 1043, 1044,    0,

     1044, 1044, 1045,    0, 1045, 1045, 1046,    0, 1046, 1046,
     1047,    0, 1047, 1047, 1048,    0, 1048, 1048, 1049,    0,
     1049, 1049, 1050,    0, 1050, 1050, 1051,    0, 1051, 1051,
     1052,    0, 1052, 1052, 1053,    0, 1053, 1053, 1054,    0,
     1054, 1054, 1055,    0, 1055, 1055, 1056,    0, 1056, 1056,
     1057,    0, 1057, 1057, 1058,    0, 1058, 1058, 1059,    0,
     1059, 1059, 1060,    0, 1060, 1060, 1061,    0, 1061, 1061,
     1062,    0, 1062, 1062, 1063,    0, 1063, 1063, 1064,    0,
     1064, 1064, 1065,    0, 1065, 1065, 1066,    0, 1066, 1066,
     1067,    0, 1067, 1067, 1068,    0, 1068, 1068, 1069,    0,

     1069, 1069, 1070,    0, 1070, 1070, 1071,    0, 1071, 1071,
     1072,    0, 1072, 1072, 1073,    0, 1073, 1073, 1074,    0,
     1074, 1074, 1075,    0, 1075, 1075, 1076,    0, 1076, 1076,
     1077,    0, 1077, 1077, 1078,    0, 1078, 1078, 1079,    0,
     1079, 1079, 1080,    0, 1080, 1080, 1081,    0, 1081, 1081,
     1082,    0, 1082, 1082, 1083,    0, 1083, 1083, 1084,    0,
     1084, 1084, 1085,    0, 1085, 1085, 1086,    0, 1086, 1086,
     1087,    0, 1087, 1087,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897

    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[17] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
/*
 *
 * CS-252 
 * shell.l: lexical analyzer for shell
 * You have to extend it.
 *
 */
#line 11 "shell.l"

#include <cstring>
#include <stdlib.h>
#include "y.tab.hh"

#define MAX_INCLUDE_DEPTH 10
YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

static  void yyunput (int c,char *buf_ptr  );

char *getenv(const char *name);

void myunputc(int c) {
  unput(c);
}

void remove_character(char* s, char c) {
  int j, n = strlen(s);
  int escaped = 0; 

  for (int i = j = 0; i < n; i++) {
    if (s[i] != c || escaped) {
      s[j++] = s[i];
      escaped = 0;
    } else {
      escaped = 1;
    }
  }   

  s[j] = '\0';
}

/*void source(char *s) {
  FILE *yyin = fopen(s, "r");

  if (!yyin) {
    fprintf( stderr, "No File" );
  } else {
    yypush_buffer_state( yy_create_buffer( yyin, YY_BUF_SIZE ) );
    yyparse();
    fclose(yyin);
  }
}*/

void removeStartAndEnd(char* s) {
  int j, n = strlen(s);

  s[0] = '\0';
  for (int i = 1; i < n; i++) {
    s[i - 1] = s[i];
  }   
  s[n - 2] = '\0';
}

#line 2188 "lex.yy.cc"
#line 2189 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 70 "shell.l"


#line 2409 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 898 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5975 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 72 "shell.l"
{
  return NEWLINE;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 76 "shell.l"
{
  /* Discard spaces and tabs */
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 80 "shell.l"
{
  return GREAT;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 84 "shell.l"
{
  return GREATGREAT;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 88 "shell.l"
{
  return LESS;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 92 "shell.l"
{
  return PIPE;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 96 "shell.l"
{
  return AMPERSAND;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 100 "shell.l"
{
  return TWOGREAT;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 104 "shell.l"
{
  return GREATAMPERSAND;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 108 "shell.l"
{
  return GREATGREATAMPERSAND;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 112 "shell.l"
{ 
  remove_character(yytext, '$');
  remove_character(yytext, '(');
  remove_character(yytext, ')');

  int pin[2], pout[2];
  pipe(pin); pipe(pout);

  int ret = fork();
  if (ret == 0) {
      close(pin[1]);
      close(pout[0]);

      dup2(pin[0], 0);
      close(pin[0]);

      dup2(pout[1], 1);
      close(pout[1]);
      
      // Execute shell executable
      execvp("/proc/self/exe", NULL);
      perror("Error in Child Process");
      exit(1);
  } else if (ret < 0) {
      perror("Error Forking Child");
      exit(1);
  }

  close(pin[0]);
  close(pout[1]);

  write(pin[1], strcat(yytext, "\n"), strlen(yytext) + 1);
  write(pin[1], "exit\n", 6);
  close(pin[1]);
  
  int size = 1024;
  char* buffer = (char*) malloc(sizeof(char) * size);
  char* iterator = buffer;
  int n = read(pout[0], iterator++, 1);
  while (n > 0) {
    n = read(pout[0], iterator++, 1);
    if (strlen(buffer) == size) {
      size = size * 2;
      realloc(buffer, size);
    }
  }

  *iterator = '\0';
  close(pout[0]);

  for (int i = strlen(buffer) - 1; i >= 0; i--) {
    char c = ' ';
    if (buffer[i] == '\n') {
      myunputc(' ');
    } else {
      myunputc(buffer[i]);
    }
  }
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 172 "shell.l"
{ 
  remove_character(yytext, '\\');
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 178 "shell.l"
{
  remove_character(yytext, '$');
  remove_character(yytext, '{');
  remove_character(yytext, '}');

  int size = 1024;
  char* buffer = (char*) malloc(sizeof(char) * size);
  buffer = getenv(yytext);

  if(buffer) {
    for (int i = strlen(buffer) - 1; i >= 0; i--) {
      char c = ' ';
      if (buffer[i] == '\n') {
        myunputc(' ');
      } else {
        myunputc(buffer[i]);
      }
    }
  }
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 199 "shell.l"
{
  removeStartAndEnd(yytext);
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 205 "shell.l"
{
  /* Assume that file names have only alpha chars */
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 210 "shell.l"
ECHO;
	YY_BREAK
#line 2666 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 898 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 898 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 897);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 210 "shell.l"
