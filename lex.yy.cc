#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 16
#define YY_END_OF_BUFFER 17
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[991] =
    {   0,
        0,    0,   17,   15,    2,    1,   15,   16,    7,   15,
        5,    3,   12,   16,    6,   15,   15,    0,    0,   12,
       15,    0,   15,    0,    0,    0,    0,   12,    0,    8,
        9,    4,   12,   12,   12,   12,   12,   15,    0,   14,
        0,    0,   14,   15,    0,   14,    0,    0,   14,    0,
        0,    0,    0,    0,    0,   12,   12,   12,    0,    0,
        0,    0,   12,   10,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   14,   14,   14,   14,   14,
       14,   14,    0,    0,   14,    0,   14,    0,    0,    0,
        0,   11,   12,   11,    0,    0,    0,    0,   11,    0,

       12,   12,   12,   11,   12,   12,   12,   12,   12,    0,
        0,    0,    0,   12,   13,   13,    0,    0,    0,    0,
       13,    0,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   14,   14,   14,   14,   14,
       14,    0,    0,   14,    0,   11,   14,   11,   14,    0,
       14,   14,   11,    0,   11,   11,   11,   11,   11,   11,
       11,    0,   14,    0,   11,   11,   11,   11,   11,    0,
        0,    0,    0,   11,   12,   12,   12,   12,   11,   12,

       12,   11,   11,   11,   11,   11,   12,   12,   12,   11,
       12,   12,   12,   12,   12,   12,   12,    0,    0,   14,
        0,   13,   14,   13,    0,    0,   14,    0,   13,    0,
        0,    0,    0,    0,   12,   13,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   14,   14,   14,   14,   14,   11,   11,
       11,   11,   14,   14,   14,   11,   14,   11,   11,   11,
       11,    0,    0,   14,    0,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   12,   12,   12,   11,
       12,   12,   12,   12,   11,   12,   12,   11,   11,   11,
       11,   11,   12,   12,   12,   11,   12,   12,   12,   12,
       11,   12,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   12,   12,   12,   11,   12,   12,   12,
       12,   12,   12,   14,   14,   14,   13,   14,   14,   13,
        0,    0,   14,    0,   13,    0,    0,    0,    0,   11,
       12,   13,   11,   13,    0,    0,    0,    0,   11,   13,
        0,   12,   12,   12,   11,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   11,   12,   12,   12,   12,   12,   12,   11,
       11,   11,   14,   14,   14,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       12,   12,   12,   11,   12,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   12,   12,   12,   11,
       12,   12,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   12,   12,

       12,   11,   12,   12,   12,   12,   11,   12,   14,   14,
       14,   13,   14,    0,    0,   14,    0,   11,   13,   14,
       11,   13,   14,    0,   14,   14,   11,   13,    0,   11,
       11,   11,   11,   11,   11,   11,   11,   11,    0,   14,
        0,   11,   13,   11,   11,   11,   11,   11,    0,    0,
        0,    0,   11,   12,   13,   12,   12,   12,   11,   12,
       12,   12,   11,   11,   11,   11,   11,   11,   12,   12,
       12,   11,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   11,   12,   12,
       11,   11,   11,   11,   11,   12,   12,   12,   11,   12,
       12,   12,   12,   12,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   12,   12,   12,   12,   11,
       12,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   14,   14,   14,   13,   14,   14,   11,   13,   11,
       11,   11,   11,   14,   14,   14,   11,   13,   14,   11,
       11,   11,   11,   11,    0,    0,   14,    0,   11,   13,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   12,   12,   12,   11,   12,   12,   12,   12,
       12,   11,   12,   12,   12,   11,   11,   11,   11,   11,
       11,   12,   12,   12,   11,   12,   12,   12,   12,   12,
       11,   12,   12,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   12,   12,   12,   11,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   11,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   11,
       12,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   12,   12,   12,   11,   12,   11,   11,   11,

       11,   14,   14,   14,   11,   13,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   12,   12,   12,   11,   12,   12,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   12,   12,   12,   11,   12,   12,   12,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   12,   12,
       12,   11,   12,   12,   12,   12,   12,   11,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   11,   12,
       12,   12,   11,   11,   11,   11,   11,   11,   12,   12,

       12,   11,   12,   12,   12,   12,   12,   12,   12,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   12,
       12,   12,   12,   11,   12,   12,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   12,   12,
       12,   11,   12,   12,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,   12,   12,
       11,   12,   12,   11,   11,   11,   11,   11,   11,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    6,    1,    7,    1,    8,
        9,    1,    1,    1,    1,    1,    1,    1,    1,   10,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   11,
        1,   12,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   13,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   14,   15,   16,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[17] =
    {   0,
        1,    2,    2,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    4,    1,    1
    } ;

static const flex_int16_t yy_base[1208] =
    {   0,
        0,    0,  637,   16, 6450, 6450,   32,   44,   54,  624,
        0,   44,   67,    0,    0,    0,    0,  627,    0,    0,
       83,  629,   99,  115,  625,  128,  138,  151,  164,    0,
        0,  625,    0,  180,  619,    0,  196,    0,  620,  212,
        0,  616,   14,    0,  618,    0,    0,  614,  228,  238,
      244,  254,  612,  264,  270,  280,  293,  306,  319,  604,
      332,  611,  348,    0,  364,  380,  396,  606,  409,  422,
        0,  435,  605,    0,    0,  451,    0,  467,  601,   30,
       49,    0,  477,   56,  483,  489,    0,  600,  597,  495,
        0,  501,  511,   60,  597,   57,  521,    0,  527,  533,

        0,  543,  596,  553,  563,  576,  589,  602,    0,    0,
      585,  612,  592,    0,    0, 6450,  625,  637,  650,  663,
      676,  682,    0,  698,  588,  714,  726,    0,  739,  755,
      587,    0,    0,    0,    0,  585,    0,  768,  778,    0,
        0,  791,  584,    0,    0,    0,  804,  583,  814,    0,
      827,  580,    0,    0,  840,  853,  869,  885,  579,  898,
      908,  575,  112,  911,    0,  917,  923,  929,  935,  113,
      941,  947,  953,  959,  965,  975,  981,  574,  991,  122,
      123,  572,    0,    0,    0,    0, 1001,  571,    0, 1007,
      569, 1017, 1023,  567,    0, 1033, 1043, 1053, 1063, 1073,

     1083, 1093, 1103,  566,    0, 1113,    0, 1123,  565, 1133,
        0, 1143,    0, 1156,    0, 1169,    0, 1179, 1191, 1204,
     1217, 1230, 1233,  566,  562, 1245, 1258,    0, 1271, 1274,
     1290, 1298, 1314,  557, 1330,  556, 1346, 1362,  555, 1378,
     1391, 1404, 1420, 1436,  553,    0, 1448, 1461, 1477, 1493,
      552, 1506, 1519, 1532,  547, 1542,    0, 1552,    0, 1565,
      546,    0,    0, 1575, 1588,    0,  545,    0,    0,    0,
     1598,  543,    0, 1608, 1614, 1620, 1626, 1632, 1638, 1644,
     1650, 1656,  542, 1662,    0, 1668, 1674, 1680, 1686,  537,
        0, 1692,  125,    0, 1698, 1704, 1710, 1716,  536,    0,

     1722,    0, 1732,  535,    0, 1738,  533, 1744,    0, 1754,
        0,  532,    0,    0, 1764,    0, 1774,    0, 1784,  527,
        0, 1794,    0, 1804,  526, 1814,    0, 1824, 1834, 1844,
     1854,    0,    0, 1864,  521,    0,    0, 1874, 1884, 1894,
     1904,  520,  515,    0, 1914,  514,    0,    0, 1924, 1934,
     1944, 1954, 1964, 1974, 1987, 2000, 2013, 2016, 2029,   66,
     2045, 2057, 2073,  513,  511, 2089, 2097, 2113,  510, 2129,
     2145, 2158, 2168,  504,    0, 2180, 2196,  504, 2212,  503,
     2228,    0, 2244,  501, 2260, 2276,  500, 2292, 2308,  495,
     2324, 2337,    0,    0,  494,    0, 2347, 2360,    0, 2376,

      488,    0, 2389,    0,    0,  483,    0,  482,    0, 2402,
      477,    0,    0, 2418, 2434, 2450, 2466,  476, 2479, 2495,
     2505, 2515,    0, 2528,  471,    0,    0,    0,    0, 2538,
     2548, 2558, 2568, 2578, 2588, 2598, 2608, 2618,  470, 2628,
     2634,    0, 2640, 2646, 2652, 2658, 2664, 2670, 2676, 2682,
      466, 2688, 2698, 2704,  465, 2714,  463, 2724,    0,  462,
     2730, 2740, 2750, 2760,  461, 2770, 2780,  446,    0, 2790,
     2800, 2810, 2820, 2830,  445,  430, 2840, 2850,  429, 2860,
        0, 2870, 2880, 2890,  426,    0,  425, 2900, 2910,  424,
        0, 2920,  423, 2930,    0,  422,  421, 2940,  404,    0,

        0,  403,  400, 2950, 2960, 2970, 2980,  399, 2990, 3003,
     3016, 3029, 3032, 3048, 3060, 3076,  395, 3092, 3105, 3111,
     3124,  130, 3140, 3152,    0,  394, 3168, 3181, 3190, 3206,
     3222,  392,    0, 3238, 3251, 3261, 3274,  136,    0,    0,
      391,    0, 3287,    0, 3296,  390,    0, 3309, 3318, 3326,
     3342,  375,    0, 3358, 3371, 3384, 3400,  374, 3416, 3432,
     3445, 3458,    0, 3474,  359,    0, 3490, 3503, 3516, 3532,
      358,    0,    0,  343, 3548, 3564,  342, 3580, 3593,    0,
     3606,  339,    0, 3619,    0, 3632,  337,    0, 3645, 3658,
     3674,    0,  336,    0, 3687,    0,    0,  335,    0,  334,

     3697, 3707, 3717, 3727,  333, 3737,    0, 3747, 3757, 3767,
     3777, 3787,  332,    0, 3797,    0, 3807,  331, 3817,    0,
        0, 3827,  314,    0, 3837, 3843, 3849,  313, 3855,    0,
     3865,  310,    0,    0, 3875, 3885, 3895,  309, 3905,    0,
     3915,  305,    0,    0, 3925, 3935, 3945,    0, 3955, 3965,
      304,    0,    0,  302,    0,    0, 3975, 3985, 3995,  301,
      300, 4008, 4024,  297, 4037, 4043, 4056, 4069, 4082, 4088,
     4101, 4114, 4127,    0,    0,  296, 4136, 4149, 4158,    0,
     4174,  292,    0,  291, 4190, 4202,    0,  289, 4218, 4231,
        0, 4240,  288,    0, 4253, 4262,    0,    0,  287,    0,

      284, 4278, 4294, 4310,  283, 4326, 4342, 4355,    0,    0,
      282,    0,    0, 4365, 4378,    0, 4394,  280,    0, 4410,
      279,    0, 4426,  274,    0,    0,  273, 4442, 4458,  272,
     4474, 4490, 4503,    0, 4516,  269,    0,    0,  264, 4532,
     4548, 4564,  263,    0,    0,  258,    0, 4580,  257,    0,
        0,  256, 4596, 4612, 4628,  254, 4644, 4657, 4670,    0,
     4686,  253,    0, 4699, 4712,    0,  248, 4728, 4744, 4757,
     4770,    0,    0,  247,    0,  243, 4783, 4793,  242, 4803,
     4813, 4823, 4833,  240,    0, 4843, 4853, 4863, 4873, 4883,
      239,  238, 4893, 4903,  232, 4913,    0, 4923, 4936,    0,

     4949, 4958, 4974,  231, 4990, 5003, 5012, 5028, 5044,  227,
        0, 5057, 5066, 5082,  226,    0, 5098, 5111,    0,    0,
      224,    0, 5121, 5130,    0,  223, 5146,    0, 5159,    0,
     5172,  222,    0, 5188,    0, 5204, 5220, 5236,  207,    0,
        0,  206,    0,    0,  192,    0,    0,    0, 5252,    0,
        0,  191,    0,    0, 5265,    0, 5278,  190,    0, 5294,
     5307,    0, 5320,  175,    0,    0,  174, 5336,    0,    0,
      159,    0,    0, 5349, 5362, 5378,  158,    0,    0, 5391,
     5404,    0,  155,    0, 5417,    0,    0,  154,    0,    0,
     5427, 5440,    0,    0,  150,    0,    0,    0,    0,    0,

      149,    0,    0,    0,    0,    0,  147,    0,    0,    0,
     5453,  146,    0,    0,    0,    0,  145,    0, 5463, 5472,
        0,    0,  142,    0,    0,    0,    0,    0,  141,    0,
        0, 5485,    0,    0,  140,    0,    0,    0, 5498, 5514,
        0,    0,  139,    0,    0, 5527,    0,    0,  138,    0,
        0,  111,    0, 5540,   94,    0,    0, 5553,    0,    0,
       93,    0,    0,    0,    0,    0,   78,    0,    0,    0,
     5566,    0,    0,   77,    0,    0,   55,    0,    0,   47,
        0,    0,    0,    0,    0,   12,    0,    0,    0, 6450,
     5582, 5586, 5590, 5594, 5598, 5602, 5606, 5610, 5614, 5618,

     5621, 5625, 5629, 5633, 5637, 5641, 5645, 5649, 5653, 5657,
     5661, 5665, 5669, 5673, 5677, 5681, 5685, 5689, 5693, 5697,
     5701, 5705, 5709, 5713, 5717, 5721, 5725, 5729, 5733, 5737,
     5741, 5745, 5749, 5753, 5757, 5761, 5765, 5769, 5773, 5777,
     5781, 5785, 5789, 5793, 5797, 5801, 5805, 5809, 5813, 5817,
     5821, 5825, 5829, 5833, 5837, 5841, 5845, 5849, 5853, 5857,
     5861, 5865, 5869, 5873, 5877, 5881, 5885, 5889, 5893, 5897,
     5901, 5905, 5909, 5913, 5917, 5921, 5925, 5929, 5933, 5937,
     5941, 5945, 5949, 5953, 5957, 5961, 5965, 5969, 5973, 5977,
     5981, 5985, 5989, 5993, 5997, 6001, 6005, 6009, 6013, 6017,

     6021, 6025, 6029, 6033, 6037, 6041, 6045, 6049, 6053, 6057,
     6061, 6065, 6069, 6073, 6077, 6081, 6085, 6089, 6093, 6097,
     6101, 6105, 6109, 6113, 6117, 6121, 6125, 6129, 6133, 6137,
     6141, 6145, 6149, 6153, 6157, 6161, 6165, 6169, 6173, 6177,
     6181, 6185, 6189, 6193, 6197, 6201, 6205, 6209, 6213, 6217,
     6221, 6225, 6229, 6233, 6237, 6241, 6245, 6249, 6253, 6257,
     6261, 6265, 6269, 6273, 6277, 6281, 6285, 6289, 6293, 6297,
     6301, 6305, 6309, 6313, 6317, 6321, 6325, 6329, 6333, 6337,
     6341, 6345, 6349, 6353, 6357, 6361, 6365, 6369, 6373, 6377,
     6381, 6385, 6389, 6393, 6397, 6401, 6405, 6409, 6413, 6417,

     6421, 6425, 6429, 6433, 6437, 6441, 6445
    } ;

static const flex_int16_t yy_def[1208] =
    {   0,
      990,    1,  990,  990,  990,  990,  990,  991,  991,    4,
        9,    9,  990,    9,    9,    4,    7,    9,    9,   13,
      990,  992,  990,   21,   24,    7,  993,   13,  990,    9,
        9,    9,   13,  990,   28,   28,  990,   21,  992,  990,
       24,   24,  994,   21,  992,   40,   24,   24,   40,  995,
       23,  996,  997,  998,  996,  999,   34,   37,  990, 1000,
     1001,   59,  990,    9,  990,  990,   65,   67,  990, 1002,
       37,  990,   58,   58,   37,  990,   40,   76,   78,  994,
      994,   49, 1003, 1004, 1005, 1003,   49,   55,  997,  998,
       55, 1006,  999, 1007,   86, 1004, 1008,   86, 1009, 1010,

       93, 1011,   93, 1012, 1013,   66,   69,   72,   58,   59,
     1000, 1001,   59,   63,    9,  990, 1014, 1015, 1016, 1014,
     1017,  990,   63,  990,   63,  990, 1018,   65,  990,   65,
      130,   69,   65,  129,  130,  130,   69,  129, 1019,  107,
       69,  990,  107,  107,   69,   93, 1011,   93, 1013,   69,
      990,  107,  107,   69, 1020,  990,  990,  156,  158,  157,
     1021,   86, 1004, 1022,   86, 1009, 1023, 1024, 1025, 1004,
     1022, 1025, 1026, 1027, 1028, 1029, 1028,  177, 1030, 1031,
     1031,   86,  171,   86,  166,  166, 1032,  166,  166, 1033,
     1034, 1035, 1033,  177,   93, 1036, 1037, 1036, 1038, 1039,

     1040, 1030, 1041,  202,  202, 1042,  149, 1043,  149, 1042,
      149, 1044,  107,  142,  107,  151,  107, 1045, 1046, 1047,
     1045, 1048, 1049, 1050,  221, 1046, 1047,  221, 1048, 1051,
      990, 1052,  990,  231,  990,  193,  990,  990,  237,  990,
     1053,  990,  990,  990,  243,  243, 1054,  990,  990,  248,
      250,  990, 1044,  252,  198, 1055,  198, 1039,  252,  214,
      254,  254,  252, 1056,  107,  260,  107,  107,  265,  149,
     1043,  149,  149, 1057, 1058, 1057, 1059, 1059, 1060, 1061,
     1060, 1061,  276, 1058,  276, 1062, 1063, 1062, 1064,  288,
      288, 1065, 1066,  284, 1065, 1067, 1067, 1068,  297,  297,

     1069,  288, 1064,  288,  288, 1070,  198, 1055,  198, 1071,
      258,  198,  308,  198, 1071,  258, 1072,  315, 1073,  315,
      315, 1074,  258, 1075,  258, 1074,  258, 1076, 1077, 1076,
     1078,  149,  315, 1079,  315,  315,  326, 1080, 1081, 1082,
     1081,  341,  341,  258, 1083,  258,  326,  258, 1084, 1085,
     1086, 1085, 1087, 1088, 1089, 1088, 1090, 1091, 1091, 1092,
      990, 1093,  990,  361,  295,  990, 1094,  990,  366,  990,
      990, 1095, 1096, 1097,  361, 1093,  990,  361,  990,  295,
      990,  371,  990,  371,  990,  990,  330,  990,  990,  388,
      990, 1098,  388,  389,  388,  391, 1098,  990,  391,  990,

      391,  391, 1087,  371,  383,  371,  386,  330,  391,  990,
      391,  391,  403,  990,  990,  990,  415,  417,  990,  416,
     1099, 1086,  419,  352,  422,  422,  419,  352,  422, 1100,
     1101, 1100, 1102, 1103, 1104, 1105, 1106, 1105,  438, 1107,
     1107,  441, 1108, 1109, 1108, 1110, 1111, 1112, 1113, 1112,
      450, 1114, 1115, 1114,  454, 1116,  450, 1113,  450,  450,
     1117, 1101, 1117, 1118,  438, 1102, 1119,  466,  466, 1120,
     1121, 1122, 1123, 1122,  474,  474, 1103, 1106,  477, 1120,
      477, 1124, 1118, 1119,  483,  483,  474, 1116, 1125,  488,
      488, 1126,  474, 1127,  474,  474,  474, 1128,  438,  478,

      438,  474,  438, 1129, 1130, 1129, 1126,  506, 1131, 1132,
     1131, 1133, 1134,  990, 1135,  990,  514,  990, 1136, 1137,
     1138, 1139,  990, 1135,  516,  523,  990, 1140,  990,  990,
      990,  530,  530,  990, 1141, 1142, 1142, 1143,  514,  516,
      514,  518, 1136,  518,  990,  518,  518, 1144,  990, 1145,
      990,  549,  530,  990, 1146,  990,  990,  556,  990,  990,
     1147,  990,  534,  990,  534,  534,  990, 1148,  990,  990,
      569,  567,  569,  506,  990,  990,  575,  990, 1149,  556,
      990,  556,  560, 1147,  578,  990,  578,  578, 1150,  990,
      990,  586,  591,  591, 1151,  569,  570,  569,  569,  506,

     1152, 1153, 1152, 1154,  603, 1153,  603, 1155, 1154, 1156,
     1155, 1157,  611,  611, 1158,  609, 1159,  609, 1158,  609,
      609, 1159,  609,  609, 1160, 1161, 1160,  627, 1162,  619,
     1163,  619,  619,  619, 1164, 1157, 1164,  637, 1165,  619,
     1163,  619,  619,  619, 1166, 1167, 1168,  622, 1168, 1165,
      649,  650,  641,  650,  650,  650, 1169, 1170, 1169,  659,
      659,  990,  990,  662, 1171, 1172, 1172, 1173, 1174, 1175,
     1173, 1175, 1176,  662,  663,  662,  990, 1171,  990,  677,
      990,  677,  677,  627,  990, 1177,  663,  685,  990, 1178,
      689,  990,  689,  689, 1179,  990,  677,  681,  677,  677,

      627,  990,  990,  990,  703,  990,  990, 1180,  703,  704,
      703,  706,  707, 1180,  990,  706,  990,  706,  706,  990,
      637,  707,  990,  707,  720,  707,  649,  990,  990,  728,
      990,  990, 1181,  706,  990,  706,  706,  720,  637,  990,
      990,  990,  741,  741,  741,  659,  707,  990,  707,  720,
      707,  649,  990,  990,  990,  754,  990, 1182,  990,  757,
      990,  757,  757, 1183,  990,  704,  765,  990,  990, 1184,
      990,  707,  723,  707,  707,  649, 1184, 1185,  777, 1186,
     1187, 1186, 1188,  782,  782, 1189, 1190, 1191, 1192, 1191,
      790,  790, 1187, 1193,  793, 1189,  793, 1194, 1194,  799,

     1195,  990,  990,  802,  990, 1196,  990,  990,  990,  808,
      808, 1197,  990,  990,  813,  813,  990, 1198,  808,  809,
      808,  808, 1197,  990,  704,  824,  990,  707, 1199,  768,
      990,  768,  768,  990,  782,  990,  990,  990,  837,  837,
      837,  790,  769,  723,  769,  834,  769,  793,  990,  827,
      831,  827,  827,  837, 1200,  817,  990,  817,  817,  990,
     1201,  837,  990,  837,  837,  837,  790,  990,  707,  723,
      707,  837,  707, 1202,  990,  990,  875,  860,  875, 1203,
      990,  704,  881,  769, 1204,  881,  704,  881,  768,  769,
     1204,  990,  768,  831,  768,  768,  834,  782,  769,  723,

      769,  834,  769,  793,  769,  723,  769,  769,  793,  796,
     1205,  796,  796,  796,  805,  809,  805,  805, 1206,  990,
      834,  838,  834,  834,  834,  796,  827,  831,  827,  827,
      837, 1200,  834,  838,  834,  834,  834,  796,  990,  990,
      707,  723,  707,  837,  707, 1202,  837,  838,  837,  837,
      837,  790,  860,  990,  860,  860,  860, 1207,  881,  704,
      881,  768,  769,  891,  768,  831,  768,  768,  834,  782,
      990,  837,  838,  837,  837,  837,  790,  769,  723,  769,
      834,  769,  793,  834,  838,  834,  834,  834,  796,    0,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,

      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,

      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,

      990,  990,  990,  990,  990,  990,  990
    } ;

static const flex_int16_t yy_nxt[6467] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,    4,    4,   10,
       11,   12,   13,   14,   15,   14,   16,   39,   81,  971,
       17,   18,   19,   16,   16,   16,   19,   19,   20,   19,
       19,   19,   21,   39,   81,   22,   23,   24,   25,   21,
       21,   21,   25,   25,   21,   25,   25,   25,   26,   18,
       31,   27,   39,   81,  940,   32,   28,   29,   26,   18,
      167,  167,  472,   89,  168,  168,   28,   33,  181,   39,
       81,   34,   35,   36,   33,   33,   33,   36,   36,   37,
       36,   36,   36,   38,  939,  920,   39,   40,   41,   42,
       38,   38,   38,   42,   42,   38,   42,   42,   42,   44,

      892,  868,   45,   46,   47,   48,   44,   44,   44,   48,
       48,   44,   48,   48,   48,   42,  167,  167,  472,   49,
      168,  168,   50,   42,   42,   89,   89,   42,   25,  167,
      181,  181,   51,  168,  167,   25,   25,   25,  168,   89,
       25,   53,   54,   55,  181,  939,  849,  971,  836,  971,
       56,   36,  807,  787,  940,   57,  940,  920,   36,   36,
       36,  892,  892,   58,   59,  753,  849,   60,   61,   62,
       59,   59,   59,   59,   59,   59,   63,   19,   59,   19,
       65,  472,  939,   22,   66,   67,   68,   65,   65,   65,
       68,   68,   69,   68,   68,   68,   71,  740,  836,  940,

       72,   73,   74,   71,   71,   71,   74,   74,   75,   74,
       74,   74,   76,  472,  939,   45,   77,   78,   79,   76,
       76,   76,   79,   79,   76,   79,   79,   79,   79,  920,
      715,  702,   82,  696,  702,   79,   79,   79,  679,  646,
       79,   84,   85,   86,   48,  472,  472,  629,   87,  610,
      323,   48,   48,   48,  849,  892,   48,   89,   90,   91,
      771,  759,   92,  323,  849,  339,   93,   96,   97,   98,
      868,  318,   99,   89,   90,   91,  836,  100,   92,  562,
      323,  849,   93,   89,  102,  103,  318,  836,  104,  715,
      715,  288,  105,   68,  807,  702,  529,  106,  288,  807,

       68,   68,   68,  679,  679,  107,   74,  339,  339,  645,
      108,  323,  787,   74,   74,   74,  318,  787,  109,  110,
      288,  646,  111,  112,  113,  110,  110,  110,  110,  110,
      110,  114,   19,  110,  115,  118,  119,  120,  646,  629,
      605,  207,  753,  590,  771,   25,  715,  121,  123,  759,
      207,  111,  124,  125,  123,  123,  123,  123,  123,  123,
      126,   36,  123,  127,  128,  753,  740,   39,  129,  130,
      131,  128,  128,  128,  131,  131,  132,  131,  131,  131,
      133,  715,  381,   45,  134,  135,  136,  133,  133,  133,
      136,  136,  137,  136,  136,  136,  131,  702,  529,  696,

      138,  679,  529,  139,  131,  131,  207,  323,  140,  141,
      472,  323,   39,  142,  143,  144,  141,  141,  141,  144,
      144,  145,  144,  144,  144,   53,  147,  148,  472,  472,
      472,  338,  472,  471,  149,  150,  646,  472,   22,  151,
      152,  153,  150,  150,  150,  153,  153,  154,  153,  153,
      153,  156,  472,  629,   39,  157,  158,  159,  156,  156,
      156,  159,  159,  156,  159,  159,  159,  159,  323,  186,
      186,  160,  175,  186,  161,  159,  159,  323,  435,  159,
      163,  164,  165,  418,  590,  166,  170,  171,  172,  101,
      562,  173,  163,  164,  165,  590,  174,  166,   96,   97,

       98,  398,  398,   99,   89,  176,  177,  101,  562,  178,
      162,  529,   94,  179,   89,  102,  103,  381,  162,  104,
      529,  482,  339,  105,  170,  183,  184,  339,  471,  185,
      163,  187,  188,  482,  471,  189,  191,  192,  193,  307,
      307,  194,  447,  306,  447,  195,   96,  197,  198,  283,
      349,  199,  264,  435,  307,  200,   89,  203,  204,  418,
      414,  205,  398,   88,  381,  206,   89,  208,  209,  218,
       43,  210,  349,  338,  175,  211,  136,   94,  306,  162,
      212,  175,  162,  136,  136,  136,  159,  264,  213,  144,
      201,  264,  131,  214,  131,  242,  144,  144,  144,  122,

      116,  215,  153,  201,  162,   94,  216,   88,  159,  153,
      153,  153,  155,  131,  217,  118,  119,  120,  122,  116,
       94,   42,   43,   42,   43,   25,   70,  121,  219,  220,
      221,   64,   42,   43,   27,   30,  990,  990,   42,  990,
      222,  223,  990,  990,  990,  990,  990,  990,  990,  990,
       39,  990,  224,  226,  227,  228,  990,  990,  990,  990,
      990,  990,  990,   48,  990,  229,  219,  220,  221,  990,
      230,  990,  990,  990,  990,  990,   42,  990,  222,   39,
       49,   41,  231,  990,  990,  232,  233,  234,  231,  231,
      231,  231,  231,  231,  235,   52,  231,  236,  237,  990,

      990,  118,  238,  239,  237,  237,  237,  237,  237,  237,
      240,   68,  237,  241,  243,  990,  990,  111,  244,  245,
      243,  243,  243,  243,  243,  243,  246,   74,  243,  247,
       57,   35,  990,  990,  990,  990,  990,  990,   58,  248,
      990,  990,   45,  249,  250,  251,  248,  248,  248,  251,
      251,  252,  251,  251,  251,  131,  990,  990,  990,  138,
      990,  990,  139,  131,  131,  990,  990,  140,  251,  990,
      990,  990,  253,  990,  990,  251,  251,  251,  990,  990,
      254,   84,  256,  257,  990,  990,  990,  990,  990,  990,
      258,  259,  990,  990,   45,  260,  261,  262,  259,  259,

      259,  262,  262,  263,  262,  262,  262,   96,  197,  198,
      990,  990,  199,  990,  990,  990,  200,   89,  208,  209,
      990,  990,  210,  990,  990,  990,  211,  265,  990,  990,
       45,  266,  267,  268,  265,  265,  265,  268,  268,  269,
      268,  268,  268,   53,  271,  272,  990,  990,  990,  990,
      990,  990,  273,  156,  990,  990,   39,  157,  158,  159,
      156,  156,  156,  159,  159,  156,  159,  159,  159,   76,
      990,  990,   45,   77,   78,   79,   76,   76,   76,   79,
       79,   76,   79,   79,   79,  159,  990,  990,  990,  160,
      990,  990,  161,  159,  159,  990,  990,  159,   79,  990,

      990,  990,   82,  990,  990,   79,   79,   79,  990,  990,
       79,   84,  275,  276,  170,  171,  172,  990,  990,  173,
      163,  187,  188,  990,  990,  189,  163,  278,  990,  990,
      990,  279,  163,  281,  990,  990,  990,  282,  163,  284,
      285,  990,  990,  286,  170,  171,  172,  990,  990,  173,
      163,  284,  285,  990,  287,  286,  163,  289,  290,  990,
      990,  291,  293,  294,  295,  990,  990,  296,   89,  176,
      177,  990,  990,  178,  990,  990,  990,  179,   96,  298,
      299,  990,  990,  300,   89,  176,  177,  990,  301,  178,
      990,  990,  990,  179,   89,  203,  204,  990,  990,  205,

      990,  990,  990,  206,  170,  303,  304,  990,  990,  305,
       89,   90,   91,  990,  990,   92,  990,  990,  990,   93,
       96,   97,   98,  990,  990,   99,   89,   90,   91,  990,
      100,   92,  990,  990,  990,   93,  163,  308,  309,  990,
      990,  310,  990,  990,  990,  311,  170,  313,  314,  990,
      990,  315,  990,  990,  990,  316,  163,  308,  309,  990,
      317,  310,  990,  990,  990,  311,  163,  319,  320,  990,
      990,  321,  990,  990,  990,  322,  163,  324,  325,  990,
      990,  326,  990,  990,  990,  327,  191,  329,  330,  990,
      990,  331,  990,  990,  990,  332,   89,  203,  204,  990,

      990,  205,  990,  990,  990,  206,   96,  334,  335,  990,
      990,  336,  990,  990,  990,  337,   89,  340,  341,  990,
      990,  342,  990,  990,  990,  343,   96,  345,  346,  990,
      990,  347,  990,  990,  990,  348,   89,  340,  341,  990,
      990,  342,  990,  990,  990,  343,   45,  253,  250,  990,
      990,  990,  990,  990,  990,  254,  262,  990,  990,  990,
      350,  990,  990,  262,  262,  262,  990,  990,  351,  268,
      990,  990,  990,  352,  990,  990,  268,  268,  268,  990,
      990,  353,  219,  220,  221,  990,  990,  990,  990,  990,
      990,  990,   42,  990,  222,  223,  990,  990,  990,  990,

      990,  990,  990,  990,   39,  990,  224,  226,  355,  356,
      990,  990,  990,  990,  990,  990,  990,   79,  990,  357,
      219,  220,  221,  990,  230,  990,  990,  990,  990,  990,
       42,  990,  222,   39,   49,   41,  219,  359,  990,  990,
      990,  990,  990,  990,  990,  990,   80,  990,  360,  223,
      990,  990,  990,  990,  990,  990,  990,  990,   39,  990,
      224,  226,  355,  356,  990,  990,  990,  990,  990,  990,
      990,   79,  990,  357,   39,   49,   41,  362,  363,  364,
      990,  990,  990,  990,  990,  990,  990,   83,  990,  365,
      366,  990,  990,  367,  368,  369,  366,  366,  370,  366,

      366,  366,  371,   88,  366,  372,  373,  990,  990,  990,
      990,   89,  990,  374,  375,  990,  990,  376,  377,  378,
      375,  375,  379,  375,  375,  375,  375,   95,  375,  380,
      382,  990,  990,  367,  383,  384,  382,  382,  385,  382,
      382,  382,  386,  101,  382,  387,  388,  990,  990,  219,
      389,  390,  388,  388,  388,  388,  388,  388,  391,  131,
      388,  392,  393,  990,  990,  226,  394,  395,  393,  393,
      393,  393,  393,  393,  396,  136,  393,  397,  399,  990,
      990,  219,  400,  401,  399,  399,  399,  399,  399,  399,
      402,  144,  399,  403,   39,  138,  130,  990,  990,  990,

      990,  990,  990,  140,  404,  990,  990,  232,  405,  406,
      404,  404,  404,  404,  404,  404,  407,  146,  404,  408,
      243,  990,  990,  111,  244,  245,  243,  243,  243,  243,
      243,  243,  246,   74,  243,  247,  409,  990,  990,  118,
      410,  411,  409,  409,  409,  409,  409,  409,  412,  153,
      409,  413,  108,   73,  990,  990,  990,  990,  990,  990,
      109,  415,  990,  990,   39,  416,  417,  418,  415,  415,
      415,  418,  418,  419,  418,  418,  418,  248,  990,  990,
       45,  249,  250,  251,  248,  248,  248,  251,  251,  252,
      251,  251,  251,  418,  990,  990,  990,  420,  990,  990,

      421,  418,  418,  990,  990,  422,  423,  990,  990,   39,
      424,  425,  426,  423,  423,  423,  426,  426,  427,  426,
      426,  426,   45,  253,  250,  990,  990,  990,  990,  990,
      990,  254,  426,  990,  990,  990,  428,  990,  990,  426,
      426,  426,  990,  990,  429,  170,  431,  432,  990,  990,
      433,  990,  990,  990,  434,  163,  324,  325,  990,  990,
      326,  990,  990,  990,  327,  259,  990,  990,  990,  260,
      990,  990,  259,  259,  259,  990,  990,  263,   84,  437,
      438,  990,  990,  990,  990,  990,  990,  439,  141,  990,
      990,  990,  142,  990,  990,  141,  141,  141,  990,  990,

      145,   96,  345,  346,  990,  990,  347,  990,  990,  990,
      348,  163,  284,  285,  990,  990,  286,  170,  171,  172,
      990,  990,  173,  163,  284,  285,  990,  287,  286,  163,
      278,  990,  990,  990,  279,  163,  278,  990,  990,  990,
      279,  163,  441,  990,  990,  990,  442,  163,  281,  990,
      990,  990,  282,  163,  441,  990,  990,  990,  442,  163,
      281,  990,  990,  990,  282,  170,  171,  172,  990,  990,
      173,  163,  289,  290,  990,  990,  291,  293,  444,  445,
      990,  990,  446,  163,  289,  290,  990,  990,  291,  170,
      303,  304,  990,  990,  305,  163,  164,  165,  990,  990,

      166,  163,  164,  165,  990,  174,  166,  163,  187,  188,
      990,  990,  189,  163,  187,  188,  990,  990,  189,  170,
      449,  450,  990,  990,  451,  191,  453,  454,  990,  990,
      455,  990,  990,  990,  456,  170,  303,  304,  990,  990,
      305,  293,  458,  459,  990,  990,  460,  170,  431,  432,
      990,  990,  433,  990,  990,  990,  434,  163,  319,  320,
      990,  990,  321,  990,  990,  990,  322,  163,  319,  320,
      990,  990,  321,  990,  990,  990,  322,  293,  462,  463,
      990,  990,  464,  990,  990,  990,  465,  170,  467,  468,
      990,  990,  469,  990,  990,  990,  470,  163,  473,  474,

      990,  990,  475,  990,  990,  990,  476,  170,  478,  479,
      990,  990,  480,  990,  990,  990,  481,  163,  473,  474,
      990,  990,  475,  990,  990,  990,  476,   89,  102,  103,
      990,  990,  104,  990,  990,  990,  105,   96,  197,  198,
      990,  990,  199,  990,  990,  990,  200,   89,  102,  103,
      990,  201,  104,  990,  990,  990,  105,   89,  203,  204,
      990,  990,  205,  990,  990,  990,  206,  170,  484,  485,
      990,  990,  486,  990,  990,  990,  487,  191,  489,  490,
      990,  990,  491,  990,  990,  990,  492,   89,  340,  341,
      990,  990,  342,  990,  990,  990,  343,   96,  494,  495,

      990,  990,  496,  990,  990,  990,  497,   89,  340,  341,
      990,  498,  342,  990,  990,  990,  343,  170,  500,  501,
      990,  990,  502,  990,  990,  990,  503,  191,  505,  506,
      990,  990,  507,  990,  990,  990,  508,   45,  350,  261,
      990,  990,  990,  990,  990,  990,  351,   39,  428,  425,
      990,  990,  990,  990,  990,  990,  429,   45,  350,  261,
      990,  990,  990,  990,  990,  990,  351,   39,  214,  143,
      990,  990,  990,  990,  990,  990,  215,  219,  510,  511,
      990,  990,  990,  990,  990,  990,  990,  159,  990,  512,
      226,  355,  356,  990,  990,  990,  990,  990,  990,  990,

       79,  990,  357,  219,  510,  511,  990,  513,  990,  990,
      990,  990,  990,  159,  990,  512,   39,  160,  158,  219,
      359,  990,  990,  990,  990,  990,  990,  990,  990,   80,
      990,  360,  219,  359,  990,  990,  990,  990,  990,  990,
      990,  990,   80,  990,  360,  514,  990,  990,  515,  516,
      517,  514,  514,  518,  514,  514,  514,  514,  162,  514,
      519,  520,  990,  990,  990,  521,  990,  990,  990,  990,
      163,  990,  522,  523,  990,  990,  524,  525,  526,  523,
      523,  527,  523,  523,  523,  523,  169,  523,  528,  366,
      990,  990,  367,  368,  369,  366,  366,  370,  366,  366,

      366,  371,   88,  366,  372,  373,  990,  990,  990,  990,
       89,  990,  374,  375,  990,  990,  376,  377,  378,  375,
      375,  379,  375,  375,  375,  375,   95,  375,  380,  530,
      990,  990,  367,  531,  532,  530,  530,  533,  530,  530,
      530,  534,  175,  530,  535,  382,  990,  990,  367,  383,
      384,  382,  382,  385,  382,  382,  382,  386,  101,  382,
      387,   89,   90,   91,  990,  990,   92,  990,  990,  990,
       93,  367,  990,  990,  990,  990,  537,  990,  990,  990,
      990,  180,  990,  538,  520,  990,  990,  990,  521,  990,
      990,  990,  990,  163,  990,  522,  539,  990,  990,  524,

      540,  541,  539,  539,  542,  539,  539,  539,  539,  182,
      539,  543,  544,  990,  990,  515,  545,  546,  544,  544,
      547,  544,  544,  544,  544,  186,  544,  548,  549,  990,
      990,  550,  551,  552,  549,  549,  553,  549,  549,  549,
      554,  190,  549,  555,  556,  990,  990,  376,  557,  558,
      556,  556,  559,  556,  556,  556,  560,  196,  556,  561,
      563,  990,  990,  367,  564,  565,  563,  563,  566,  563,
      563,  563,  567,  202,  563,  568,  569,  990,  990,  367,
      570,  571,  569,  569,  572,  569,  569,  569,  573,  207,
      569,  574,  388,  990,  990,  219,  389,  390,  388,  388,

      388,  388,  388,  388,  391,  131,  388,  392,  575,  990,
      990,  226,  576,  577,  575,  575,  575,  575,  575,  575,
      578,  251,  575,  579,  399,  990,  990,  219,  400,  401,
      399,  399,  399,  399,  399,  399,  402,  144,  399,  403,
       39,  138,  130,  990,  990,  990,  990,  990,  990,  140,
       39,  138,  130,  990,  990,  990,  990,  990,  990,  140,
      580,  990,  990,  362,  581,  582,  580,  580,  580,  580,
      580,  580,  583,  255,  580,  584,  585,  990,  990,  226,
      586,  587,  585,  585,  585,  585,  585,  585,  588,  262,
      585,  589,   39,  214,  143,  990,  990,  990,  990,  990,

      990,  215,  591,  990,  990,  226,  592,  593,  591,  591,
      591,  591,  591,  591,  594,  268,  591,  595,  596,  990,
      990,  232,  597,  598,  596,  596,  596,  596,  596,  596,
      599,  270,  596,  600,  415,  990,  990,   39,  416,  417,
      418,  415,  415,  415,  418,  418,  419,  418,  418,  418,
      248,  990,  990,   45,  249,  250,  251,  248,  248,  248,
      251,  251,  252,  251,  251,  251,  418,  990,  990,  990,
      420,  990,  990,  421,  418,  418,  990,  990,  422,  423,
      990,  990,   39,  424,  425,  426,  423,  423,  423,  426,
      426,  427,  426,  426,  426,  251,  990,  990,  990,  253,

      990,  990,  251,  251,  251,  990,  990,  254,   84,  602,
      603,  990,  990,  990,  990,  990,  990,  604,   39,  428,
      425,  990,  990,  990,  990,  990,  990,  429,  259,  990,
      990,  990,  260,  990,  990,  259,  259,  259,  990,  990,
      263,  163,  606,  607,  990,  990,  608,  990,  990,  990,
      609,  170,  431,  432,  990,  990,  433,  990,  990,  990,
      434,  163,  606,  607,  990,  610,  608,  990,  990,  990,
      609,  163,  612,  613,  990,  990,  614,  990,  990,  990,
      615,  163,  617,  618,  990,  990,  619,  990,  990,  990,
      620,   84,  622,  623,  990,  990,  990,  990,  990,  990,

      624,  163,  324,  325,  990,  990,  326,  990,  990,  990,
      327,  170,  478,  479,  990,  990,  480,  990,  990,  990,
      481,  163,  324,  325,  990,  482,  326,  990,  990,  990,
      327,  163,  441,  990,  990,  990,  442,  163,  441,  990,
      990,  990,  442,  163,  284,  285,  990,  990,  286,  170,
      171,  172,  990,  990,  173,  163,  284,  285,  990,  287,
      286,  163,  289,  290,  990,  990,  291,  293,  626,  627,
      990,  990,  628,  163,  187,  188,  990,  990,  189,  170,
      303,  304,  990,  990,  305,  163,  187,  188,  990,  306,
      189,   89,  176,  177,  990,  990,  178,  990,  990,  990,

      179,   96,  298,  299,  990,  990,  300,   89,  176,  177,
      990,  301,  178,  990,  990,  990,  179,   89,  203,  204,
      990,  990,  205,  990,  990,  990,  206,  170,  303,  304,
      990,  990,  305,  163,  308,  309,  990,  990,  310,  990,
      990,  990,  311,  170,  431,  432,  990,  990,  433,  990,
      990,  990,  434,  163,  308,  309,  990,  317,  310,  990,
      990,  990,  311,  163,  319,  320,  990,  990,  321,  990,
      990,  990,  322,  163,  612,  613,  990,  990,  614,  990,
      990,  990,  615,  170,  467,  468,  990,  990,  469,  990,
      990,  990,  470,  163,  631,  632,  990,  990,  633,  990,

      990,  990,  634,  293,  636,  637,  990,  990,  638,  990,
      990,  990,  639,  163,  473,  474,  990,  990,  475,  990,
      990,  990,  476,  170,  641,  642,  990,  990,  643,  990,
      990,  990,  644,  163,  473,  474,  990,  645,  475,  990,
      990,  990,  476,  163,  617,  618,  990,  990,  619,  990,
      990,  990,  620,  170,  478,  479,  990,  990,  480,  990,
      990,  990,  481,  163,  631,  632,  990,  990,  633,  990,
      990,  990,  634,  293,  648,  649,  990,  990,  650,  990,
      990,  990,  651,  163,  319,  320,  990,  990,  321,  990,
      990,  990,  322,  170,  467,  468,  990,  990,  469,  990,

      990,  990,  470,   89,  203,  204,  990,  990,  205,  990,
      990,  990,  206,   96,  334,  335,  990,  990,  336,  990,
      990,  990,  337,   89,  340,  341,  990,  990,  342,  990,
      990,  990,  343,  170,  653,  654,  990,  990,  655,  990,
      990,  990,  656,  191,  658,  659,  990,  990,  660,  990,
      990,  990,  661,   89,  208,  209,  990,  990,  210,  990,
      990,  990,  211,   96,  345,  346,  990,  990,  347,  990,
      990,  990,  348,   89,  208,  209,  990,  349,  210,  990,
      990,  990,  211,   89,  340,  341,  990,  990,  342,  990,
      990,  990,  343,  219,  510,  511,  990,  990,  990,  990,

      990,  990,  990,  159,  990,  512,  226,  355,  356,  990,
      990,  990,  990,  990,  990,  990,   79,  990,  357,  219,
      510,  511,  990,  513,  990,  990,  990,  990,  990,  159,
      990,  512,   39,  160,  158,  362,  663,  664,  990,  990,
      990,  990,  990,  990,  990,  274,  990,  665,  514,  990,
      990,  515,  516,  517,  514,  514,  518,  514,  514,  514,
      514,  162,  514,  519,  520,  990,  990,  990,  521,  990,
      990,  990,  990,  163,  990,  522,  523,  990,  990,  524,
      525,  526,  523,  523,  527,  523,  523,  523,  523,  169,
      523,  528,  544,  990,  990,  515,  545,  546,  544,  544,

      547,  544,  544,  544,  544,  186,  544,  548,  163,  164,
      165,  990,  990,  166,  515,  667,  990,  990,  990,  668,
      990,  990,  990,  990,  277,  990,  669,  515,  671,  990,
      990,  990,  672,  990,  990,  990,  990,  280,  990,  673,
      674,  990,  990,  515,  675,  676,  674,  674,  677,  674,
      674,  674,  674,  283,  674,  678,  520,  990,  990,  990,
      521,  990,  990,  990,  990,  163,  990,  522,  680,  990,
      990,  515,  681,  682,  680,  680,  683,  680,  680,  680,
      680,  288,  680,  684,  163,  284,  285,  990,  990,  286,
      685,  990,  990,  686,  687,  688,  685,  685,  689,  685,

      685,  685,  685,  292,  685,  690,  530,  990,  990,  367,
      531,  532,  530,  530,  533,  530,  530,  530,  534,  175,
      530,  535,  691,  990,  990,  376,  692,  693,  691,  691,
      694,  691,  691,  691,  691,  297,  691,  695,  563,  990,
      990,  367,  564,  565,  563,  563,  566,  563,  563,  563,
      567,  202,  563,  568,   89,  176,  177,  990,  990,  178,
      990,  990,  990,  179,  367,  990,  990,  990,  990,  537,
      990,  990,  990,  990,  180,  990,  538,  367,  990,  990,
      990,  990,  537,  990,  990,  990,  990,  180,  990,  538,
      163,  164,  165,  990,  990,  166,  697,  990,  990,  524,

      698,  699,  697,  697,  700,  697,  697,  697,  697,  302,
      697,  701,  163,  187,  188,  990,  990,  189,  366,  990,
      990,  367,  368,  369,  366,  366,  370,  366,  366,  366,
      371,   88,  366,  372,  373,  990,  990,  990,  990,   89,
      990,  374,  375,  990,  990,  376,  377,  378,  375,  375,
      379,  375,  375,  375,  375,   95,  375,  380,  382,  990,
      990,  367,  383,  384,  382,  382,  385,  382,  382,  382,
      386,  101,  382,  387,   89,   90,   91,  990,  990,   92,
      990,  990,  990,   93,  703,  990,  990,  515,  704,  705,
      703,  703,  706,  703,  703,  703,  707,  307,  703,  708,

      709,  990,  990,  524,  710,  711,  709,  709,  712,  709,
      709,  709,  713,  312,  709,  714,  716,  990,  990,  515,
      717,  718,  716,  716,  719,  716,  716,  716,  720,  318,
      716,  721,  722,  990,  990,  515,  723,  724,  722,  722,
      725,  722,  722,  722,  726,  323,  722,  727,  163,  308,
      309,  990,  990,  310,  990,  990,  990,  311,  728,  990,
      990,  550,  729,  730,  728,  728,  731,  728,  728,  728,
      732,  328,  728,  733,  734,  990,  990,  376,  735,  736,
      734,  734,  737,  734,  734,  734,  738,  333,  734,  739,
      741,  990,  990,  367,  742,  743,  741,  741,  744,  741,

      741,  741,  745,  339,  741,  746,   89,  203,  204,  990,
      990,  205,  990,  990,  990,  206,  569,  990,  990,  367,
      570,  571,  569,  569,  572,  569,  569,  569,  573,  207,
      569,  574,  747,  990,  990,  376,  748,  749,  747,  747,
      750,  747,  747,  747,  751,  344,  747,  752,  754,  990,
      990,  219,  755,  756,  754,  754,  754,  754,  754,  754,
      757,  418,  754,  758,  575,  990,  990,  226,  576,  577,
      575,  575,  575,  575,  575,  575,  578,  251,  575,  579,
      760,  990,  990,  219,  761,  762,  760,  760,  760,  760,
      760,  760,  763,  426,  760,  764,   39,  420,  417,  990,

      990,  990,  990,  990,  990,  422,  765,  990,  990,  524,
      766,  767,  765,  765,  768,  765,  765,  765,  769,  430,
      765,  770,  163,  308,  309,  990,  990,  310,  990,  990,
      990,  311,  585,  990,  990,  226,  586,  587,  585,  585,
      585,  585,  585,  585,  588,  262,  585,  589,   39,  428,
      425,  990,  990,  990,  990,  990,  990,  429,  772,  990,
      990,  362,  773,  774,  772,  772,  772,  772,  772,  772,
      775,  436,  772,  776,  399,  990,  990,  219,  400,  401,
      399,  399,  399,  399,  399,  399,  402,  144,  399,  403,
       39,  214,  143,  990,  990,  990,  990,  990,  990,  215,

      163,  606,  607,  990,  990,  608,  990,  990,  990,  609,
      170,  431,  432,  990,  990,  433,  990,  990,  990,  434,
      163,  606,  607,  990,  610,  608,  990,  990,  990,  609,
      163,  617,  618,  990,  990,  619,  990,  990,  990,  620,
      170,  431,  432,  990,  990,  433,  990,  990,  990,  434,
      163,  612,  613,  990,  990,  614,  990,  990,  990,  615,
      163,  617,  618,  990,  990,  619,  990,  990,  990,  620,
      293,  778,  779,  990,  990,  780,  990,  990,  990,  781,
      163,  612,  613,  990,  990,  614,  990,  990,  990,  615,
      170,  467,  468,  990,  990,  469,  990,  990,  990,  470,

      163,  631,  632,  990,  990,  633,  990,  990,  990,  634,
      170,  478,  479,  990,  990,  480,  990,  990,  990,  481,
      163,  631,  632,  990,  990,  633,  990,  990,  990,  634,
      170,  478,  479,  990,  990,  480,  990,  990,  990,  481,
      163,  289,  290,  990,  990,  291,  170,  303,  304,  990,
      990,  305,  163,  289,  290,  990,  447,  291,  293,  783,
      784,  990,  990,  785,  990,  990,  990,  786,  170,  641,
      642,  990,  990,  643,  990,  990,  990,  644,  163,  319,
      320,  990,  990,  321,  990,  990,  990,  322,  170,  467,
      468,  990,  990,  469,  990,  990,  990,  470,  163,  319,

      320,  990,  471,  321,  990,  990,  990,  322,  163,  473,
      474,  990,  990,  475,  990,  990,  990,  476,  170,  641,
      642,  990,  990,  643,  990,  990,  990,  644,  293,  789,
      790,  990,  990,  791,  990,  990,  990,  792,  293,  794,
      795,  990,  990,  796,  990,  990,  990,  797,  163,  324,
      325,  990,  990,  326,  990,  990,  990,  327,  163,  324,
      325,  990,  482,  326,  990,  990,  990,  327,  163,  473,
      474,  990,  990,  475,  990,  990,  990,  476,   89,  340,
      341,  990,  990,  342,  990,  990,  990,  343,   96,  494,
      495,  990,  990,  496,  990,  990,  990,  497,   89,  340,

      341,  990,  498,  342,  990,  990,  990,  343,  674,  990,
      990,  515,  675,  676,  674,  674,  677,  674,  674,  674,
      674,  283,  674,  678,  523,  990,  990,  524,  525,  526,
      523,  523,  527,  523,  523,  523,  523,  169,  523,  528,
      163,  284,  285,  990,  990,  286,  515,  667,  990,  990,
      990,  668,  990,  990,  990,  990,  277,  990,  669,  515,
      667,  990,  990,  990,  668,  990,  990,  990,  990,  277,
      990,  669,  515,  799,  990,  990,  990,  800,  990,  990,
      990,  990,  440,  990,  801,  163,  278,  990,  990,  990,
      279,  515,  671,  990,  990,  990,  672,  990,  990,  990,

      990,  280,  990,  673,  515,  799,  990,  990,  990,  800,
      990,  990,  990,  990,  440,  990,  801,  515,  671,  990,
      990,  990,  672,  990,  990,  990,  990,  280,  990,  673,
      163,  281,  990,  990,  990,  282,  680,  990,  990,  515,
      681,  682,  680,  680,  683,  680,  680,  680,  680,  288,
      680,  684,  163,  284,  285,  990,  990,  286,  802,  990,
      990,  686,  803,  804,  802,  802,  805,  802,  802,  802,
      802,  443,  802,  806,  697,  990,  990,  524,  698,  699,
      697,  697,  700,  697,  697,  697,  697,  302,  697,  701,
      514,  990,  990,  515,  516,  517,  514,  514,  518,  514,

      514,  514,  514,  162,  514,  519,  520,  990,  990,  990,
      521,  990,  990,  990,  990,  163,  990,  522,  544,  990,
      990,  515,  545,  546,  544,  544,  547,  544,  544,  544,
      544,  186,  544,  548,  163,  164,  165,  990,  990,  166,
      808,  990,  990,  524,  809,  810,  808,  808,  811,  808,
      808,  808,  808,  448,  808,  812,  163,  187,  188,  990,
      990,  189,  813,  990,  990,  550,  814,  815,  813,  813,
      816,  813,  813,  813,  817,  452,  813,  818,  819,  990,
      990,  686,  820,  821,  819,  819,  822,  819,  819,  819,
      819,  457,  819,  823,  703,  990,  990,  515,  704,  705,

      703,  703,  706,  703,  703,  703,  707,  307,  703,  708,
      765,  990,  990,  524,  766,  767,  765,  765,  768,  765,
      765,  765,  769,  430,  765,  770,  716,  990,  990,  515,
      717,  718,  716,  716,  719,  716,  716,  716,  720,  318,
      716,  721,  722,  990,  990,  515,  723,  724,  722,  722,
      725,  722,  722,  722,  726,  323,  722,  727,  163,  308,
      309,  990,  990,  310,  990,  990,  990,  311,  163,  308,
      309,  990,  990,  310,  990,  990,  990,  311,  824,  990,
      990,  686,  825,  826,  824,  824,  827,  824,  824,  824,
      828,  461,  824,  829,  830,  990,  990,  524,  831,  832,

      830,  830,  833,  830,  830,  830,  834,  466,  830,  835,
      837,  990,  990,  515,  838,  839,  837,  837,  840,  837,
      837,  837,  841,  472,  837,  842,  843,  990,  990,  524,
      844,  845,  843,  843,  846,  843,  843,  843,  847,  477,
      843,  848,  382,  990,  990,  367,  383,  384,  382,  382,
      385,  382,  382,  382,  386,  101,  382,  387,  556,  990,
      990,  376,  557,  558,  556,  556,  559,  556,  556,  556,
      560,  196,  556,  561,  563,  990,  990,  367,  564,  565,
      563,  563,  566,  563,  563,  563,  567,  202,  563,  568,
      569,  990,  990,  367,  570,  571,  569,  569,  572,  569,

      569,  569,  573,  207,  569,  574,   89,  102,  103,  990,
      990,  104,  990,  990,  990,  105,  850,  990,  990,  524,
      851,  852,  850,  850,  853,  850,  850,  850,  854,  483,
      850,  855,  856,  990,  990,  550,  857,  858,  856,  856,
      859,  856,  856,  856,  860,  488,  856,  861,  741,  990,
      990,  367,  742,  743,  741,  741,  744,  741,  741,  741,
      745,  339,  741,  746,  862,  990,  990,  376,  863,  864,
      862,  862,  865,  862,  862,  862,  866,  493,  862,  867,
      869,  990,  990,  524,  870,  871,  869,  869,  872,  869,
      869,  869,  873,  499,  869,  874,  875,  990,  990,  550,

      876,  877,  875,  875,  878,  875,  875,  875,  879,  504,
      875,  880,  754,  990,  990,  219,  755,  756,  754,  754,
      754,  754,  754,  754,  757,  418,  754,  758,  575,  990,
      990,  226,  576,  577,  575,  575,  575,  575,  575,  575,
      578,  251,  575,  579,  760,  990,  990,  219,  761,  762,
      760,  760,  760,  760,  760,  760,  763,  426,  760,  764,
       39,  420,  417,  990,  990,  990,  990,  990,  990,  422,
      881,  990,  990,  362,  882,  883,  881,  881,  881,  881,
      881,  881,  884,  601,  881,  885,  585,  990,  990,  226,
      586,  587,  585,  585,  585,  585,  585,  585,  588,  262,

      585,  589,   39,  428,  425,  990,  990,  990,  990,  990,
      990,  429,  886,  990,  990,  515,  887,  888,  886,  886,
      889,  886,  886,  886,  890,  605,  886,  891,  893,  990,
      990,  515,  894,  895,  893,  893,  896,  893,  893,  893,
      897,  611,  893,  898,  899,  990,  990,  515,  900,  901,
      899,  899,  902,  899,  899,  899,  903,  616,  899,  904,
      163,  606,  607,  990,  990,  608,  990,  990,  990,  609,
      905,  990,  990,  362,  906,  907,  905,  905,  905,  905,
      905,  905,  908,  621,  905,  909,  163,  606,  607,  990,
      990,  608,  990,  990,  990,  609,  170,  431,  432,  990,

      990,  433,  990,  990,  990,  434,  163,  612,  613,  990,
      990,  614,  990,  990,  990,  615,  163,  617,  618,  990,
      990,  619,  990,  990,  990,  620,  163,  612,  613,  990,
      990,  614,  990,  990,  990,  615,  170,  467,  468,  990,
      990,  469,  990,  990,  990,  470,  163,  631,  632,  990,
      990,  633,  990,  990,  990,  634,  293,  911,  912,  990,
      990,  913,  990,  990,  990,  914,  163,  473,  474,  990,
      990,  475,  990,  990,  990,  476,  170,  641,  642,  990,
      990,  643,  990,  990,  990,  644,  163,  473,  474,  990,
      645,  475,  990,  990,  990,  476,  163,  617,  618,  990,

      990,  619,  990,  990,  990,  620,  170,  478,  479,  990,
      990,  480,  990,  990,  990,  481,  163,  631,  632,  990,
      990,  633,  990,  990,  990,  634,  515,  799,  990,  990,
      990,  800,  990,  990,  990,  990,  440,  990,  801,  515,
      799,  990,  990,  990,  800,  990,  990,  990,  990,  440,
      990,  801,  163,  441,  990,  990,  990,  442,  674,  990,
      990,  515,  675,  676,  674,  674,  677,  674,  674,  674,
      674,  283,  674,  678,  523,  990,  990,  524,  525,  526,
      523,  523,  527,  523,  523,  523,  523,  169,  523,  528,
      680,  990,  990,  515,  681,  682,  680,  680,  683,  680,

      680,  680,  680,  288,  680,  684,  163,  284,  285,  990,
      990,  286,  915,  990,  990,  686,  916,  917,  915,  915,
      918,  915,  915,  915,  915,  625,  915,  919,  544,  990,
      990,  515,  545,  546,  544,  544,  547,  544,  544,  544,
      544,  186,  544,  548,  697,  990,  990,  524,  698,  699,
      697,  697,  700,  697,  697,  697,  697,  302,  697,  701,
      163,  187,  188,  990,  990,  189,  530,  990,  990,  367,
      531,  532,  530,  530,  533,  530,  530,  530,  534,  175,
      530,  535,  691,  990,  990,  376,  692,  693,  691,  691,
      694,  691,  691,  691,  691,  297,  691,  695,  563,  990,

      990,  367,  564,  565,  563,  563,  566,  563,  563,  563,
      567,  202,  563,  568,   89,  176,  177,  990,  990,  178,
      990,  990,  990,  179,  163,  187,  188,  990,  990,  189,
      703,  990,  990,  515,  704,  705,  703,  703,  706,  703,
      703,  703,  707,  307,  703,  708,  716,  990,  990,  515,
      717,  718,  716,  716,  719,  716,  716,  716,  720,  318,
      716,  721,  163,  308,  309,  990,  990,  310,  990,  990,
      990,  311,  830,  990,  990,  524,  831,  832,  830,  830,
      833,  830,  830,  830,  834,  466,  830,  835,  921,  990,
      990,  515,  922,  923,  921,  921,  924,  921,  921,  921,

      925,  630,  921,  926,  927,  990,  990,  686,  928,  929,
      927,  927,  930,  927,  927,  927,  931,  635,  927,  932,
      837,  990,  990,  515,  838,  839,  837,  837,  840,  837,
      837,  837,  841,  472,  837,  842,  933,  990,  990,  524,
      934,  935,  933,  933,  936,  933,  933,  933,  937,  640,
      933,  938,  941,  990,  990,  686,  942,  943,  941,  941,
      944,  941,  941,  941,  945,  647,  941,  946,  163,  319,
      320,  990,  990,  321,  990,  990,  990,  322,  734,  990,
      990,  376,  735,  736,  734,  734,  737,  734,  734,  734,
      738,  333,  734,  739,  741,  990,  990,  367,  742,  743,

      741,  741,  744,  741,  741,  741,  745,  339,  741,  746,
       89,  203,  204,  990,  990,  205,  990,  990,  990,  206,
      947,  990,  990,  524,  948,  949,  947,  947,  950,  947,
      947,  947,  951,  652,  947,  952,  953,  990,  990,  550,
      954,  955,  953,  953,  956,  953,  953,  953,  957,  657,
      953,  958,  163,  324,  325,  990,  990,  326,  990,  990,
      990,  327,  569,  990,  990,  367,  570,  571,  569,  569,
      572,  569,  569,  569,  573,  207,  569,  574,  747,  990,
      990,  376,  748,  749,  747,  747,  750,  747,  747,  747,
      751,  344,  747,  752,   89,  208,  209,  990,  990,  210,

      990,  990,  990,  211,  886,  990,  990,  515,  887,  888,
      886,  886,  889,  886,  886,  886,  890,  605,  886,  891,
      163,  606,  607,  990,  990,  608,  990,  990,  990,  609,
      163,  606,  607,  990,  990,  608,  990,  990,  990,  609,
      959,  990,  990,  686,  960,  961,  959,  959,  962,  959,
      959,  959,  963,  777,  959,  964,  170,  641,  642,  990,
      990,  643,  990,  990,  990,  644,  163,  289,  290,  990,
      990,  291,  965,  990,  990,  686,  966,  967,  965,  965,
      968,  965,  965,  965,  969,  782,  965,  970,  163,  319,
      320,  990,  990,  321,  990,  990,  990,  322,  972,  990,

      990,  686,  973,  974,  972,  972,  975,  972,  972,  972,
      976,  788,  972,  977,  978,  990,  990,  686,  979,  980,
      978,  978,  981,  978,  978,  978,  982,  793,  978,  983,
      163,  324,  325,  990,  990,  326,  990,  990,  990,  327,
      862,  990,  990,  376,  863,  864,  862,  862,  865,  862,
      862,  862,  866,  493,  862,  867,   89,  340,  341,  990,
      990,  342,  990,  990,  990,  343,  984,  990,  990,  686,
      985,  986,  984,  984,  987,  984,  984,  984,  988,  910,
      984,  989,   19,  990,  990,   19,   39,  990,   39,   39,
       52,  990,   52,   52,   80,  990,   80,   80,   83,  990,

       83,   83,   88,  990,   88,   88,   89,  990,   89,   89,
       95,  990,   95,   95,  101,  990,  101,  101,  111,  990,
      111,  117,  990,  117,  117,  146,  990,  146,  146,  162,
      990,  162,  162,  163,  990,  163,  163,  169,  990,  169,
      169,  175,  990,  175,  175,  180,  990,  180,  180,  182,
      990,  182,  182,  186,  990,  186,  186,  190,  990,  190,
      190,  196,  990,  196,  196,  202,  990,  202,  202,  207,
      990,  207,  207,  218,  990,  218,  218,  219,  990,  219,
      219,  225,  990,  225,  225,   42,  990,   42,   42,   36,
      990,  990,   36,  255,  990,  255,  255,  270,  990,  270,

      270,  274,  990,  274,  274,  169,  990,  169,  169,  277,
      990,  277,  277,  280,  990,  280,  280,  283,  990,  283,
      283,  288,  990,  288,  288,  292,  990,  292,  292,  175,
      990,  175,  175,  297,  990,  297,  297,  202,  990,  202,
      202,  180,  990,  180,  180,  302,  990,  302,  302,   88,
      990,   88,   88,   89,  990,   89,   89,   95,  990,   95,
       95,  307,  990,  307,  307,  312,  990,  312,  312,  318,
      990,  318,  318,  323,  990,  323,  323,  328,  990,  328,
      328,  333,  990,  333,  333,  339,  990,  339,  339,  344,
      990,  344,  344,  251,  990,  251,  251,  218,  990,  218,

      218,  219,  990,  219,  219,  354,  990,  354,  354,   42,
      990,   42,   42,  358,  990,  358,  358,   39,  990,   39,
       39,  361,  990,  361,  361,  367,  990,  367,  367,  131,
      990,  131,  131,   74,  990,  990,   74,  430,  990,  430,
      430,  436,  990,  436,  436,  283,  990,  283,  283,  169,
      990,  169,  169,  277,  990,  277,  277,  440,  990,  440,
      440,  280,  990,  280,  280,  288,  990,  288,  288,  443,
      990,  443,  443,  302,  990,  302,  302,  162,  990,  162,
      162,  163,  990,  163,  163,  186,  990,  186,  186,  448,
      990,  448,  448,  452,  990,  452,  452,  457,  990,  457,

      457,  318,  990,  318,  318,  461,  990,  461,  461,  466,
      990,  466,  466,  472,  990,  472,  472,  477,  990,  477,
      477,  101,  990,  101,  101,  196,  990,  196,  196,  202,
      990,  202,  202,  483,  990,  483,  483,  488,  990,  488,
      488,  339,  990,  339,  339,  493,  990,  493,  493,  499,
      990,  499,  499,  504,  990,  504,  504,  262,  990,  262,
      262,  426,  990,  426,  426,  144,  990,  144,  144,  509,
      990,  509,  509,  354,  990,  354,  354,  159,  990,  159,
      159,  358,  990,  358,  358,   80,  990,   80,   80,  515,
      990,  515,  515,  367,  990,  367,  367,   88,  990,   88,

       88,  536,  990,  536,  536,   89,  990,   89,   89,  131,
      990,  131,  131,  601,  990,  601,  601,  605,  990,  605,
      605,  430,  990,  430,  430,  611,  990,  611,  611,  616,
      990,  616,  616,  621,  990,  621,  621,  323,  990,  323,
      323,  477,  990,  477,  477,  440,  990,  440,  440,  283,
      990,  283,  283,  169,  990,  169,  169,  288,  990,  288,
      288,  625,  990,  625,  625,  186,  990,  186,  186,  302,
      990,  302,  302,  175,  990,  175,  175,  297,  990,  297,
      297,  202,  990,  202,  202,  307,  990,  307,  307,  318,
      990,  318,  318,  466,  990,  466,  466,  630,  990,  630,

      630,  635,  990,  635,  635,  472,  990,  472,  472,  640,
      990,  640,  640,  647,  990,  647,  647,  333,  990,  333,
      333,  339,  990,  339,  339,  652,  990,  652,  652,  657,
      990,  657,  657,  207,  990,  207,  207,  344,  990,  344,
      344,  509,  990,  509,  509,  354,  990,  354,  354,  159,
      990,  159,  159,  662,  990,  662,  662,  515,  990,  515,
      515,  162,  990,  162,  162,  666,  990,  666,  666,  670,
      990,  670,  670,  163,  990,  163,  163,  283,  990,  283,
      283,  175,  990,  175,  175,  536,  990,  536,  536,  180,
      990,  180,  180,  186,  990,  186,  186,  367,  990,  367,

      367,   88,  990,   88,   88,  307,  990,  307,  307,  202,
      990,  202,  202,  418,  990,  418,  418,  426,  990,  426,
      426,  144,  990,  144,  144,  605,  990,  605,  605,  430,
      990,  430,  430,  616,  990,  616,  616,  611,  990,  611,
      611,  777,  990,  777,  777,  466,  990,  466,  466,  630,
      990,  630,  630,  477,  990,  477,  477,  288,  990,  288,
      288,  302,  990,  302,  302,  782,  990,  782,  782,  640,
      990,  640,  640,  318,  990,  318,  318,  472,  990,  472,
      472,  788,  990,  788,  788,  793,  990,  793,  793,  323,
      990,  323,  323,  339,  990,  339,  339,  493,  990,  493,

      493,  283,  990,  283,  283,  666,  990,  666,  666,  798,
      990,  798,  798,  277,  990,  277,  277,  670,  990,  670,
      670,  280,  990,  280,  280,  515,  990,  515,  515,  162,
      990,  162,  162,  186,  990,  186,  186,  307,  990,  307,
      307,  101,  990,  101,  101,  418,  990,  418,  418,  426,
      990,  426,  426,  605,  990,  605,  605,  430,  990,  430,
      430,  611,  990,  611,  611,  616,  990,  616,  616,  466,
      990,  466,  466,  630,  990,  630,  630,  910,  990,  910,
      910,  472,  990,  472,  472,  640,  990,  640,  640,  477,
      990,  477,  477,  798,  990,  798,  798,  440,  990,  440,

      440,  283,  990,  283,  283,  186,  990,  186,  186,  175,
      990,  175,  175,  307,  990,  307,  307,  318,  990,  318,
      318,  202,  990,  202,  202,  323,  990,  323,  323,  207,
      990,  207,  207,  605,  990,  605,  605,  640,  990,  640,
      640,  288,  990,  288,  288,  339,  990,  339,  339,    3,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990
    } ;

static const flex_int16_t yy_chk[6467] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    4,   43,   43,  986,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    7,   80,   80,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    8,    8,
       12,    8,   81,   81,  980,   12,    8,    8,    9,    9,
       84,   96,  977,   94,   84,   96,    9,   13,   94,  360,
      360,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   21,  974,  967,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   23,

      961,  955,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   24,  163,  170,  952,   24,
      163,  170,   24,   24,   24,  180,  181,   24,   26,  293,
      180,  181,   26,  293,  522,   26,   26,   26,  522,  538,
       26,   27,   27,   27,  538,  949,  943,  935,  929,  923,
       27,   28,  917,  912,  907,   28,  901,  895,   28,   28,
       28,  888,  883,   28,   29,  877,  871,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       34,  867,  864,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   37,  858,  852,  845,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   40,  842,  839,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   49,  832,
      826,  821,   49,  815,  810,   49,   49,   49,  804,  795,
       49,   50,   50,   50,   51,  792,  791,  784,   51,  779,
      776,   51,   51,   51,  774,  767,   51,   52,   52,   52,
      762,  756,   52,  752,  749,  746,   52,   54,   54,   54,
      743,  739,   54,   55,   55,   55,  736,   55,   55,  730,
      727,  724,   55,   56,   56,   56,  721,  718,   56,  711,
      705,  701,   56,   57,  699,  693,  688,   57,  684,  682,

       57,   57,   57,  676,  664,   57,   58,  661,  660,  654,
       58,  651,  642,   58,   58,   58,  638,  632,   58,   59,
      628,  623,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   61,   61,   61,  618,  613,
      605,  600,  598,  593,  587,   61,  582,   61,   63,  577,
      574,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   65,  571,  565,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       66,  558,  552,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   67,  546,  541,  532,

       67,  526,  517,   67,   67,   67,  508,  503,   67,   69,
      502,  499,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   70,   70,   70,  497,  496,
      493,  490,  487,  485,   70,   72,  479,  476,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   76,  475,  468,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   78,  465,  460,
      457,   78,  455,  451,   78,   78,   78,  439,  425,   78,
       83,   83,   83,  418,  411,   83,   85,   85,   85,  408,
      406,   85,   86,   86,   86,  401,   86,   86,   90,   90,

       90,  395,  390,   90,   92,   92,   92,  387,  384,   92,
      380,  378,  374,   92,   93,   93,   93,  369,  365,   93,
      364,  346,  343,   93,   97,   97,   97,  342,  335,   97,
       99,   99,   99,  325,  320,   99,  100,  100,  100,  312,
      307,  100,  304,  299,  290,  100,  102,  102,  102,  283,
      272,  102,  267,  261,  255,  102,  104,  104,  104,  251,
      245,  104,  239,  236,  234,  104,  105,  105,  105,  225,
      224,  105,  209,  204,  194,  105,  106,  191,  188,  182,
      106,  178,  162,  106,  106,  106,  159,  152,  106,  107,
      148,  143,  136,  107,  131,  125,  107,  107,  107,  113,

      111,  107,  108,  103,   95,   89,  108,   88,   79,  108,
      108,  108,   73,   68,  108,  112,  112,  112,   62,   60,
       53,   48,   45,   42,   39,  112,   35,  112,  117,  117,
      117,   32,   25,   22,   18,   10,    3,    0,  117,    0,
      117,  118,    0,    0,    0,    0,    0,    0,    0,    0,
      118,    0,  118,  119,  119,  119,    0,    0,    0,    0,
        0,    0,    0,  119,    0,  119,  120,  120,  120,    0,
      120,    0,    0,    0,    0,    0,  120,    0,  120,  121,
      121,  121,  122,    0,    0,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  124,    0,

        0,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  126,    0,    0,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      127,  127,    0,    0,    0,    0,    0,    0,  127,  129,
        0,    0,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  130,    0,    0,    0,  130,
        0,    0,  130,  130,  130,    0,    0,  130,  138,    0,
        0,    0,  138,    0,    0,  138,  138,  138,    0,    0,
      138,  139,  139,  139,    0,    0,    0,    0,    0,    0,
      139,  142,    0,    0,  142,  142,  142,  142,  142,  142,

      142,  142,  142,  142,  142,  142,  142,  147,  147,  147,
        0,    0,  147,    0,    0,    0,  147,  149,  149,  149,
        0,    0,  149,    0,    0,    0,  149,  151,    0,    0,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  155,  155,  155,    0,    0,    0,    0,
        0,    0,  155,  156,    0,    0,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  157,
        0,    0,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  158,    0,    0,    0,  158,
        0,    0,  158,  158,  158,    0,    0,  158,  160,    0,

        0,    0,  160,    0,    0,  160,  160,  160,    0,    0,
      160,  161,  161,  161,  164,  164,  164,    0,    0,  164,
      166,  166,  166,    0,    0,  166,  167,  167,    0,    0,
        0,  167,  168,  168,    0,    0,    0,  168,  169,  169,
      169,    0,    0,  169,  171,  171,  171,    0,    0,  171,
      172,  172,  172,    0,  172,  172,  173,  173,  173,    0,
        0,  173,  174,  174,  174,    0,    0,  174,  175,  175,
      175,    0,    0,  175,    0,    0,    0,  175,  176,  176,
      176,    0,    0,  176,  177,  177,  177,    0,  177,  177,
        0,    0,    0,  177,  179,  179,  179,    0,    0,  179,

        0,    0,    0,  179,  187,  187,  187,    0,    0,  187,
      190,  190,  190,    0,    0,  190,    0,    0,    0,  190,
      192,  192,  192,    0,    0,  192,  193,  193,  193,    0,
      193,  193,    0,    0,    0,  193,  196,  196,  196,    0,
        0,  196,    0,    0,    0,  196,  197,  197,  197,    0,
        0,  197,    0,    0,    0,  197,  198,  198,  198,    0,
      198,  198,    0,    0,    0,  198,  199,  199,  199,    0,
        0,  199,    0,    0,    0,  199,  200,  200,  200,    0,
        0,  200,    0,    0,    0,  200,  201,  201,  201,    0,
        0,  201,    0,    0,    0,  201,  202,  202,  202,    0,

        0,  202,    0,    0,    0,  202,  203,  203,  203,    0,
        0,  203,    0,    0,    0,  203,  206,  206,  206,    0,
        0,  206,    0,    0,    0,  206,  208,  208,  208,    0,
        0,  208,    0,    0,    0,  208,  210,  210,  210,    0,
        0,  210,    0,    0,    0,  210,  212,  212,  212,    0,
        0,    0,    0,    0,    0,  212,  214,    0,    0,    0,
      214,    0,    0,  214,  214,  214,    0,    0,  214,  216,
        0,    0,    0,  216,    0,    0,  216,  216,  216,    0,
        0,  216,  218,  218,  218,    0,    0,    0,    0,    0,
        0,    0,  218,    0,  218,  219,    0,    0,    0,    0,

        0,    0,    0,    0,  219,    0,  219,  220,  220,  220,
        0,    0,    0,    0,    0,    0,    0,  220,    0,  220,
      221,  221,  221,    0,  221,    0,    0,    0,    0,    0,
      221,    0,  221,  222,  222,  222,  223,  223,    0,    0,
        0,    0,    0,    0,    0,    0,  223,    0,  223,  226,
        0,    0,    0,    0,    0,    0,    0,    0,  226,    0,
      226,  227,  227,  227,    0,    0,    0,    0,    0,    0,
        0,  227,    0,  227,  229,  229,  229,  230,  230,  230,
        0,    0,    0,    0,    0,    0,    0,  230,    0,  230,
      231,    0,    0,  231,  231,  231,  231,  231,  231,  231,

      231,  231,  231,  231,  231,  231,  232,    0,    0,    0,
        0,  232,    0,  232,  233,    0,    0,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      235,    0,    0,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  237,    0,    0,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  238,    0,    0,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  240,    0,
        0,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  241,  241,  241,    0,    0,    0,

        0,    0,    0,  241,  242,    0,    0,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      243,    0,    0,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  244,    0,    0,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  247,  247,    0,    0,    0,    0,    0,    0,
      247,  248,    0,    0,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  249,    0,    0,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  250,    0,    0,    0,  250,    0,    0,

      250,  250,  250,    0,    0,  250,  252,    0,    0,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  253,  253,  253,    0,    0,    0,    0,    0,
        0,  253,  254,    0,    0,    0,  254,    0,    0,  254,
      254,  254,    0,    0,  254,  256,  256,  256,    0,    0,
      256,    0,    0,    0,  256,  258,  258,  258,    0,    0,
      258,    0,    0,    0,  258,  260,    0,    0,    0,  260,
        0,    0,  260,  260,  260,    0,    0,  260,  264,  264,
      264,    0,    0,    0,    0,    0,    0,  264,  265,    0,
        0,    0,  265,    0,    0,  265,  265,  265,    0,    0,

      265,  271,  271,  271,    0,    0,  271,    0,    0,    0,
      271,  274,  274,  274,    0,    0,  274,  275,  275,  275,
        0,    0,  275,  276,  276,  276,    0,  276,  276,  277,
      277,    0,    0,    0,  277,  278,  278,    0,    0,    0,
      278,  279,  279,    0,    0,    0,  279,  280,  280,    0,
        0,    0,  280,  281,  281,    0,    0,    0,  281,  282,
      282,    0,    0,    0,  282,  284,  284,  284,    0,    0,
      284,  286,  286,  286,    0,    0,  286,  287,  287,  287,
        0,    0,  287,  288,  288,  288,    0,    0,  288,  289,
      289,  289,    0,    0,  289,  292,  292,  292,    0,    0,

      292,  295,  295,  295,    0,  295,  295,  296,  296,  296,
        0,    0,  296,  297,  297,  297,    0,    0,  297,  298,
      298,  298,    0,    0,  298,  301,  301,  301,    0,    0,
      301,    0,    0,    0,  301,  303,  303,  303,    0,    0,
      303,  306,  306,  306,    0,    0,  306,  308,  308,  308,
        0,    0,  308,    0,    0,    0,  308,  310,  310,  310,
        0,    0,  310,    0,    0,    0,  310,  315,  315,  315,
        0,    0,  315,    0,    0,    0,  315,  317,  317,  317,
        0,    0,  317,    0,    0,    0,  317,  319,  319,  319,
        0,    0,  319,    0,    0,    0,  319,  322,  322,  322,

        0,    0,  322,    0,    0,    0,  322,  324,  324,  324,
        0,    0,  324,    0,    0,    0,  324,  326,  326,  326,
        0,    0,  326,    0,    0,    0,  326,  328,  328,  328,
        0,    0,  328,    0,    0,    0,  328,  329,  329,  329,
        0,    0,  329,    0,    0,    0,  329,  330,  330,  330,
        0,  330,  330,    0,    0,    0,  330,  331,  331,  331,
        0,    0,  331,    0,    0,    0,  331,  334,  334,  334,
        0,    0,  334,    0,    0,    0,  334,  338,  338,  338,
        0,    0,  338,    0,    0,    0,  338,  339,  339,  339,
        0,    0,  339,    0,    0,    0,  339,  340,  340,  340,

        0,    0,  340,    0,    0,    0,  340,  341,  341,  341,
        0,  341,  341,    0,    0,    0,  341,  345,  345,  345,
        0,    0,  345,    0,    0,    0,  345,  349,  349,  349,
        0,    0,  349,    0,    0,    0,  349,  350,  350,  350,
        0,    0,    0,    0,    0,    0,  350,  351,  351,  351,
        0,    0,    0,    0,    0,    0,  351,  352,  352,  352,
        0,    0,    0,    0,    0,    0,  352,  353,  353,  353,
        0,    0,    0,    0,    0,    0,  353,  354,  354,  354,
        0,    0,    0,    0,    0,    0,    0,  354,    0,  354,
      355,  355,  355,    0,    0,    0,    0,    0,    0,    0,

      355,    0,  355,  356,  356,  356,    0,  356,    0,    0,
        0,    0,    0,  356,    0,  356,  357,  357,  357,  358,
      358,    0,    0,    0,    0,    0,    0,    0,    0,  358,
        0,  358,  359,  359,    0,    0,    0,    0,    0,    0,
        0,    0,  359,    0,  359,  361,    0,    0,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  362,    0,    0,    0,  362,    0,    0,    0,    0,
      362,    0,  362,  363,    0,    0,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  366,
        0,    0,  366,  366,  366,  366,  366,  366,  366,  366,

      366,  366,  366,  366,  366,  367,    0,    0,    0,    0,
      367,    0,  367,  368,    0,    0,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  370,
        0,    0,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  371,    0,    0,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  372,  372,  372,    0,    0,  372,    0,    0,    0,
      372,  373,    0,    0,    0,    0,  373,    0,    0,    0,
        0,  373,    0,  373,  376,    0,    0,    0,  376,    0,
        0,    0,    0,  376,    0,  376,  377,    0,    0,  377,

      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  379,    0,    0,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  381,    0,
        0,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  383,    0,    0,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      385,    0,    0,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  386,    0,    0,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  388,    0,    0,  388,  388,  388,  388,  388,

      388,  388,  388,  388,  388,  388,  388,  388,  389,    0,
        0,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  391,    0,    0,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      392,  392,  392,    0,    0,    0,    0,    0,    0,  392,
      397,  397,  397,    0,    0,    0,    0,    0,    0,  397,
      398,    0,    0,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  400,    0,    0,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  403,  403,  403,    0,    0,    0,    0,    0,

        0,  403,  410,    0,    0,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  414,    0,
        0,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  415,    0,    0,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      416,    0,    0,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  417,    0,    0,    0,
      417,    0,    0,  417,  417,  417,    0,    0,  417,  419,
        0,    0,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  420,    0,    0,    0,  420,

        0,    0,  420,  420,  420,    0,    0,  420,  421,  421,
      421,    0,    0,    0,    0,    0,    0,  421,  422,  422,
      422,    0,    0,    0,    0,    0,    0,  422,  424,    0,
        0,    0,  424,    0,    0,  424,  424,  424,    0,    0,
      424,  430,  430,  430,    0,    0,  430,    0,    0,    0,
      430,  431,  431,  431,    0,    0,  431,    0,    0,    0,
      431,  432,  432,  432,    0,  432,  432,    0,    0,    0,
      432,  433,  433,  433,    0,    0,  433,    0,    0,    0,
      433,  434,  434,  434,    0,    0,  434,    0,    0,    0,
      434,  435,  435,  435,    0,    0,    0,    0,    0,    0,

      435,  436,  436,  436,    0,    0,  436,    0,    0,    0,
      436,  437,  437,  437,    0,    0,  437,    0,    0,    0,
      437,  438,  438,  438,    0,  438,  438,    0,    0,    0,
      438,  440,  440,    0,    0,    0,  440,  441,  441,    0,
        0,    0,  441,  443,  443,  443,    0,    0,  443,  444,
      444,  444,    0,    0,  444,  445,  445,  445,    0,  445,
      445,  446,  446,  446,    0,    0,  446,  447,  447,  447,
        0,    0,  447,  448,  448,  448,    0,    0,  448,  449,
      449,  449,    0,    0,  449,  450,  450,  450,    0,  450,
      450,  452,  452,  452,    0,    0,  452,    0,    0,    0,

      452,  453,  453,  453,    0,    0,  453,  454,  454,  454,
        0,  454,  454,    0,    0,    0,  454,  456,  456,  456,
        0,    0,  456,    0,    0,    0,  456,  458,  458,  458,
        0,    0,  458,  461,  461,  461,    0,    0,  461,    0,
        0,    0,  461,  462,  462,  462,    0,    0,  462,    0,
        0,    0,  462,  463,  463,  463,    0,  463,  463,    0,
        0,    0,  463,  464,  464,  464,    0,    0,  464,    0,
        0,    0,  464,  466,  466,  466,    0,    0,  466,    0,
        0,    0,  466,  467,  467,  467,    0,    0,  467,    0,
        0,    0,  467,  470,  470,  470,    0,    0,  470,    0,

        0,    0,  470,  471,  471,  471,    0,    0,  471,    0,
        0,    0,  471,  472,  472,  472,    0,    0,  472,    0,
        0,    0,  472,  473,  473,  473,    0,    0,  473,    0,
        0,    0,  473,  474,  474,  474,    0,  474,  474,    0,
        0,    0,  474,  477,  477,  477,    0,    0,  477,    0,
        0,    0,  477,  478,  478,  478,    0,    0,  478,    0,
        0,    0,  478,  480,  480,  480,    0,    0,  480,    0,
        0,    0,  480,  482,  482,  482,    0,    0,  482,    0,
        0,    0,  482,  483,  483,  483,    0,    0,  483,    0,
        0,    0,  483,  484,  484,  484,    0,    0,  484,    0,

        0,    0,  484,  488,  488,  488,    0,    0,  488,    0,
        0,    0,  488,  489,  489,  489,    0,    0,  489,    0,
        0,    0,  489,  492,  492,  492,    0,    0,  492,    0,
        0,    0,  492,  494,  494,  494,    0,    0,  494,    0,
        0,    0,  494,  498,  498,  498,    0,    0,  498,    0,
        0,    0,  498,  504,  504,  504,    0,    0,  504,    0,
        0,    0,  504,  505,  505,  505,    0,    0,  505,    0,
        0,    0,  505,  506,  506,  506,    0,  506,  506,    0,
        0,    0,  506,  507,  507,  507,    0,    0,  507,    0,
        0,    0,  507,  509,  509,  509,    0,    0,    0,    0,

        0,    0,    0,  509,    0,  509,  510,  510,  510,    0,
        0,    0,    0,    0,    0,    0,  510,    0,  510,  511,
      511,  511,    0,  511,    0,    0,    0,    0,    0,  511,
        0,  511,  512,  512,  512,  513,  513,  513,    0,    0,
        0,    0,    0,    0,    0,  513,    0,  513,  514,    0,
        0,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  515,    0,    0,    0,  515,    0,
        0,    0,    0,  515,    0,  515,  516,    0,    0,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  518,    0,    0,  518,  518,  518,  518,  518,

      518,  518,  518,  518,  518,  518,  518,  518,  519,  519,
      519,    0,    0,  519,  520,  520,    0,    0,    0,  520,
        0,    0,    0,    0,  520,    0,  520,  521,  521,    0,
        0,    0,  521,    0,    0,    0,    0,  521,    0,  521,
      523,    0,    0,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  524,    0,    0,    0,
      524,    0,    0,    0,    0,  524,    0,  524,  527,    0,
        0,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  528,  528,  528,    0,    0,  528,
      529,    0,    0,  529,  529,  529,  529,  529,  529,  529,

      529,  529,  529,  529,  529,  529,  530,    0,    0,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  531,    0,    0,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  534,    0,
        0,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  535,  535,  535,    0,    0,  535,
        0,    0,    0,  535,  536,    0,    0,    0,    0,  536,
        0,    0,    0,    0,  536,    0,  536,  537,    0,    0,
        0,    0,  537,    0,    0,    0,    0,  537,    0,  537,
      543,  543,  543,    0,    0,  543,  545,    0,    0,  545,

      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  548,  548,  548,    0,    0,  548,  549,    0,
        0,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  550,    0,    0,    0,    0,  550,
        0,  550,  551,    0,    0,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  554,    0,
        0,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  555,  555,  555,    0,    0,  555,
        0,    0,    0,  555,  556,    0,    0,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,

      557,    0,    0,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  559,    0,    0,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  560,    0,    0,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  561,  561,
      561,    0,    0,  561,    0,    0,    0,  561,  562,    0,
        0,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  564,    0,    0,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      567,    0,    0,  567,  567,  567,  567,  567,  567,  567,

      567,  567,  567,  567,  567,  567,  568,  568,  568,    0,
        0,  568,    0,    0,    0,  568,  569,    0,    0,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  570,    0,    0,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  575,    0,
        0,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  576,    0,    0,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      578,    0,    0,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  579,  579,  579,    0,

        0,    0,    0,    0,    0,  579,  581,    0,    0,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  584,  584,  584,    0,    0,  584,    0,    0,
        0,  584,  586,    0,    0,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  589,  589,
      589,    0,    0,    0,    0,    0,    0,  589,  590,    0,
        0,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  591,    0,    0,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      595,  595,  595,    0,    0,    0,    0,    0,    0,  595,

      601,  601,  601,    0,    0,  601,    0,    0,    0,  601,
      602,  602,  602,    0,    0,  602,    0,    0,    0,  602,
      603,  603,  603,    0,  603,  603,    0,    0,    0,  603,
      604,  604,  604,    0,    0,  604,    0,    0,    0,  604,
      606,  606,  606,    0,    0,  606,    0,    0,    0,  606,
      608,  608,  608,    0,    0,  608,    0,    0,    0,  608,
      609,  609,  609,    0,    0,  609,    0,    0,    0,  609,
      610,  610,  610,    0,    0,  610,    0,    0,    0,  610,
      611,  611,  611,    0,    0,  611,    0,    0,    0,  611,
      612,  612,  612,    0,    0,  612,    0,    0,    0,  612,

      615,  615,  615,    0,    0,  615,    0,    0,    0,  615,
      617,  617,  617,    0,    0,  617,    0,    0,    0,  617,
      619,  619,  619,    0,    0,  619,    0,    0,    0,  619,
      622,  622,  622,    0,    0,  622,    0,    0,    0,  622,
      625,  625,  625,    0,    0,  625,  626,  626,  626,    0,
        0,  626,  627,  627,  627,    0,  627,  627,  629,  629,
      629,    0,    0,  629,    0,    0,    0,  629,  631,  631,
      631,    0,    0,  631,    0,    0,    0,  631,  635,  635,
      635,    0,    0,  635,    0,    0,    0,  635,  636,  636,
      636,    0,    0,  636,    0,    0,    0,  636,  637,  637,

      637,    0,  637,  637,    0,    0,    0,  637,  639,  639,
      639,    0,    0,  639,    0,    0,    0,  639,  641,  641,
      641,    0,    0,  641,    0,    0,    0,  641,  645,  645,
      645,    0,    0,  645,    0,    0,    0,  645,  646,  646,
      646,    0,    0,  646,    0,    0,    0,  646,  647,  647,
      647,    0,    0,  647,    0,    0,    0,  647,  649,  649,
      649,    0,  649,  649,    0,    0,    0,  649,  650,  650,
      650,    0,    0,  650,    0,    0,    0,  650,  657,  657,
      657,    0,    0,  657,    0,    0,    0,  657,  658,  658,
      658,    0,    0,  658,    0,    0,    0,  658,  659,  659,

      659,    0,  659,  659,    0,    0,    0,  659,  662,    0,
        0,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  663,    0,    0,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      665,  665,  665,    0,    0,  665,  666,  666,    0,    0,
        0,  666,    0,    0,    0,    0,  666,    0,  666,  667,
      667,    0,    0,    0,  667,    0,    0,    0,    0,  667,
        0,  667,  668,  668,    0,    0,    0,  668,    0,    0,
        0,    0,  668,    0,  668,  669,  669,    0,    0,    0,
      669,  670,  670,    0,    0,    0,  670,    0,    0,    0,

        0,  670,    0,  670,  671,  671,    0,    0,    0,  671,
        0,    0,    0,    0,  671,    0,  671,  672,  672,    0,
        0,    0,  672,    0,    0,    0,    0,  672,    0,  672,
      673,  673,    0,    0,    0,  673,  677,    0,    0,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  678,  678,  678,    0,    0,  678,  679,    0,
        0,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  681,    0,    0,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      685,    0,    0,  685,  685,  685,  685,  685,  685,  685,

      685,  685,  685,  685,  685,  685,  686,    0,    0,    0,
      686,    0,    0,    0,    0,  686,    0,  686,  689,    0,
        0,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  690,  690,  690,    0,    0,  690,
      692,    0,    0,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  695,  695,  695,    0,
        0,  695,  696,    0,    0,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  702,    0,
        0,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  703,    0,    0,  703,  703,  703,

      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      704,    0,    0,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  706,    0,    0,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  707,    0,    0,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  708,  708,
      708,    0,    0,  708,    0,    0,    0,  708,  714,  714,
      714,    0,    0,  714,    0,    0,    0,  714,  715,    0,
        0,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  717,    0,    0,  717,  717,  717,

      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      720,    0,    0,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  723,    0,    0,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  728,    0,    0,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  729,    0,
        0,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  731,    0,    0,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      732,    0,    0,  732,  732,  732,  732,  732,  732,  732,

      732,  732,  732,  732,  732,  732,  733,  733,  733,    0,
        0,  733,    0,    0,    0,  733,  735,    0,    0,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  740,    0,    0,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  741,    0,
        0,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  742,    0,    0,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      748,    0,    0,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  753,    0,    0,  753,

      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  754,    0,    0,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  755,    0,
        0,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  757,    0,    0,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      758,  758,  758,    0,    0,    0,    0,    0,    0,  758,
      759,    0,    0,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  761,    0,    0,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,

      761,  761,  764,  764,  764,    0,    0,    0,    0,    0,
        0,  764,  765,    0,    0,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  768,    0,
        0,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  769,    0,    0,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      770,  770,  770,    0,    0,  770,    0,    0,    0,  770,
      771,    0,    0,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  777,  777,  777,    0,
        0,  777,    0,    0,    0,  777,  778,  778,  778,    0,

        0,  778,    0,    0,    0,  778,  780,  780,  780,    0,
        0,  780,    0,    0,    0,  780,  781,  781,  781,    0,
        0,  781,    0,    0,    0,  781,  782,  782,  782,    0,
        0,  782,    0,    0,    0,  782,  783,  783,  783,    0,
        0,  783,    0,    0,    0,  783,  786,  786,  786,    0,
        0,  786,    0,    0,    0,  786,  787,  787,  787,    0,
        0,  787,    0,    0,    0,  787,  788,  788,  788,    0,
        0,  788,    0,    0,    0,  788,  789,  789,  789,    0,
        0,  789,    0,    0,    0,  789,  790,  790,  790,    0,
      790,  790,    0,    0,    0,  790,  793,  793,  793,    0,

        0,  793,    0,    0,    0,  793,  794,  794,  794,    0,
        0,  794,    0,    0,    0,  794,  796,  796,  796,    0,
        0,  796,    0,    0,    0,  796,  798,  798,    0,    0,
        0,  798,    0,    0,    0,    0,  798,    0,  798,  799,
      799,    0,    0,    0,  799,    0,    0,    0,    0,  799,
        0,  799,  801,  801,    0,    0,    0,  801,  802,    0,
        0,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  803,    0,    0,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      805,    0,    0,  805,  805,  805,  805,  805,  805,  805,

      805,  805,  805,  805,  805,  805,  806,  806,  806,    0,
        0,  806,  807,    0,    0,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  808,    0,
        0,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  809,    0,    0,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      812,  812,  812,    0,    0,  812,  813,    0,    0,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  814,    0,    0,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  817,    0,

        0,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  818,  818,  818,    0,    0,  818,
        0,    0,    0,  818,  823,  823,  823,    0,    0,  823,
      824,    0,    0,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  827,    0,    0,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  829,  829,  829,    0,    0,  829,    0,    0,
        0,  829,  831,    0,    0,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  834,    0,
        0,  834,  834,  834,  834,  834,  834,  834,  834,  834,

      834,  834,  834,  834,  836,    0,    0,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      837,    0,    0,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  838,    0,    0,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  849,    0,    0,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  855,  855,
      855,    0,    0,  855,    0,    0,    0,  855,  857,    0,
        0,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  860,    0,    0,  860,  860,  860,

      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      861,  861,  861,    0,    0,  861,    0,    0,    0,  861,
      863,    0,    0,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  868,    0,    0,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  874,  874,  874,    0,    0,  874,    0,    0,
        0,  874,  875,    0,    0,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  876,    0,
        0,  876,  876,  876,  876,  876,  876,  876,  876,  876,
      876,  876,  876,  876,  880,  880,  880,    0,    0,  880,

        0,    0,    0,  880,  881,    0,    0,  881,  881,  881,
      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
      885,  885,  885,    0,    0,  885,    0,    0,    0,  885,
      891,  891,  891,    0,    0,  891,    0,    0,    0,  891,
      892,    0,    0,  892,  892,  892,  892,  892,  892,  892,
      892,  892,  892,  892,  892,  892,  911,  911,  911,    0,
        0,  911,    0,    0,    0,  911,  919,  919,  919,    0,
        0,  919,  920,    0,    0,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  932,  932,
      932,    0,    0,  932,    0,    0,    0,  932,  939,    0,

        0,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  940,    0,    0,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      946,  946,  946,    0,    0,  946,    0,    0,    0,  946,
      954,    0,    0,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  958,  958,  958,    0,
        0,  958,    0,    0,    0,  958,  971,    0,    0,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  991,    0,    0,  991,  992,    0,  992,  992,
      993,    0,  993,  993,  994,    0,  994,  994,  995,    0,

      995,  995,  996,    0,  996,  996,  997,    0,  997,  997,
      998,    0,  998,  998,  999,    0,  999,  999, 1000,    0,
     1000, 1001,    0, 1001, 1001, 1002,    0, 1002, 1002, 1003,
        0, 1003, 1003, 1004,    0, 1004, 1004, 1005,    0, 1005,
     1005, 1006,    0, 1006, 1006, 1007,    0, 1007, 1007, 1008,
        0, 1008, 1008, 1009,    0, 1009, 1009, 1010,    0, 1010,
     1010, 1011,    0, 1011, 1011, 1012,    0, 1012, 1012, 1013,
        0, 1013, 1013, 1014,    0, 1014, 1014, 1015,    0, 1015,
     1015, 1016,    0, 1016, 1016, 1017,    0, 1017, 1017, 1018,
        0,    0, 1018, 1019,    0, 1019, 1019, 1020,    0, 1020,

     1020, 1021,    0, 1021, 1021, 1022,    0, 1022, 1022, 1023,
        0, 1023, 1023, 1024,    0, 1024, 1024, 1025,    0, 1025,
     1025, 1026,    0, 1026, 1026, 1027,    0, 1027, 1027, 1028,
        0, 1028, 1028, 1029,    0, 1029, 1029, 1030,    0, 1030,
     1030, 1031,    0, 1031, 1031, 1032,    0, 1032, 1032, 1033,
        0, 1033, 1033, 1034,    0, 1034, 1034, 1035,    0, 1035,
     1035, 1036,    0, 1036, 1036, 1037,    0, 1037, 1037, 1038,
        0, 1038, 1038, 1039,    0, 1039, 1039, 1040,    0, 1040,
     1040, 1041,    0, 1041, 1041, 1042,    0, 1042, 1042, 1043,
        0, 1043, 1043, 1044,    0, 1044, 1044, 1045,    0, 1045,

     1045, 1046,    0, 1046, 1046, 1047,    0, 1047, 1047, 1048,
        0, 1048, 1048, 1049,    0, 1049, 1049, 1050,    0, 1050,
     1050, 1051,    0, 1051, 1051, 1052,    0, 1052, 1052, 1053,
        0, 1053, 1053, 1054,    0,    0, 1054, 1055,    0, 1055,
     1055, 1056,    0, 1056, 1056, 1057,    0, 1057, 1057, 1058,
        0, 1058, 1058, 1059,    0, 1059, 1059, 1060,    0, 1060,
     1060, 1061,    0, 1061, 1061, 1062,    0, 1062, 1062, 1063,
        0, 1063, 1063, 1064,    0, 1064, 1064, 1065,    0, 1065,
     1065, 1066,    0, 1066, 1066, 1067,    0, 1067, 1067, 1068,
        0, 1068, 1068, 1069,    0, 1069, 1069, 1070,    0, 1070,

     1070, 1071,    0, 1071, 1071, 1072,    0, 1072, 1072, 1073,
        0, 1073, 1073, 1074,    0, 1074, 1074, 1075,    0, 1075,
     1075, 1076,    0, 1076, 1076, 1077,    0, 1077, 1077, 1078,
        0, 1078, 1078, 1079,    0, 1079, 1079, 1080,    0, 1080,
     1080, 1081,    0, 1081, 1081, 1082,    0, 1082, 1082, 1083,
        0, 1083, 1083, 1084,    0, 1084, 1084, 1085,    0, 1085,
     1085, 1086,    0, 1086, 1086, 1087,    0, 1087, 1087, 1088,
        0, 1088, 1088, 1089,    0, 1089, 1089, 1090,    0, 1090,
     1090, 1091,    0, 1091, 1091, 1092,    0, 1092, 1092, 1093,
        0, 1093, 1093, 1094,    0, 1094, 1094, 1095,    0, 1095,

     1095, 1096,    0, 1096, 1096, 1097,    0, 1097, 1097, 1098,
        0, 1098, 1098, 1099,    0, 1099, 1099, 1100,    0, 1100,
     1100, 1101,    0, 1101, 1101, 1102,    0, 1102, 1102, 1103,
        0, 1103, 1103, 1104,    0, 1104, 1104, 1105,    0, 1105,
     1105, 1106,    0, 1106, 1106, 1107,    0, 1107, 1107, 1108,
        0, 1108, 1108, 1109,    0, 1109, 1109, 1110,    0, 1110,
     1110, 1111,    0, 1111, 1111, 1112,    0, 1112, 1112, 1113,
        0, 1113, 1113, 1114,    0, 1114, 1114, 1115,    0, 1115,
     1115, 1116,    0, 1116, 1116, 1117,    0, 1117, 1117, 1118,
        0, 1118, 1118, 1119,    0, 1119, 1119, 1120,    0, 1120,

     1120, 1121,    0, 1121, 1121, 1122,    0, 1122, 1122, 1123,
        0, 1123, 1123, 1124,    0, 1124, 1124, 1125,    0, 1125,
     1125, 1126,    0, 1126, 1126, 1127,    0, 1127, 1127, 1128,
        0, 1128, 1128, 1129,    0, 1129, 1129, 1130,    0, 1130,
     1130, 1131,    0, 1131, 1131, 1132,    0, 1132, 1132, 1133,
        0, 1133, 1133, 1134,    0, 1134, 1134, 1135,    0, 1135,
     1135, 1136,    0, 1136, 1136, 1137,    0, 1137, 1137, 1138,
        0, 1138, 1138, 1139,    0, 1139, 1139, 1140,    0, 1140,
     1140, 1141,    0, 1141, 1141, 1142,    0, 1142, 1142, 1143,
        0, 1143, 1143, 1144,    0, 1144, 1144, 1145,    0, 1145,

     1145, 1146,    0, 1146, 1146, 1147,    0, 1147, 1147, 1148,
        0, 1148, 1148, 1149,    0, 1149, 1149, 1150,    0, 1150,
     1150, 1151,    0, 1151, 1151, 1152,    0, 1152, 1152, 1153,
        0, 1153, 1153, 1154,    0, 1154, 1154, 1155,    0, 1155,
     1155, 1156,    0, 1156, 1156, 1157,    0, 1157, 1157, 1158,
        0, 1158, 1158, 1159,    0, 1159, 1159, 1160,    0, 1160,
     1160, 1161,    0, 1161, 1161, 1162,    0, 1162, 1162, 1163,
        0, 1163, 1163, 1164,    0, 1164, 1164, 1165,    0, 1165,
     1165, 1166,    0, 1166, 1166, 1167,    0, 1167, 1167, 1168,
        0, 1168, 1168, 1169,    0, 1169, 1169, 1170,    0, 1170,

     1170, 1171,    0, 1171, 1171, 1172,    0, 1172, 1172, 1173,
        0, 1173, 1173, 1174,    0, 1174, 1174, 1175,    0, 1175,
     1175, 1176,    0, 1176, 1176, 1177,    0, 1177, 1177, 1178,
        0, 1178, 1178, 1179,    0, 1179, 1179, 1180,    0, 1180,
     1180, 1181,    0, 1181, 1181, 1182,    0, 1182, 1182, 1183,
        0, 1183, 1183, 1184,    0, 1184, 1184, 1185,    0, 1185,
     1185, 1186,    0, 1186, 1186, 1187,    0, 1187, 1187, 1188,
        0, 1188, 1188, 1189,    0, 1189, 1189, 1190,    0, 1190,
     1190, 1191,    0, 1191, 1191, 1192,    0, 1192, 1192, 1193,
        0, 1193, 1193, 1194,    0, 1194, 1194, 1195,    0, 1195,

     1195, 1196,    0, 1196, 1196, 1197,    0, 1197, 1197, 1198,
        0, 1198, 1198, 1199,    0, 1199, 1199, 1200,    0, 1200,
     1200, 1201,    0, 1201, 1201, 1202,    0, 1202, 1202, 1203,
        0, 1203, 1203, 1204,    0, 1204, 1204, 1205,    0, 1205,
     1205, 1206,    0, 1206, 1206, 1207,    0, 1207, 1207,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[17] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
/*
 *
 * CS-252 
 * shell.l: lexical analyzer for shell
 * You have to extend it.
 *
 */
#line 11 "shell.l"

#include <cstring>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include "y.tab.hh"
/*
#include <string.h>
#include "y.tab.h"

////////////  Start added code ///////////


extern “C” char * read_line();

int mygetc(FILE * f) {
  static char *p;
  char ch;

     if (!isatty(0)) {
  // stdin is not a tty. Call real getc
    return getc(f);
  }

  // stdin is a tty. Call our read_line.
  if (p==NULL || *p == 0) {
    char * s = read_line();
    p = s;
  }

  ch = *p;
  p++;

  return ch;
}

#undef getc
#define getc(f) mygetc(f)

/////////// End added code ///////////*/

#define MAX_INCLUDE_DEPTH 10
YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

static  void yyunput (int c,char *buf_ptr  );

char *getenv(const char *name);

void myunputc(int c) {
  unput(c);
}

void remove_character(char* s, char c) {
  int j, n = strlen(s);
  int escaped = 0; 

  for (int i = j = 0; i < n; i++) {
    if (s[i] != c || escaped) {
      s[j++] = s[i];
      escaped = 0;
    } else {
      escaped = 1;
    }
  }   

  s[j] = '\0';
}

/*void source(char *s) {
  FILE *yyin = fopen(s, "r");

  if (!yyin) {
    fprintf( stderr, "No File" );
  } else {
    yypush_buffer_state( yy_create_buffer( yyin, YY_BUF_SIZE ) );
    yyparse();
    fclose(yyin);
  }
}*/

void removeStartAndEnd(char* s) {
  int j, n = strlen(s);

  s[0] = '\0';
  for (int i = 1; i < n; i++) {
    s[i - 1] = s[i];
  }   
  s[n - 2] = '\0';
}

#line 2363 "lex.yy.cc"
#line 2364 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 106 "shell.l"


#line 2584 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 991 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6450 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 108 "shell.l"
{
  return NEWLINE;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 112 "shell.l"
{
  /* Discard spaces and tabs */
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 116 "shell.l"
{
  return GREAT;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 120 "shell.l"
{
  return GREATGREAT;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 124 "shell.l"
{
  return LESS;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 128 "shell.l"
{
  return PIPE;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 132 "shell.l"
{
  return AMPERSAND;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 136 "shell.l"
{
  return TWOGREAT;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 140 "shell.l"
{
  return GREATAMPERSAND;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 144 "shell.l"
{
  return GREATGREATAMPERSAND;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 148 "shell.l"
{ 
  remove_character(yytext, '$');
  remove_character(yytext, '(');
  remove_character(yytext, ')');

  int pin[2], pout[2];
  pipe(pin); pipe(pout);

  int ret = fork();
  if (ret == 0) {
      close(pin[1]);
      close(pout[0]);

      dup2(pin[0], 0);
      close(pin[0]);

      dup2(pout[1], 1);
      close(pout[1]);
      
      // Execute shell executable
      execvp("/proc/self/exe", NULL);
      perror("Error in Child Process");
      exit(1);
  } else if (ret < 0) {
      perror("Error Forking Child");
      exit(1);
  }

  close(pin[0]);
  close(pout[1]);

  write(pin[1], strcat(yytext, "\n"), strlen(yytext) + 1);
  write(pin[1], "exit\n", 6);
  close(pin[1]);
  
  int size = 1024;
  char* buffer = (char*) malloc(sizeof(char) * size);
  char* iterator = buffer;
  int n = read(pout[0], iterator++, 1);
  while (n > 0) {
    n = read(pout[0], iterator++, 1);
    if (strlen(buffer) == size) {
      size = size * 2;
      realloc(buffer, size);
    }
  }

  *iterator = '\0';
  close(pout[0]);

  for (int i = strlen(buffer) - 1; i >= 0; i--) {
    char c = ' ';
    if (buffer[i] == '\n') {
      myunputc(' ');
    } else {
      myunputc(buffer[i]);
    }
  }
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 208 "shell.l"
{ 
  remove_character(yytext, '\\');
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 214 "shell.l"
{
  remove_character(yytext, '$');
  remove_character(yytext, '{');
  remove_character(yytext, '}');

  int size = 1024;
  char* buffer = (char*) malloc(sizeof(char) * size);
  buffer = getenv(yytext);

  if(buffer) {
    for (int i = strlen(buffer) - 1; i >= 0; i--) {
      myunputc(buffer[i]);
    }
  }

  free(buffer);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 232 "shell.l"
{
  removeStartAndEnd(yytext);
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 238 "shell.l"
{
  /* Assume that file names have only alpha chars */
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 243 "shell.l"
ECHO;
	YY_BREAK
#line 2838 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 991 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 991 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 990);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 243 "shell.l"
