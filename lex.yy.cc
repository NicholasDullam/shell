#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 16
#define YY_END_OF_BUFFER 17
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[991] =
    {   0,
        0,    0,   17,   15,    2,    1,   15,   16,    7,   15,
        5,    3,   12,   16,    6,   15,   15,    0,    0,   12,
       15,    0,   15,    0,    0,    0,    0,   12,    0,    8,
        9,    4,   12,   12,   12,   12,   12,   15,    0,   14,
        0,    0,   14,   15,    0,   14,    0,    0,   14,    0,
        0,    0,    0,    0,    0,   12,   12,   12,    0,    0,
        0,    0,   12,   10,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   14,   14,   14,   14,   14,
       14,   14,    0,    0,   14,    0,   14,    0,    0,    0,
        0,   11,   12,   11,    0,    0,    0,    0,   11,    0,

       12,   12,   12,   11,   12,   12,   12,   12,   12,    0,
        0,    0,    0,   12,   13,   13,    0,    0,    0,    0,
       13,    0,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   14,   14,   14,   14,   14,
       14,    0,    0,   14,    0,   11,   14,   11,   14,    0,
       14,   14,   11,    0,   11,   11,   11,   11,   11,   11,
       11,    0,   14,    0,   11,   11,   11,   11,   11,    0,
        0,    0,    0,   11,   12,   12,   12,   12,   11,   12,

       12,   11,   11,   11,   11,   11,   12,   12,   12,   11,
       12,   12,   12,   12,   12,   12,   12,    0,    0,   14,
        0,   13,   14,   13,    0,    0,   14,    0,   13,    0,
        0,    0,    0,    0,   12,   13,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   14,   14,   14,   14,   14,   11,   11,
       11,   11,   14,   14,   14,   11,   14,   11,   11,   11,
       11,    0,    0,   14,    0,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   12,   12,   12,   11,
       12,   12,   12,   12,   11,   12,   12,   11,   11,   11,
       11,   11,   12,   12,   12,   11,   12,   12,   12,   12,
       11,   12,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   12,   12,   12,   11,   12,   12,   12,
       12,   12,   12,   14,   14,   14,   13,   14,   14,   13,
        0,    0,   14,    0,   13,    0,    0,    0,    0,   11,
       12,   13,   11,   13,    0,    0,    0,    0,   11,   13,
        0,   12,   12,   12,   11,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   11,   12,   12,   12,   12,   12,   12,   11,
       11,   11,   14,   14,   14,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       12,   12,   12,   11,   12,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   12,   12,   12,   11,
       12,   12,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   12,   12,

       12,   11,   12,   12,   12,   12,   11,   12,   14,   14,
       14,   13,   14,    0,    0,   14,    0,   11,   13,   14,
       11,   13,   14,    0,   14,   14,   11,   13,    0,   11,
       11,   11,   11,   11,   11,   11,   11,   11,    0,   14,
        0,   11,   13,   11,   11,   11,   11,   11,    0,    0,
        0,    0,   11,   12,   13,   12,   12,   12,   11,   12,
       12,   12,   11,   11,   11,   11,   11,   11,   12,   12,
       12,   11,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   11,   12,   12,
       11,   11,   11,   11,   11,   12,   12,   12,   11,   12,
       12,   12,   12,   12,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   12,   12,   12,   12,   11,
       12,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   14,   14,   14,   13,   14,   14,   11,   13,   11,
       11,   11,   11,   14,   14,   14,   11,   13,   14,   11,
       11,   11,   11,   11,    0,    0,   14,    0,   11,   13,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   12,   12,   12,   11,   12,   12,   12,   12,
       12,   11,   12,   12,   12,   11,   11,   11,   11,   11,
       11,   12,   12,   12,   11,   12,   12,   12,   12,   12,
       11,   12,   12,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   12,   12,   12,   11,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   11,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   11,
       12,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   12,   12,   12,   11,   12,   11,   11,   11,

       11,   14,   14,   14,   11,   13,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   12,   12,   12,   11,   12,   12,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   12,   12,   12,   11,   12,   12,   12,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   12,   12,
       12,   11,   12,   12,   12,   12,   12,   11,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   11,   12,
       12,   12,   11,   11,   11,   11,   11,   11,   12,   12,

       12,   11,   12,   12,   12,   12,   12,   12,   12,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   12,
       12,   12,   12,   11,   12,   12,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   12,   12,
       12,   11,   12,   12,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,   12,   12,
       11,   12,   12,   11,   11,   11,   11,   11,   11,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    6,    1,    7,    1,    8,
        9,    1,    1,    1,    1,    1,    1,    1,    1,   10,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   11,
        1,   12,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   13,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   14,   15,   16,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[17] =
    {   0,
        1,    2,    2,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[1224] =
    {   0,
        0,    0,  605,   16, 5952, 5952,   32,   44,   54,  590,
        0,   44,   67,    0,    0,    0,    0,  593,    0,    0,
       83,  592,   99,  115,  588,  128,  138,  151,  161,    0,
        0,  587,    0,  174,  585,    0,  190,    0,  587,  206,
        0,  581,   14,    0,  583,    0,    0,  576,  222,  232,
      238,  248,  574,  258,  264,  274,  287,  300,  310,  565,
      323,  336,  349,    0,  365,  381,  397,  572,  410,  423,
        0,  436,  571,    0,    0,  452,    0,  468,  568,   30,
       49,    0,  478,   56,  484,  490,    0,  567,  565,  496,
        0,  502,  512,   60,  564,   57,  522,    0,  528,  534,

        0,  544,  563,  554,  564,  577,  590,  603,    0,  558,
      549,  613,    0,  626,  556,  546,  639,  114,  652,  665,
      553,  678,    0,  691,  548,  704,    0,    0,  720,    0,
      547,    0,    0,    0,    0,  546,    0,  736,  746,    0,
        0,  759,  544,    0,    0,    0,  772,  543,  782,    0,
      795,  538,    0,    0,  808,  821,  837,  850,  537,    0,
      860,  536,  112,  863,    0,  869,  875,  881,  887,  113,
      893,  899,  905,  911,  917,  927,  933,  534,  943,  122,
      123,  533,    0,    0,    0,    0,  953,  528,    0,  959,
      526,  969,  975,  522,    0,  985,  995, 1005, 1015, 1025,

     1035, 1045, 1055,  521,    0, 1065,    0, 1075,  516, 1085,
        0, 1095,    0, 1108,    0, 1121,    0, 1131,  129, 1144,
     1157,  515, 1170,  130,  514,  134, 1183,    0,  512, 1196,
     1212,   54, 1225,  511, 1241,    0, 1254, 1267, 1280, 1293,
      506, 1306, 1319, 1332, 1345,  505,  504, 1361, 1377, 1393,
      502, 1406, 1419, 1432,  501, 1442,    0, 1452,    0, 1465,
      496,    0,    0, 1475, 1488,    0,  495,    0,    0,    0,
     1498,  489,    0, 1508, 1514, 1520, 1526, 1532, 1538, 1544,
     1550, 1556,  484, 1562,    0, 1568, 1574, 1580, 1586,  483,
        0, 1592,  144,    0, 1598, 1604, 1610, 1616,  478,    0,

     1622,    0, 1632,  477,    0, 1638,  472, 1644,    0, 1654,
        0,  471,    0,    0, 1664,    0, 1674,    0, 1684,  467,
        0, 1694,    0, 1704,  466, 1714,    0, 1724, 1734, 1744,
     1754,    0,    0, 1764,  464,    0,    0, 1774, 1784, 1794,
     1804,  463,  462,    0, 1814,  447,    0,    0, 1824, 1834,
     1844, 1854, 1864, 1874, 1887, 1900,  446, 1913, 1926,    0,
     1939, 1951, 1964, 1977,  431, 1993,  131, 2006,  430, 2022,
     2038,    0, 2051,  139,  427, 2063, 2076,    0, 2089,  426,
     2105,    0, 2121,  425, 2137, 2153,    0, 2166, 2179, 2192,
     2205,  424,  423, 2218,    0, 2231,  422, 2244,    0, 2257,

      405,    0,    0,    0,    0,  404,    0,    0,    0, 2270,
      401,    0,    0, 2283, 2299, 2315, 2331,  400, 2344, 2360,
     2370, 2380,    0, 2393,  396,    0,    0,    0,    0, 2403,
     2413, 2423, 2433, 2443, 2453, 2463, 2473, 2483,  395, 2493,
     2499,    0, 2505, 2511, 2517, 2523, 2529, 2535, 2541, 2547,
      393, 2553, 2563, 2569,  392, 2579,  391, 2589,    0,  376,
     2595, 2605, 2615, 2625,  375, 2635, 2645,  360,    0, 2655,
     2665, 2675, 2685, 2695,  359,  356, 2705, 2715,  355, 2725,
        0, 2735, 2745, 2755,  353,    0,  352, 2765, 2775,  351,
        0, 2785,  350, 2795,    0,  349,  348, 2805,  343,    0,

        0,  342,  340, 2815, 2825, 2835, 2845,  339, 2855, 2868,
     2881,  338, 2894, 2907, 2919, 2932, 2945, 2958,  337, 2971,
     2984, 2996, 3009,    0, 3022, 3035, 3048,  335, 3061, 3077,
     3090,  330,    0, 3106,    0, 3119, 3132,    0,  329,    0,
        0, 3145,  328,    0, 3158,  327,    0,    0, 3174,  153,
     3187,  326,    0, 3203,    0, 3219, 3235,  325, 3251, 3267,
        0, 3283,    0, 3299,  324,    0, 3315,    0, 3331, 3347,
      323,    0,    0,    0, 3360, 3373, 3386, 3399,  322,    0,
     3415,  317,    0,    0, 3428, 3441,  316,    0,    0, 3454,
     3467, 3480, 3493,  314,  313,    0,    0,  312,    0,    0,

     3506, 3516, 3526, 3536,  311, 3546,    0, 3556, 3566, 3576,
     3586, 3596,  310,    0, 3606,    0, 3616,  309, 3626,    0,
        0, 3636,  304,    0, 3646, 3652, 3658,  303, 3664,    0,
     3674,  299,    0,    0, 3684, 3694, 3704,  298, 3714,    0,
     3724,  296,    0,    0, 3734, 3744, 3754,    0, 3764, 3774,
      295,    0,    0,  294,    0,    0, 3784, 3794, 3804,  291,
      290, 3814, 3827, 3840,  286, 3853, 3866, 3879,    0, 3892,
     3905, 3918,    0,  285, 3931,    0, 3944,  283, 3957, 3970,
     3983,  282,    0,    0, 3996, 4008,    0, 4021, 4034,  281,
     4047, 4060,  278,    0,    0, 4076,    0, 4089,  277,    0,

        0, 4102, 4118, 4134,  276, 4150, 4166,    0,    0,    0,
      274,    0,    0,    0, 4182,    0, 4198,  273,    0, 4214,
        0,    0, 4230,  268,    0,    0,    0, 4246, 4262,  267,
     4278, 4294,    0,    0, 4310,  266,    0,    0,    0, 4326,
     4342, 4358,  263,    0,    0,    0,    0, 4374,  258,    0,
        0,    0, 4390, 4403, 4416, 4429, 4442,  257, 4455, 4468,
     4481,  252,    0,    0, 4497,    0,  251, 4513, 4529,    0,
     4542,    0,    0,  250,    0,    0, 4555, 4565, 4575, 4585,
     4595, 4605, 4615,  248,    0, 4625, 4635, 4645, 4655, 4665,
      247,  242, 4675, 4685,  241, 4695,    0, 4705, 4718,    0,

        0, 4731, 4744, 4757, 4770,  237, 4783, 4796, 4809, 4822,
      236,  234, 4838, 4851,  233,    0, 4867,    0,  232, 4880,
        0,  226,  225, 4896,    0,  221, 4912,    0,    0,    0,
     4928,  220,    0, 4944,    0, 4960, 4976, 4992,  218,    0,
        0,    0,    0,    0,  217,    0,    0,    0, 5008,    0,
        0,  216,    0,    0,    0,    0, 5024,  201,    0, 5040,
        0,    0, 5056,  200,    0,    0,    0, 5072,    0,    0,
      186,    0,    0,    0, 5088, 5104,  185,    0,    0,    0,
     5120,    0,  184,    0,    0,    0,    0,  169,    0,    0,
        0, 5136,    0,    0,  168,    0,    0,    0,    0,    0,

      165,    0,    0,    0,    0,    0,  164,    0,    0,    0,
     5149,  163,    0,    0, 5159,    0,  162,    0,    0, 5175,
        0,    0,  160,    0,    0,    0,    0,    0,  155,    0,
        0,    0,    0,    0,  150,    0,    0,    0, 5191, 5207,
        0,    0,  149,    0,    0,    0,    0,    0,  146,    0,
        0,    0,    0, 5223,   94,    0,    0,    0,    0,    0,
       93,    0,    0,    0,    0,    0,   78,    0,    0,    0,
     5239,    0,    0,   77,    0,    0,    0,    0,    0,   63,
        0,    0,    0,    0,    0,   47,    0,    0,    0, 5952,
       19, 5255, 5258, 5261, 5264, 5267, 5270, 5273, 5276, 5279,

     5282, 5285, 5288, 5291, 5294, 5297, 5300, 5303, 5306, 5309,
     5312, 5315, 5318, 5321, 5324, 5327, 5330, 5333, 5336, 5339,
     5342, 5345, 5348, 5351, 5354, 5357, 5360, 5363, 5366, 5369,
     5372, 5375, 5378, 5381, 5384, 5387, 5390, 5393, 5396, 5399,
     5402, 5405, 5408, 5411, 5414, 5417, 5420, 5423, 5426, 5429,
     5432, 5435, 5438, 5441, 5444, 5447, 5450, 5453, 5456, 5459,
     5462, 5465, 5468, 5471, 5474, 5477, 5480, 5483, 5486, 5489,
     5492, 5495, 5498, 5501, 5504, 5507, 5510, 5513, 5516, 5519,
     5522, 5525, 5528, 5531, 5534, 5537, 5540, 5543, 5546, 5549,
     5552, 5555, 5558, 5561, 5564, 5567, 5570, 5573, 5576, 5579,

     5582, 5585, 5588, 5591, 5594, 5597, 5600, 5603, 5606, 5609,
     5612, 5615, 5618, 5621, 5624, 5627, 5630, 5633, 5636, 5639,
     5642, 5645, 5648, 5651, 5654, 5657, 5660, 5663, 5666, 5669,
     5672, 5675, 5678, 5681, 5684, 5687, 5690, 5693, 5696, 5699,
     5702, 5705, 5708, 5711, 5714, 5717, 5720, 5723, 5726, 5729,
     5732, 5735, 5738, 5741, 5744, 5747, 5750, 5753, 5756, 5759,
     5762, 5765, 5768, 5771, 5774, 5777, 5780, 5783, 5786, 5789,
     5792, 5795, 5798, 5801, 5804, 5807, 5810, 5813, 5816, 5819,
     5822, 5825, 5828, 5831, 5834, 5837, 5840, 5843, 5846, 5849,
     5852, 5855, 5858, 5861, 5864, 5867, 5870, 5873, 5876, 5879,

     5882, 5885, 5888, 5891, 5894, 5897, 5900, 5903, 5906, 5909,
     5912, 5915, 5918, 5921, 5924, 5927, 5930, 5933, 5936, 5939,
     5942, 5945, 5948
    } ;

static const flex_int16_t yy_def[1224] =
    {   0,
      990,    1,  990,  990,  990,  990,  990,  991,  991,    4,
        9,    9,  990,    9,    9,    4,    7,    9,    9,   13,
      990,  992,  990,   21,   24,    7,  993,   13,  994,    9,
        9,    9,   13,  990,   28,   28,  990,   21,  992,  990,
       24,   24,  995,   21,  992,   40,   24,   24,   40,  996,
       23,  997,  998,  999,  997, 1000,   34,   37, 1001, 1002,
     1003, 1001, 1004,    9,  990,  990,   65,   67,  990, 1005,
       37,  990,   58,   58,   37,  990,   40,   76,   78,  995,
      995,   49, 1006, 1007, 1008, 1006,   49,   55,  998,  999,
       55, 1009, 1000, 1010,   86, 1007, 1011,   86, 1012, 1013,

       93, 1014,   93, 1015, 1016,   66,   69,   72,   58,   62,
     1002, 1003,   62, 1004,   62, 1002, 1017, 1018, 1019, 1017,
      120, 1020,  114, 1021,  114, 1022,  114,   65,  990,   67,
       67,   69,   65,  129,   67,   67,   69,  129, 1023,  107,
       69,  990,  107,  107,   69,   93, 1014,   93, 1016,   69,
      990,  107,  107,   69, 1024,  990,   49,  156,  158,   49,
     1025,   86, 1007, 1026,   86, 1012, 1027, 1028, 1029, 1007,
     1026, 1029, 1030, 1031, 1032, 1033, 1032,  177, 1034, 1035,
     1035,   86,  171,   86,  166,  166, 1036,  166,  166, 1037,
     1038, 1039, 1037,  177,   93, 1040, 1041, 1040, 1042, 1043,

     1044, 1034, 1045,  202,  202, 1046,  149, 1047,  149, 1046,
      149, 1048,  107,  142,  107,  151,  107, 1049, 1050, 1051,
     1049,  221, 1052, 1050,  221, 1050, 1051,  221,  221, 1053,
      990, 1054, 1055,  231,  990,  231, 1056, 1057, 1056, 1058,
      239, 1059, 1060, 1061, 1060,  245,  245,  990,  990,  248,
      250,  990, 1048,  252,  198, 1062,  198, 1043,  252,  214,
      254,  254,  252, 1063,  107,  260,  107,  107,  265,  149,
     1047,  149,  149, 1064, 1065, 1064, 1066, 1066, 1067, 1068,
     1067, 1068,  276, 1065,  276, 1069, 1070, 1069, 1071,  288,
      288, 1072, 1073,  284, 1072, 1074, 1074, 1075,  297,  297,

     1076,  288, 1071,  288,  288, 1077,  198, 1062,  198, 1078,
      258,  198,  308,  198, 1078,  258, 1079,  315, 1080,  315,
      315, 1081,  258, 1082,  258, 1081,  258, 1083, 1084, 1083,
     1085,  149,  315, 1086,  315,  315,  326, 1087, 1088, 1089,
     1088,  341,  341,  258, 1090,  258,  326,  258, 1091, 1092,
     1093, 1092, 1094, 1095, 1096, 1095,  356, 1097, 1097,  359,
     1098, 1099, 1100, 1098,  364,  990, 1101, 1102,  366,  990,
      990,  366, 1103, 1101,  364, 1099, 1104,  364, 1105,  364,
      990,  371,  990,  371,  990,  990,  371, 1106, 1107, 1106,
     1108,  390,  390, 1107,  390, 1108,  390, 1109,  396, 1110,

      396,  396,  396,  371,  383,  371,  386,  371,  396, 1111,
      396,  396,  396, 1112,  990,  990,  415,  417,  990,  416,
     1113, 1093,  419,  352,  422,  422,  419,  352,  422, 1114,
     1115, 1114, 1116, 1117, 1118, 1119, 1120, 1119,  438, 1121,
     1121,  441, 1122, 1123, 1122, 1124, 1125, 1126, 1127, 1126,
      450, 1128, 1129, 1128,  454, 1130,  450, 1127,  450,  450,
     1131, 1115, 1131, 1132,  438, 1116, 1133,  466,  466, 1134,
     1135, 1136, 1137, 1136,  474,  474, 1117, 1120,  477, 1134,
      477, 1138, 1132, 1133,  483,  483,  474, 1130, 1139,  488,
      488, 1140,  474, 1141,  474,  474,  474, 1142,  438,  478,

      438,  474,  438, 1143, 1144, 1143, 1140,  506, 1145, 1146,
     1145,  511, 1147, 1148, 1149, 1150, 1148, 1151,  517, 1152,
     1153, 1149, 1154,  522, 1150, 1154, 1155,  526, 1156,  990,
     1157,  530,  530,  990,  530, 1158, 1158,  537,  517,  525,
      517, 1151,  517,  542, 1159,  542,  542,  542,  990, 1160,
     1161,  549,  530,  990,  549,  990,  990,  556,  990,  990,
      556,  990,  534,  990,  534,  534,  990,  534,  990,  990,
      569,  567,  569,  569, 1162, 1163, 1162, 1164,  577,  556,
      990,  556,  560,  556, 1164, 1165,  585,  585,  585, 1166,
     1167, 1165, 1167,  593,  593,  569,  570,  569,  569,  569,

     1168, 1169, 1168, 1170,  603, 1169,  603, 1171, 1170, 1172,
     1171, 1173,  611,  611, 1174,  609, 1175,  609, 1174,  609,
      609, 1175,  609,  609, 1176, 1177, 1176,  627, 1178,  619,
     1179,  619,  619,  619, 1180, 1173, 1180,  637, 1181,  619,
     1179,  619,  619,  619, 1182, 1183, 1184,  622, 1184, 1181,
      649,  650,  641,  650,  650,  650, 1185, 1186, 1185,  659,
      659, 1187, 1188, 1187,  664, 1189, 1189, 1190,  667, 1191,
     1190, 1191,  672,  664, 1188,  664, 1192,  664, 1193, 1192,
     1194,  680,  680,  680, 1195, 1196,  675, 1195, 1197,  688,
     1197, 1198,  691,  691,  691,  990,  680, 1194,  680,  680,

      680, 1199,  990,  990,  703,  990,  990,  703,  703,  704,
      703,  706,  707,  703,  990,  706,  990,  706,  706,  990,
      706,  707,  990,  707,  720,  707,  707,  990,  990,  728,
      990,  990,  728,  706,  990,  706,  706,  720,  706,  990,
      990,  990,  741,  741,  741,  741,  707,  990,  707,  720,
      707,  707,  990, 1200, 1201, 1200, 1202,  756, 1203, 1202,
     1204,  760,  760,  760,  990,  704,  765,  990,  990,  765,
     1205,  707,  723,  707,  707,  707, 1206, 1207, 1206, 1208,
     1209, 1208, 1210,  782,  782, 1211, 1212, 1213, 1214, 1213,
      790,  790, 1209, 1215,  793, 1211,  793, 1216, 1216,  799,

      799, 1217, 1218, 1217, 1219,  804, 1220, 1221, 1222, 1221,
      810,  810,  990, 1223,  813,  813,  990,  813,  810, 1222,
      810,  810,  810,  990,  704,  824,  990,  707,  824,  768,
      990,  768,  768,  990,  768,  990,  990,  990,  837,  837,
      837,  837,  769,  723,  769,  834,  769,  769,  990,  827,
      831,  827,  827,  837,  827,  817,  990,  817,  817,  990,
      817,  837,  990,  837,  837,  837,  837,  990,  707,  723,
      707,  837,  707,  707,  990,  990,  875,  860,  875,  875,
      990,  704,  881,  769,  881,  881,  704,  881,  768,  769,
      881,  990,  768,  831,  768,  768,  834,  768,  769,  723,

      769,  834,  769,  769,  769,  723,  769,  769,  769,  796,
     1214,  796,  796,  796, 1219,  820,  915,  915,  915,  990,
      834,  838,  834,  834,  834,  834,  827,  831,  827,  827,
      837,  827,  834,  838,  834,  834,  834,  834,  990,  990,
      707,  723,  707,  837,  707,  707,  837,  838,  837,  837,
      837,  837,  860,  990,  860,  860,  860,  860,  881,  704,
      881,  768,  769,  881,  768,  831,  768,  768,  834,  768,
      990,  837,  838,  837,  837,  837,  837,  769,  723,  769,
      834,  769,  769,  834,  838,  834,  834,  834,  834,    0,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,

      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,

      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,

      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990
    } ;

static const flex_int16_t yy_nxt[5969] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,    4,    4,   10,
       11,   12,   13,   14,   15,   14,   16,   39,   81,   19,
       17,   18,   19,   16,   16,   16,   19,   19,   20,   19,
       19,   19,   21,   39,   81,   22,   23,   24,   25,   21,
       21,   21,   25,   25,   21,   25,   25,   25,   26,   18,
       31,   27,   39,   81,  971,   32,   28,   29,   26,   18,
      167,  167,  373,   89,  168,  168,   28,   33,  181,  374,
      940,   34,   35,   36,   33,   33,   33,   36,   36,   37,
       36,   36,   36,   38,  939,  920,   39,   40,   41,   42,
       38,   38,   38,   42,   42,   38,   42,   42,   42,   44,

      892,  868,   45,   46,   47,   48,   44,   44,   44,   48,
       48,   44,   48,   48,   48,   42,  167,  167,  223,   49,
      168,  168,   50,   42,   42,   89,   89,   42,   25,  224,
      181,  181,   51,  223,  223,   25,   25,   25,  223,  373,
       25,   53,   54,   55,  224,  224,  374,  373,  167,  224,
       56,   36,  168,  939,  374,   57,  849,  971,   36,   36,
       36,  373,  836,   58,   60,   61,   62,  971,  374,  807,
      787,  940,  940,   63,   65,  920,  892,   22,   66,   67,
       68,   65,   65,   65,   68,   68,   69,   68,   68,   68,
       71,  892,  753,  849,   72,   73,   74,   71,   71,   71,

       74,   74,   75,   74,   74,   74,   76,  939,  740,   45,
       77,   78,   79,   76,   76,   76,   79,   79,   76,   79,
       79,   79,   79,  836,  940,  939,   82,  920,  715,   79,
       79,   79,  544,  544,   79,   84,   85,   86,   48,  544,
      696,  544,   87,  544,  674,   48,   48,   48,  646,  472,
       48,   89,   90,   91,  472,  629,   92,  849,  892,  771,
       93,   96,   97,   98,  754,  849,   99,   89,   90,   91,
      868,  100,   92,  836,  562,  849,   93,   89,  102,  103,
      836,  715,  104,  715,  807,  702,  105,   68,  514,  807,
      674,  106,  674,  674,   68,   68,   68,  339,  339,  107,

       74,  645,  323,  787,  108,  318,  787,   74,   74,   74,
      288,  646,  109,  111,  112,  113,  646,  629,  605,  753,
      399,  399,  114,  771,  715,  115,  118,  119,  120,  754,
      753,  740,  715,  381,  702,  514,  514,  696,  121,  111,
      112,  113,  674,  122,  514,  509,  207,  323,  114,  472,
      323,  115,  111,  124,  125,  472,  472,  472,  338,  472,
      471,  126,  646,  472,  127,  128,  472,  629,   39,  129,
      130,  131,  128,  128,  128,  131,  131,  132,  131,  131,
      131,  133,  323,  186,   45,  134,  135,  136,  133,  133,
      133,  136,  136,  137,  136,  136,  136,  131,  186,  175,

      186,  138,  323,  435,  139,  131,  131,  418,  590,  140,
      141,  562,  590,   39,  142,  143,  144,  141,  141,  141,
      144,  144,  145,  144,  144,  144,   53,  147,  148,  388,
      388,  388,  562,  514,  514,  149,  150,  381,  514,   22,
      151,  152,  153,  150,  150,  150,  153,  153,  154,  153,
      153,  153,  156,  509,  482,   39,  157,  158,  159,  156,
      156,  156,  159,  159,  156,  159,  159,  159,  159,  339,
      339,  471,  160,  482,  471,  161,  159,  159,  307,  307,
      159,  163,  164,  165,  447,  306,  166,  170,  171,  172,
      447,  283,  173,  163,  164,  165,  349,  174,  166,   96,

       97,   98,  264,  435,   99,   89,  176,  177,  307,  418,
      178,  243,  243,  388,  179,   89,  102,  103,  381,  218,
      104,  218,  218,  349,  105,  170,  183,  184,  338,  175,
      185,  163,  187,  188,   94,  306,  189,  191,  192,  193,
      162,  175,  194,  162,  159,  264,  195,   96,  197,  198,
      201,  264,  199,  131,  131,  242,  200,   89,  203,  204,
      218,  116,  205,  110,  116,  110,  206,   89,  208,  209,
      201,  162,  210,   94,   88,  159,  211,  136,  155,  131,
      116,  212,   94,   42,  136,  136,  136,   43,   42,  213,
      144,   43,   70,   64,  214,   42,   43,  144,  144,  144,

       27,   30,  215,  153,  990,  990,  990,  216,  990,  990,
      153,  153,  153,  990,  990,  217,  118,  119,  120,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  121,  111,
      124,  125,  990,  990,  990,  990,  990,  990,  126,  990,
      990,  127,  219,  220,  221,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  222,  226,  227,  228,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  229,  219,  220,
      221,  990,  230,  990,  990,  990,  990,  990,  990,  990,
      222,  232,  233,  234,  990,  990,  990,  990,  990,  990,
      235,  990,  990,  236,  118,  238,  239,  990,  990,  990,

      990,  990,  990,  240,  990,  990,  241,  111,  244,  245,
      990,  990,  990,  990,  990,  990,  246,  990,  990,  247,
      248,  990,  990,   45,  249,  250,  251,  248,  248,  248,
      251,  251,  252,  251,  251,  251,  251,  990,  990,  990,
      253,  990,  990,  251,  251,  251,  990,  990,  254,   84,
      256,  257,  990,  990,  990,  990,  990,  990,  258,  259,
      990,  990,   45,  260,  261,  262,  259,  259,  259,  262,
      262,  263,  262,  262,  262,   96,  197,  198,  990,  990,
      199,  990,  990,  990,  200,   89,  208,  209,  990,  990,
      210,  990,  990,  990,  211,  265,  990,  990,   45,  266,

      267,  268,  265,  265,  265,  268,  268,  269,  268,  268,
      268,   53,  271,  272,  990,  990,  990,  990,  990,  990,
      273,  156,  990,  990,   39,  157,  158,  159,  156,  156,
      156,  159,  159,  156,  159,  159,  159,   76,  990,  990,
      990,   77,  990,  990,   76,   76,   76,  990,  990,   76,
      159,  990,  990,  990,  160,  990,  990,  161,  159,  159,
      990,  990,  159,   84,  275,  276,  170,  171,  172,  990,
      990,  173,  163,  187,  188,  990,  990,  189,  163,  278,
      990,  990,  990,  279,  163,  281,  990,  990,  990,  282,
      163,  284,  285,  990,  990,  286,  170,  171,  172,  990,

      990,  173,  163,  284,  285,  990,  287,  286,  163,  289,
      290,  990,  990,  291,  293,  294,  295,  990,  990,  296,
       89,  176,  177,  990,  990,  178,  990,  990,  990,  179,
       96,  298,  299,  990,  990,  300,   89,  176,  177,  990,
      301,  178,  990,  990,  990,  179,   89,  203,  204,  990,
      990,  205,  990,  990,  990,  206,  170,  303,  304,  990,
      990,  305,   89,   90,   91,  990,  990,   92,  990,  990,
      990,   93,   96,   97,   98,  990,  990,   99,   89,   90,
       91,  990,  100,   92,  990,  990,  990,   93,  163,  308,
      309,  990,  990,  310,  990,  990,  990,  311,  170,  313,

      314,  990,  990,  315,  990,  990,  990,  316,  163,  308,
      309,  990,  317,  310,  990,  990,  990,  311,  163,  319,
      320,  990,  990,  321,  990,  990,  990,  322,  163,  324,
      325,  990,  990,  326,  990,  990,  990,  327,  191,  329,
      330,  990,  990,  331,  990,  990,  990,  332,   89,  203,
      204,  990,  990,  205,  990,  990,  990,  206,   96,  334,
      335,  990,  990,  336,  990,  990,  990,  337,   89,  340,
      341,  990,  990,  342,  990,  990,  990,  343,   96,  345,
      346,  990,  990,  347,  990,  990,  990,  348,   89,  340,
      341,  990,  990,  342,  990,  990,  990,  343,   45,  253,

      250,  990,  990,  990,  990,  990,  990,  254,  262,  990,
      990,  990,  350,  990,  990,  262,  262,  262,  990,  990,
      351,  268,  990,  990,  990,  352,  990,  990,  268,  268,
      268,  990,  990,  353,  219,  220,  221,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  222,  226,  355,  356,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  357,
      219,  220,  221,  990,  230,  990,  990,  990,  990,  990,
      990,  990,  222,  219,  359,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  360,  226,  355,  356,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  357,  362,

      363,  364,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  365,  366,  990,  990,  367,  368,  369,  366,  366,
      370,  366,  366,  366,  371,  366,  366,  372,  376,  377,
      378,  990,  990,  379,  990,  990,  990,  990,  990,  990,
      380,  382,  990,  990,  367,  383,  384,  382,  382,  385,
      382,  382,  382,  386,  382,  382,  387,  219,  389,  390,
      990,  990,  990,  990,  990,  990,  391,  990,  990,  392,
      226,  394,  395,  990,  990,  990,  990,  990,  990,  396,
      990,  990,  397,  219,  389,  390,  990,  398,  990,  990,
      990,  990,  391,  990,  990,  392,  219,  400,  401,  990,

      990,  990,  990,  990,  990,  402,  990,  990,  403,  232,
      405,  406,  990,  990,  990,  990,  990,  990,  407,  990,
      990,  408,  111,  244,  245,  990,  990,  990,  990,  990,
      990,  246,  990,  990,  247,  118,  410,  411,  990,  990,
      990,  990,  990,  990,  412,  990,  990,  413,  111,  244,
      245,  990,  414,  990,  990,  990,  990,  246,  990,  990,
      247,  415,  990,  990,   39,  416,  417,  418,  415,  415,
      415,  418,  418,  419,  418,  418,  418,  248,  990,  990,
       45,  249,  250,  251,  248,  248,  248,  251,  251,  252,
      251,  251,  251,  418,  990,  990,  990,  420,  990,  990,

      421,  418,  418,  990,  990,  422,  423,  990,  990,   39,
      424,  425,  426,  423,  423,  423,  426,  426,  427,  426,
      426,  426,   45,  253,  250,  990,  990,  990,  990,  990,
      990,  254,  426,  990,  990,  990,  428,  990,  990,  426,
      426,  426,  990,  990,  429,  170,  431,  432,  990,  990,
      433,  990,  990,  990,  434,  163,  324,  325,  990,  990,
      326,  990,  990,  990,  327,  259,  990,  990,  990,  260,
      990,  990,  259,  259,  259,  990,  990,  263,   84,  437,
      438,  990,  990,  990,  990,  990,  990,  439,  141,  990,
      990,  990,  142,  990,  990,  141,  141,  141,  990,  990,

      145,   96,  345,  346,  990,  990,  347,  990,  990,  990,
      348,  163,  284,  285,  990,  990,  286,  170,  171,  172,
      990,  990,  173,  163,  284,  285,  990,  287,  286,  163,
      278,  990,  990,  990,  279,  163,  278,  990,  990,  990,
      279,  163,  441,  990,  990,  990,  442,  163,  281,  990,
      990,  990,  282,  163,  441,  990,  990,  990,  442,  163,
      281,  990,  990,  990,  282,  170,  171,  172,  990,  990,
      173,  163,  289,  290,  990,  990,  291,  293,  444,  445,
      990,  990,  446,  163,  289,  290,  990,  990,  291,  170,
      303,  304,  990,  990,  305,  163,  164,  165,  990,  990,

      166,  163,  164,  165,  990,  174,  166,  163,  187,  188,
      990,  990,  189,  163,  187,  188,  990,  990,  189,  170,
      449,  450,  990,  990,  451,  191,  453,  454,  990,  990,
      455,  990,  990,  990,  456,  170,  303,  304,  990,  990,
      305,  293,  458,  459,  990,  990,  460,  170,  431,  432,
      990,  990,  433,  990,  990,  990,  434,  163,  319,  320,
      990,  990,  321,  990,  990,  990,  322,  163,  319,  320,
      990,  990,  321,  990,  990,  990,  322,  293,  462,  463,
      990,  990,  464,  990,  990,  990,  465,  170,  467,  468,
      990,  990,  469,  990,  990,  990,  470,  163,  473,  474,

      990,  990,  475,  990,  990,  990,  476,  170,  478,  479,
      990,  990,  480,  990,  990,  990,  481,  163,  473,  474,
      990,  990,  475,  990,  990,  990,  476,   89,  102,  103,
      990,  990,  104,  990,  990,  990,  105,   96,  197,  198,
      990,  990,  199,  990,  990,  990,  200,   89,  102,  103,
      990,  201,  104,  990,  990,  990,  105,   89,  203,  204,
      990,  990,  205,  990,  990,  990,  206,  170,  484,  485,
      990,  990,  486,  990,  990,  990,  487,  191,  489,  490,
      990,  990,  491,  990,  990,  990,  492,   89,  340,  341,
      990,  990,  342,  990,  990,  990,  343,   96,  494,  495,

      990,  990,  496,  990,  990,  990,  497,   89,  340,  341,
      990,  498,  342,  990,  990,  990,  343,  170,  500,  501,
      990,  990,  502,  990,  990,  990,  503,  191,  505,  506,
      990,  990,  507,  990,  990,  990,  508,   45,  350,  261,
      990,  990,  990,  990,  990,  990,  351,   39,  428,  425,
      990,  990,  990,  990,  990,  990,  429,   45,  350,  261,
      990,  990,  990,  990,  990,  990,  351,   39,  214,  143,
      990,  990,  990,  990,  990,  990,  215,  219,  510,  511,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  512,
      226,  355,  356,  990,  990,  990,  990,  990,  990,  990,

      990,  990,  357,  219,  510,  511,  990,  513,  990,  990,
      990,  990,  990,  990,  990,  512,  219,  359,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  360,  219,
      359,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  360,  515,  516,  517,  990,  990,  518,  990,  990,
      990,  990,  990,  990,  519,  520,  990,  990,  990,  521,
      990,  990,  990,  990,  990,  990,  522,  524,  525,  526,
      990,  990,  527,  990,  990,  990,  990,  990,  990,  528,
      515,  516,  517,  990,  529,  518,  990,  990,  990,  990,
      990,  990,  519,  366,  990,  990,  367,  368,  369,  366,

      366,  370,  366,  366,  366,  371,  366,  366,  372,  376,
      377,  378,  990,  990,  379,  990,  990,  990,  990,  990,
      990,  380,  530,  990,  990,  367,  531,  532,  530,  530,
      533,  530,  530,  530,  534,  530,  530,  535,  382,  990,
      990,  367,  383,  384,  382,  382,  385,  382,  382,  382,
      386,  382,  382,  387,  367,  990,  990,  990,  990,  537,
      990,  990,  990,  990,  990,  990,  538,  520,  990,  990,
      990,  521,  990,  990,  990,  990,  990,  990,  522,  524,
      540,  541,  990,  990,  542,  990,  990,  990,  990,  990,
      990,  543,  515,  545,  546,  990,  990,  547,  990,  990,

      990,  990,  990,  990,  548,  549,  990,  990,  550,  551,
      552,  549,  549,  553,  549,  549,  549,  554,  549,  549,
      555,  556,  990,  990,  376,  557,  558,  556,  556,  559,
      556,  556,  556,  560,  556,  556,  561,  563,  990,  990,
      367,  564,  565,  563,  563,  566,  563,  563,  563,  567,
      563,  563,  568,  569,  990,  990,  367,  570,  571,  569,
      569,  572,  569,  569,  569,  573,  569,  569,  574,  219,
      389,  390,  990,  990,  990,  990,  990,  990,  391,  990,
      990,  392,  226,  576,  577,  990,  990,  990,  990,  990,
      990,  578,  990,  990,  579,  219,  389,  390,  990,  398,

      990,  990,  990,  990,  391,  990,  990,  392,  219,  400,
      401,  990,  990,  990,  990,  990,  990,  402,  990,  990,
      403,  226,  576,  577,  990,  990,  990,  990,  990,  990,
      578,  990,  990,  579,  219,  400,  401,  990,  990,  990,
      990,  990,  990,  402,  990,  990,  403,  362,  581,  582,
      990,  990,  990,  990,  990,  990,  583,  990,  990,  584,
      226,  586,  587,  990,  990,  990,  990,  990,  990,  588,
      990,  990,  589,  226,  592,  593,  990,  990,  990,  990,
      990,  990,  594,  990,  990,  595,  232,  597,  598,  990,
      990,  990,  990,  990,  990,  599,  990,  990,  600,  415,

      990,  990,   39,  416,  417,  418,  415,  415,  415,  418,
      418,  419,  418,  418,  418,  248,  990,  990,   45,  249,
      250,  251,  248,  248,  248,  251,  251,  252,  251,  251,
      251,  418,  990,  990,  990,  420,  990,  990,  421,  418,
      418,  990,  990,  422,  423,  990,  990,   39,  424,  425,
      426,  423,  423,  423,  426,  426,  427,  426,  426,  426,
      251,  990,  990,  990,  253,  990,  990,  251,  251,  251,
      990,  990,  254,   84,  602,  603,  990,  990,  990,  990,
      990,  990,  604,   39,  428,  425,  990,  990,  990,  990,
      990,  990,  429,  259,  990,  990,  990,  260,  990,  990,

      259,  259,  259,  990,  990,  263,  163,  606,  607,  990,
      990,  608,  990,  990,  990,  609,  170,  431,  432,  990,
      990,  433,  990,  990,  990,  434,  163,  606,  607,  990,
      610,  608,  990,  990,  990,  609,  163,  612,  613,  990,
      990,  614,  990,  990,  990,  615,  163,  617,  618,  990,
      990,  619,  990,  990,  990,  620,   84,  622,  623,  990,
      990,  990,  990,  990,  990,  624,  163,  324,  325,  990,
      990,  326,  990,  990,  990,  327,  170,  478,  479,  990,
      990,  480,  990,  990,  990,  481,  163,  324,  325,  990,
      482,  326,  990,  990,  990,  327,  163,  441,  990,  990,

      990,  442,  163,  441,  990,  990,  990,  442,  163,  284,
      285,  990,  990,  286,  170,  171,  172,  990,  990,  173,
      163,  284,  285,  990,  287,  286,  163,  289,  290,  990,
      990,  291,  293,  626,  627,  990,  990,  628,  163,  187,
      188,  990,  990,  189,  170,  303,  304,  990,  990,  305,
      163,  187,  188,  990,  306,  189,   89,  176,  177,  990,
      990,  178,  990,  990,  990,  179,   96,  298,  299,  990,
      990,  300,   89,  176,  177,  990,  301,  178,  990,  990,
      990,  179,   89,  203,  204,  990,  990,  205,  990,  990,
      990,  206,  170,  303,  304,  990,  990,  305,  163,  308,

      309,  990,  990,  310,  990,  990,  990,  311,  170,  431,
      432,  990,  990,  433,  990,  990,  990,  434,  163,  308,
      309,  990,  317,  310,  990,  990,  990,  311,  163,  319,
      320,  990,  990,  321,  990,  990,  990,  322,  163,  612,
      613,  990,  990,  614,  990,  990,  990,  615,  170,  467,
      468,  990,  990,  469,  990,  990,  990,  470,  163,  631,
      632,  990,  990,  633,  990,  990,  990,  634,  293,  636,
      637,  990,  990,  638,  990,  990,  990,  639,  163,  473,
      474,  990,  990,  475,  990,  990,  990,  476,  170,  641,
      642,  990,  990,  643,  990,  990,  990,  644,  163,  473,

      474,  990,  645,  475,  990,  990,  990,  476,  163,  617,
      618,  990,  990,  619,  990,  990,  990,  620,  170,  478,
      479,  990,  990,  480,  990,  990,  990,  481,  163,  631,
      632,  990,  990,  633,  990,  990,  990,  634,  293,  648,
      649,  990,  990,  650,  990,  990,  990,  651,  163,  319,
      320,  990,  990,  321,  990,  990,  990,  322,  170,  467,
      468,  990,  990,  469,  990,  990,  990,  470,   89,  203,
      204,  990,  990,  205,  990,  990,  990,  206,   96,  334,
      335,  990,  990,  336,  990,  990,  990,  337,   89,  340,
      341,  990,  990,  342,  990,  990,  990,  343,  170,  653,

      654,  990,  990,  655,  990,  990,  990,  656,  191,  658,
      659,  990,  990,  660,  990,  990,  990,  661,   89,  208,
      209,  990,  990,  210,  990,  990,  990,  211,   96,  345,
      346,  990,  990,  347,  990,  990,  990,  348,   89,  208,
      209,  990,  349,  210,  990,  990,  990,  211,   89,  340,
      341,  990,  990,  342,  990,  990,  990,  343,  219,  510,
      511,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      512,  226,  355,  356,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  357,  219,  510,  511,  990,  513,  990,
      990,  990,  990,  990,  990,  990,  512,  362,  663,  664,

      990,  990,  990,  990,  990,  990,  990,  990,  990,  665,
      515,  516,  517,  990,  990,  518,  990,  990,  990,  990,
      990,  990,  519,  520,  990,  990,  990,  521,  990,  990,
      990,  990,  990,  990,  522,  524,  525,  526,  990,  990,
      527,  990,  990,  990,  990,  990,  990,  528,  515,  516,
      517,  990,  529,  518,  990,  990,  990,  990,  990,  990,
      519,  515,  545,  546,  990,  990,  547,  990,  990,  990,
      990,  990,  990,  548,  515,  667,  990,  990,  990,  668,
      990,  990,  990,  990,  990,  990,  669,  515,  671,  990,
      990,  990,  672,  990,  990,  990,  990,  990,  990,  673,

      520,  990,  990,  990,  521,  990,  990,  990,  990,  990,
      990,  522,  515,  675,  676,  990,  990,  677,  990,  990,
      990,  990,  990,  990,  678,  524,  525,  526,  990,  990,
      527,  990,  990,  990,  990,  990,  990,  528,  515,  675,
      676,  990,  679,  677,  990,  990,  990,  990,  990,  990,
      678,  515,  681,  682,  990,  990,  683,  990,  990,  990,
      990,  990,  990,  684,  686,  687,  688,  990,  990,  689,
      990,  990,  990,  990,  990,  990,  690,  530,  990,  990,
      367,  531,  532,  530,  530,  533,  530,  530,  530,  534,
      530,  530,  535,  376,  692,  693,  990,  990,  694,  990,

      990,  990,  990,  990,  990,  695,  563,  990,  990,  367,
      564,  565,  563,  563,  566,  563,  563,  563,  567,  563,
      563,  568,  367,  990,  990,  990,  990,  537,  990,  990,
      990,  990,  990,  990,  538,  367,  990,  990,  990,  990,
      537,  990,  990,  990,  990,  990,  990,  538,  515,  545,
      546,  990,  990,  547,  990,  990,  990,  990,  990,  990,
      548,  524,  698,  699,  990,  990,  700,  990,  990,  990,
      990,  990,  990,  701,  366,  990,  990,  367,  368,  369,
      366,  366,  370,  366,  366,  366,  371,  366,  366,  372,
      376,  377,  378,  990,  990,  379,  990,  990,  990,  990,

      990,  990,  380,  382,  990,  990,  367,  383,  384,  382,
      382,  385,  382,  382,  382,  386,  382,  382,  387,  703,
      990,  990,  515,  704,  705,  703,  703,  706,  703,  703,
      703,  707,  703,  703,  708,  709,  990,  990,  524,  710,
      711,  709,  709,  712,  709,  709,  709,  713,  709,  709,
      714,  716,  990,  990,  515,  717,  718,  716,  716,  719,
      716,  716,  716,  720,  716,  716,  721,  722,  990,  990,
      515,  723,  724,  722,  722,  725,  722,  722,  722,  726,
      722,  722,  727,  728,  990,  990,  550,  729,  730,  728,
      728,  731,  728,  728,  728,  732,  728,  728,  733,  734,

      990,  990,  376,  735,  736,  734,  734,  737,  734,  734,
      734,  738,  734,  734,  739,  741,  990,  990,  367,  742,
      743,  741,  741,  744,  741,  741,  741,  745,  741,  741,
      746,  569,  990,  990,  367,  570,  571,  569,  569,  572,
      569,  569,  569,  573,  569,  569,  574,  747,  990,  990,
      376,  748,  749,  747,  747,  750,  747,  747,  747,  751,
      747,  747,  752,  219,  755,  756,  990,  990,  990,  990,
      990,  990,  757,  990,  990,  758,  226,  576,  577,  990,
      990,  990,  990,  990,  990,  578,  990,  990,  579,  219,
      755,  756,  990,  759,  990,  990,  990,  990,  757,  990,

      990,  758,  219,  761,  762,  990,  990,  990,  990,  990,
      990,  763,  990,  990,  764,  765,  990,  990,  524,  766,
      767,  765,  765,  768,  765,  765,  765,  769,  765,  765,
      770,  219,  761,  762,  990,  990,  990,  990,  990,  990,
      763,  990,  990,  764,  226,  586,  587,  990,  990,  990,
      990,  990,  990,  588,  990,  990,  589,  362,  773,  774,
      990,  990,  990,  990,  990,  990,  775,  990,  990,  776,
      219,  400,  401,  990,  990,  990,  990,  990,  990,  402,
      990,  990,  403,  226,  586,  587,  990,  990,  990,  990,
      990,  990,  588,  990,  990,  589,  219,  400,  401,  990,

      590,  990,  990,  990,  990,  402,  990,  990,  403,  163,
      606,  607,  990,  990,  608,  990,  990,  990,  609,  170,
      431,  432,  990,  990,  433,  990,  990,  990,  434,  163,
      606,  607,  990,  610,  608,  990,  990,  990,  609,  163,
      617,  618,  990,  990,  619,  990,  990,  990,  620,  170,
      431,  432,  990,  990,  433,  990,  990,  990,  434,  163,
      612,  613,  990,  990,  614,  990,  990,  990,  615,  163,
      617,  618,  990,  990,  619,  990,  990,  990,  620,  293,
      778,  779,  990,  990,  780,  990,  990,  990,  781,  163,
      612,  613,  990,  990,  614,  990,  990,  990,  615,  170,

      467,  468,  990,  990,  469,  990,  990,  990,  470,  163,
      631,  632,  990,  990,  633,  990,  990,  990,  634,  170,
      478,  479,  990,  990,  480,  990,  990,  990,  481,  163,
      631,  632,  990,  990,  633,  990,  990,  990,  634,  170,
      478,  479,  990,  990,  480,  990,  990,  990,  481,  163,
      289,  290,  990,  990,  291,  170,  303,  304,  990,  990,
      305,  163,  289,  290,  990,  447,  291,  293,  783,  784,
      990,  990,  785,  990,  990,  990,  786,  170,  641,  642,
      990,  990,  643,  990,  990,  990,  644,  163,  319,  320,
      990,  990,  321,  990,  990,  990,  322,  170,  467,  468,

      990,  990,  469,  990,  990,  990,  470,  163,  319,  320,
      990,  471,  321,  990,  990,  990,  322,  163,  473,  474,
      990,  990,  475,  990,  990,  990,  476,  170,  641,  642,
      990,  990,  643,  990,  990,  990,  644,  293,  789,  790,
      990,  990,  791,  990,  990,  990,  792,  293,  794,  795,
      990,  990,  796,  990,  990,  990,  797,  163,  324,  325,
      990,  990,  326,  990,  990,  990,  327,  163,  324,  325,
      990,  482,  326,  990,  990,  990,  327,  163,  473,  474,
      990,  990,  475,  990,  990,  990,  476,   89,  340,  341,
      990,  990,  342,  990,  990,  990,  343,   96,  494,  495,

      990,  990,  496,  990,  990,  990,  497,   89,  340,  341,
      990,  498,  342,  990,  990,  990,  343,  515,  675,  676,
      990,  990,  677,  990,  990,  990,  990,  990,  990,  678,
      524,  525,  526,  990,  990,  527,  990,  990,  990,  990,
      990,  990,  528,  515,  675,  676,  990,  679,  677,  990,
      990,  990,  990,  990,  990,  678,  515,  667,  990,  990,
      990,  668,  990,  990,  990,  990,  990,  990,  669,  515,
      667,  990,  990,  990,  668,  990,  990,  990,  990,  990,
      990,  669,  515,  799,  990,  990,  990,  800,  990,  990,
      990,  990,  990,  990,  801,  515,  671,  990,  990,  990,

      672,  990,  990,  990,  990,  990,  990,  673,  515,  799,
      990,  990,  990,  800,  990,  990,  990,  990,  990,  990,
      801,  515,  671,  990,  990,  990,  672,  990,  990,  990,
      990,  990,  990,  673,  524,  525,  526,  990,  990,  527,
      990,  990,  990,  990,  990,  990,  528,  515,  681,  682,
      990,  990,  683,  990,  990,  990,  990,  990,  990,  684,
      686,  803,  804,  990,  990,  805,  990,  990,  990,  990,
      990,  990,  806,  515,  681,  682,  990,  990,  683,  990,
      990,  990,  990,  990,  990,  684,  524,  698,  699,  990,
      990,  700,  990,  990,  990,  990,  990,  990,  701,  515,

      516,  517,  990,  990,  518,  990,  990,  990,  990,  990,
      990,  519,  520,  990,  990,  990,  521,  990,  990,  990,
      990,  990,  990,  522,  515,  516,  517,  990,  529,  518,
      990,  990,  990,  990,  990,  990,  519,  515,  545,  546,
      990,  990,  547,  990,  990,  990,  990,  990,  990,  548,
      515,  545,  546,  990,  990,  547,  990,  990,  990,  990,
      990,  990,  548,  524,  809,  810,  990,  990,  811,  990,
      990,  990,  990,  990,  990,  812,  813,  990,  990,  550,
      814,  815,  813,  813,  816,  813,  813,  813,  817,  813,
      813,  818,  524,  698,  699,  990,  990,  700,  990,  990,

      990,  990,  990,  990,  701,  686,  820,  821,  990,  990,
      822,  990,  990,  990,  990,  990,  990,  823,  703,  990,
      990,  515,  704,  705,  703,  703,  706,  703,  703,  703,
      707,  703,  703,  708,  765,  990,  990,  524,  766,  767,
      765,  765,  768,  765,  765,  765,  769,  765,  765,  770,
      716,  990,  990,  515,  717,  718,  716,  716,  719,  716,
      716,  716,  720,  716,  716,  721,  722,  990,  990,  515,
      723,  724,  722,  722,  725,  722,  722,  722,  726,  722,
      722,  727,  824,  990,  990,  686,  825,  826,  824,  824,
      827,  824,  824,  824,  828,  824,  824,  829,  830,  990,

      990,  524,  831,  832,  830,  830,  833,  830,  830,  830,
      834,  830,  830,  835,  837,  990,  990,  515,  838,  839,
      837,  837,  840,  837,  837,  837,  841,  837,  837,  842,
      843,  990,  990,  524,  844,  845,  843,  843,  846,  843,
      843,  843,  847,  843,  843,  848,  382,  990,  990,  367,
      383,  384,  382,  382,  385,  382,  382,  382,  386,  382,
      382,  387,  556,  990,  990,  376,  557,  558,  556,  556,
      559,  556,  556,  556,  560,  556,  556,  561,  563,  990,
      990,  367,  564,  565,  563,  563,  566,  563,  563,  563,
      567,  563,  563,  568,  569,  990,  990,  367,  570,  571,

      569,  569,  572,  569,  569,  569,  573,  569,  569,  574,
      850,  990,  990,  524,  851,  852,  850,  850,  853,  850,
      850,  850,  854,  850,  850,  855,  856,  990,  990,  550,
      857,  858,  856,  856,  859,  856,  856,  856,  860,  856,
      856,  861,  741,  990,  990,  367,  742,  743,  741,  741,
      744,  741,  741,  741,  745,  741,  741,  746,  862,  990,
      990,  376,  863,  864,  862,  862,  865,  862,  862,  862,
      866,  862,  862,  867,  869,  990,  990,  524,  870,  871,
      869,  869,  872,  869,  869,  869,  873,  869,  869,  874,
      875,  990,  990,  550,  876,  877,  875,  875,  878,  875,

      875,  875,  879,  875,  875,  880,  219,  755,  756,  990,
      990,  990,  990,  990,  990,  757,  990,  990,  758,  226,
      576,  577,  990,  990,  990,  990,  990,  990,  578,  990,
      990,  579,  219,  755,  756,  990,  759,  990,  990,  990,
      990,  757,  990,  990,  758,  219,  761,  762,  990,  990,
      990,  990,  990,  990,  763,  990,  990,  764,  362,  882,
      883,  990,  990,  990,  990,  990,  990,  884,  990,  990,
      885,  219,  761,  762,  990,  990,  990,  990,  990,  990,
      763,  990,  990,  764,  226,  586,  587,  990,  990,  990,
      990,  990,  990,  588,  990,  990,  589,  886,  990,  990,

      515,  887,  888,  886,  886,  889,  886,  886,  886,  890,
      886,  886,  891,  893,  990,  990,  515,  894,  895,  893,
      893,  896,  893,  893,  893,  897,  893,  893,  898,  899,
      990,  990,  515,  900,  901,  899,  899,  902,  899,  899,
      899,  903,  899,  899,  904,  362,  906,  907,  990,  990,
      990,  990,  990,  990,  908,  990,  990,  909,  163,  606,
      607,  990,  990,  608,  990,  990,  990,  609,  170,  431,
      432,  990,  990,  433,  990,  990,  990,  434,  163,  606,
      607,  990,  610,  608,  990,  990,  990,  609,  163,  612,
      613,  990,  990,  614,  990,  990,  990,  615,  163,  617,

      618,  990,  990,  619,  990,  990,  990,  620,  163,  612,
      613,  990,  990,  614,  990,  990,  990,  615,  170,  467,
      468,  990,  990,  469,  990,  990,  990,  470,  163,  631,
      632,  990,  990,  633,  990,  990,  990,  634,  293,  911,
      912,  990,  990,  913,  990,  990,  990,  914,  163,  473,
      474,  990,  990,  475,  990,  990,  990,  476,  170,  641,
      642,  990,  990,  643,  990,  990,  990,  644,  163,  473,
      474,  990,  645,  475,  990,  990,  990,  476,  163,  617,
      618,  990,  990,  619,  990,  990,  990,  620,  170,  478,
      479,  990,  990,  480,  990,  990,  990,  481,  163,  631,

      632,  990,  990,  633,  990,  990,  990,  634,  515,  799,
      990,  990,  990,  800,  990,  990,  990,  990,  990,  990,
      801,  515,  799,  990,  990,  990,  800,  990,  990,  990,
      990,  990,  990,  801,  515,  675,  676,  990,  990,  677,
      990,  990,  990,  990,  990,  990,  678,  524,  525,  526,
      990,  990,  527,  990,  990,  990,  990,  990,  990,  528,
      515,  675,  676,  990,  679,  677,  990,  990,  990,  990,
      990,  990,  678,  515,  681,  682,  990,  990,  683,  990,
      990,  990,  990,  990,  990,  684,  686,  916,  917,  990,
      990,  918,  990,  990,  990,  990,  990,  990,  919,  515,

      545,  546,  990,  990,  547,  990,  990,  990,  990,  990,
      990,  548,  524,  698,  699,  990,  990,  700,  990,  990,
      990,  990,  990,  990,  701,  515,  545,  546,  990,  702,
      547,  990,  990,  990,  990,  990,  990,  548,  530,  990,
      990,  367,  531,  532,  530,  530,  533,  530,  530,  530,
      534,  530,  530,  535,  376,  692,  693,  990,  990,  694,
      990,  990,  990,  990,  990,  990,  695,  563,  990,  990,
      367,  564,  565,  563,  563,  566,  563,  563,  563,  567,
      563,  563,  568,  524,  698,  699,  990,  990,  700,  990,
      990,  990,  990,  990,  990,  701,  703,  990,  990,  515,

      704,  705,  703,  703,  706,  703,  703,  703,  707,  703,
      703,  708,  716,  990,  990,  515,  717,  718,  716,  716,
      719,  716,  716,  716,  720,  716,  716,  721,  830,  990,
      990,  524,  831,  832,  830,  830,  833,  830,  830,  830,
      834,  830,  830,  835,  921,  990,  990,  515,  922,  923,
      921,  921,  924,  921,  921,  921,  925,  921,  921,  926,
      927,  990,  990,  686,  928,  929,  927,  927,  930,  927,
      927,  927,  931,  927,  927,  932,  837,  990,  990,  515,
      838,  839,  837,  837,  840,  837,  837,  837,  841,  837,
      837,  842,  933,  990,  990,  524,  934,  935,  933,  933,

      936,  933,  933,  933,  937,  933,  933,  938,  941,  990,
      990,  686,  942,  943,  941,  941,  944,  941,  941,  941,
      945,  941,  941,  946,  734,  990,  990,  376,  735,  736,
      734,  734,  737,  734,  734,  734,  738,  734,  734,  739,
      741,  990,  990,  367,  742,  743,  741,  741,  744,  741,
      741,  741,  745,  741,  741,  746,  947,  990,  990,  524,
      948,  949,  947,  947,  950,  947,  947,  947,  951,  947,
      947,  952,  953,  990,  990,  550,  954,  955,  953,  953,
      956,  953,  953,  953,  957,  953,  953,  958,  569,  990,
      990,  367,  570,  571,  569,  569,  572,  569,  569,  569,

      573,  569,  569,  574,  747,  990,  990,  376,  748,  749,
      747,  747,  750,  747,  747,  747,  751,  747,  747,  752,
      886,  990,  990,  515,  887,  888,  886,  886,  889,  886,
      886,  886,  890,  886,  886,  891,  959,  990,  990,  686,
      960,  961,  959,  959,  962,  959,  959,  959,  963,  959,
      959,  964,  170,  641,  642,  990,  990,  643,  990,  990,
      990,  644,  515,  681,  682,  990,  990,  683,  990,  990,
      990,  990,  990,  990,  684,  965,  990,  990,  686,  966,
      967,  965,  965,  968,  965,  965,  965,  969,  965,  965,
      970,  972,  990,  990,  686,  973,  974,  972,  972,  975,

      972,  972,  972,  976,  972,  972,  977,  978,  990,  990,
      686,  979,  980,  978,  978,  981,  978,  978,  978,  982,
      978,  978,  983,  862,  990,  990,  376,  863,  864,  862,
      862,  865,  862,  862,  862,  866,  862,  862,  867,  984,
      990,  990,  686,  985,  986,  984,  984,  987,  984,  984,
      984,  988,  984,  984,  989,   39,  990,   39,   52,  990,
       52,   59,  990,   59,   80,  990,   80,   83,  990,   83,
       88,  990,   88,   89,  990,   89,   95,  990,   95,  101,
      990,  101,  110,  990,  110,  111,  990,  111,  117,  990,
      117,  123,  990,  123,  146,  990,  146,  162,  990,  162,

      163,  990,  163,  169,  990,  169,  175,  990,  175,  180,
      990,  180,  182,  990,  182,  186,  990,  186,  190,  990,
      190,  196,  990,  196,  202,  990,  202,  207,  990,  207,
      218,  990,  218,  219,  990,  219,  225,  990,  225,  231,
      990,  231,  237,  990,  237,  243,  990,  243,  255,  990,
      255,  270,  990,  270,  274,  990,  274,  169,  990,  169,
      277,  990,  277,  280,  990,  280,  283,  990,  283,  288,
      990,  288,  292,  990,  292,  175,  990,  175,  297,  990,
      297,  202,  990,  202,  180,  990,  180,  302,  990,  302,
       88,  990,   88,   89,  990,   89,   95,  990,   95,  307,

      990,  307,  312,  990,  312,  318,  990,  318,  323,  990,
      323,  328,  990,  328,  333,  990,  333,  339,  990,  339,
      344,  990,  344,  251,  990,  251,  218,  990,  218,  219,
      990,  219,  354,  990,  354,  358,  990,  358,  361,  990,
      361,  367,  990,  367,  375,  990,  375,  388,  990,  388,
      393,  990,  393,  399,  990,  399,  404,  990,  404,  243,
      990,  243,  409,  990,  409,  430,  990,  430,  436,  990,
      436,  283,  990,  283,  169,  990,  169,  277,  990,  277,
      440,  990,  440,  280,  990,  280,  288,  990,  288,  443,
      990,  443,  302,  990,  302,  162,  990,  162,  163,  990,

      163,  186,  990,  186,  448,  990,  448,  452,  990,  452,
      457,  990,  457,  318,  990,  318,  461,  990,  461,  466,
      990,  466,  472,  990,  472,  477,  990,  477,  101,  990,
      101,  196,  990,  196,  202,  990,  202,  483,  990,  483,
      488,  990,  488,  339,  990,  339,  493,  990,  493,  499,
      990,  499,  504,  990,  504,  262,  990,  262,  426,  990,
      426,  144,  990,  144,  509,  990,  509,  354,  990,  354,
      358,  990,  358,  514,  990,  514,  515,  990,  515,  523,
      990,  523,  367,  990,  367,  375,  990,  375,  536,  990,
      536,  539,  990,  539,  544,  990,  544,  388,  990,  388,

      575,  990,  575,  399,  990,  399,  580,  990,  580,  585,
      990,  585,  591,  990,  591,  596,  990,  596,  601,  990,
      601,  605,  990,  605,  430,  990,  430,  611,  990,  611,
      616,  990,  616,  621,  990,  621,  323,  990,  323,  477,
      990,  477,  440,  990,  440,  283,  990,  283,  169,  990,
      169,  288,  990,  288,  625,  990,  625,  186,  990,  186,
      302,  990,  302,  175,  990,  175,  297,  990,  297,  202,
      990,  202,  307,  990,  307,  318,  990,  318,  466,  990,
      466,  630,  990,  630,  635,  990,  635,  472,  990,  472,
      640,  990,  640,  647,  990,  647,  333,  990,  333,  339,

      990,  339,  652,  990,  652,  657,  990,  657,  207,  990,
      207,  344,  990,  344,  509,  990,  509,  354,  990,  354,
      662,  990,  662,  514,  990,  514,  515,  990,  515,  523,
      990,  523,  544,  990,  544,  666,  990,  666,  670,  990,
      670,  674,  990,  674,  680,  990,  680,  685,  990,  685,
      691,  990,  691,  536,  990,  536,  697,  990,  697,  367,
      990,  367,  375,  990,  375,  754,  990,  754,  575,  990,
      575,  760,  990,  760,  585,  990,  585,  772,  990,  772,
      399,  990,  399,  605,  990,  605,  430,  990,  430,  616,
      990,  616,  611,  990,  611,  777,  990,  777,  466,  990,

      466,  630,  990,  630,  477,  990,  477,  288,  990,  288,
      302,  990,  302,  782,  990,  782,  640,  990,  640,  318,
      990,  318,  472,  990,  472,  788,  990,  788,  793,  990,
      793,  323,  990,  323,  339,  990,  339,  493,  990,  493,
      674,  990,  674,  523,  990,  523,  666,  990,  666,  798,
      990,  798,  670,  990,  670,  680,  990,  680,  802,  990,
      802,  697,  990,  697,  514,  990,  514,  515,  990,  515,
      544,  990,  544,  808,  990,  808,  819,  990,  819,  754,
      990,  754,  575,  990,  575,  760,  990,  760,  881,  990,
      881,  585,  990,  585,  905,  990,  905,  605,  990,  605,

      430,  990,  430,  611,  990,  611,  616,  990,  616,  466,
      990,  466,  630,  990,  630,  910,  990,  910,  472,  990,
      472,  640,  990,  640,  477,  990,  477,  798,  990,  798,
      674,  990,  674,  523,  990,  523,  680,  990,  680,  915,
      990,  915,  544,  990,  544,  697,  990,  697,  691,  990,
      691,    3,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990
    } ;

static const flex_int16_t yy_chk[5969] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    4,   43,   43,  991,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    7,   80,   80,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    8,    8,
       12,    8,   81,   81,  986,   12,    8,    8,    9,    9,
       84,   96,  232,   94,   84,   96,    9,   13,   94,  232,
      980,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   21,  974,  967,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   23,

      961,  955,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   24,  163,  170,  118,   24,
      163,  170,   24,   24,   24,  180,  181,   24,   26,  118,
      180,  181,   26,  219,  224,   26,   26,   26,  226,  367,
       26,   27,   27,   27,  219,  224,  367,  374,  293,  226,
       27,   28,  293,  949,  374,   28,  943,  935,   28,   28,
       28,  550,  929,   28,   29,   29,   29,  923,  550,  917,
      912,  907,  901,   29,   34,  895,  888,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       37,  883,  877,  871,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   40,  864,  858,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   49,  852,  845,  839,   49,  832,  826,   49,
       49,   49,  823,  822,   49,   50,   50,   50,   51,  819,
      815,  812,   51,  811,  806,   51,   51,   51,  795,  792,
       51,   52,   52,   52,  791,  784,   52,  774,  767,  762,
       52,   54,   54,   54,  758,  749,   54,   55,   55,   55,
      743,   55,   55,  736,  730,  724,   55,   56,   56,   56,
      718,  711,   56,  705,  699,  693,   56,   57,  690,  682,
      678,   57,  674,  665,   57,   57,   57,  661,  660,   57,

       58,  654,  651,  642,   58,  638,  632,   58,   58,   58,
      628,  623,   58,   59,   59,   59,  618,  613,  605,  598,
      595,  594,   59,  587,  582,   59,   61,   61,   61,  579,
      571,  565,  558,  552,  546,  543,  539,  532,   61,   62,
       62,   62,  528,   62,  519,  512,  508,  503,   62,  502,
      499,   62,   63,   63,   63,  497,  496,  493,  490,  487,
      485,   63,  479,  476,   63,   65,  475,  468,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   66,  465,  460,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   67,  457,  455,

      451,   67,  439,  425,   67,   67,   67,  418,  411,   67,
       69,  406,  401,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   70,   70,   70,  397,
      393,  392,  384,  380,  375,   70,   72,  369,  365,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   76,  357,  346,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   78,  343,
      342,  335,   78,  325,  320,   78,   78,   78,  312,  307,
       78,   83,   83,   83,  304,  299,   83,   85,   85,   85,
      290,  283,   85,   86,   86,   86,  272,   86,   86,   90,

       90,   90,  267,  261,   90,   92,   92,   92,  255,  251,
       92,  247,  246,  241,   92,   93,   93,   93,  234,  229,
       93,  225,  222,  209,   93,   97,   97,   97,  204,  194,
       97,   99,   99,   99,  191,  188,   99,  100,  100,  100,
      182,  178,  100,  162,  159,  152,  100,  102,  102,  102,
      148,  143,  102,  136,  131,  125,  102,  104,  104,  104,
      121,  116,  104,  115,  111,  110,  104,  105,  105,  105,
      103,   95,  105,   89,   88,   79,  105,  106,   73,   68,
       60,  106,   53,   48,  106,  106,  106,   45,   42,  106,
      107,   39,   35,   32,  107,   25,   22,  107,  107,  107,

       18,   10,  107,  108,    3,    0,    0,  108,    0,    0,
      108,  108,  108,    0,    0,  108,  112,  112,  112,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  112,  114,
      114,  114,    0,    0,    0,    0,    0,    0,  114,    0,
        0,  114,  117,  117,  117,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  117,  119,  119,  119,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  119,  120,  120,
      120,    0,  120,    0,    0,    0,    0,    0,    0,    0,
      120,  122,  122,  122,    0,    0,    0,    0,    0,    0,
      122,    0,    0,  122,  124,  124,  124,    0,    0,    0,

        0,    0,    0,  124,    0,    0,  124,  126,  126,  126,
        0,    0,    0,    0,    0,    0,  126,    0,    0,  126,
      129,    0,    0,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  138,    0,    0,    0,
      138,    0,    0,  138,  138,  138,    0,    0,  138,  139,
      139,  139,    0,    0,    0,    0,    0,    0,  139,  142,
        0,    0,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  147,  147,  147,    0,    0,
      147,    0,    0,    0,  147,  149,  149,  149,    0,    0,
      149,    0,    0,    0,  149,  151,    0,    0,  151,  151,

      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  155,  155,  155,    0,    0,    0,    0,    0,    0,
      155,  156,    0,    0,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  157,    0,    0,
        0,  157,    0,    0,  157,  157,  157,    0,    0,  157,
      158,    0,    0,    0,  158,    0,    0,  158,  158,  158,
        0,    0,  158,  161,  161,  161,  164,  164,  164,    0,
        0,  164,  166,  166,  166,    0,    0,  166,  167,  167,
        0,    0,    0,  167,  168,  168,    0,    0,    0,  168,
      169,  169,  169,    0,    0,  169,  171,  171,  171,    0,

        0,  171,  172,  172,  172,    0,  172,  172,  173,  173,
      173,    0,    0,  173,  174,  174,  174,    0,    0,  174,
      175,  175,  175,    0,    0,  175,    0,    0,    0,  175,
      176,  176,  176,    0,    0,  176,  177,  177,  177,    0,
      177,  177,    0,    0,    0,  177,  179,  179,  179,    0,
        0,  179,    0,    0,    0,  179,  187,  187,  187,    0,
        0,  187,  190,  190,  190,    0,    0,  190,    0,    0,
        0,  190,  192,  192,  192,    0,    0,  192,  193,  193,
      193,    0,  193,  193,    0,    0,    0,  193,  196,  196,
      196,    0,    0,  196,    0,    0,    0,  196,  197,  197,

      197,    0,    0,  197,    0,    0,    0,  197,  198,  198,
      198,    0,  198,  198,    0,    0,    0,  198,  199,  199,
      199,    0,    0,  199,    0,    0,    0,  199,  200,  200,
      200,    0,    0,  200,    0,    0,    0,  200,  201,  201,
      201,    0,    0,  201,    0,    0,    0,  201,  202,  202,
      202,    0,    0,  202,    0,    0,    0,  202,  203,  203,
      203,    0,    0,  203,    0,    0,    0,  203,  206,  206,
      206,    0,    0,  206,    0,    0,    0,  206,  208,  208,
      208,    0,    0,  208,    0,    0,    0,  208,  210,  210,
      210,    0,    0,  210,    0,    0,    0,  210,  212,  212,

      212,    0,    0,    0,    0,    0,    0,  212,  214,    0,
        0,    0,  214,    0,    0,  214,  214,  214,    0,    0,
      214,  216,    0,    0,    0,  216,    0,    0,  216,  216,
      216,    0,    0,  216,  218,  218,  218,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  218,  220,  220,  220,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  220,
      221,  221,  221,    0,  221,    0,    0,    0,    0,    0,
        0,    0,  221,  223,  223,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  223,  227,  227,  227,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  227,  230,

      230,  230,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  230,  231,    0,    0,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  233,  233,
      233,    0,    0,  233,    0,    0,    0,    0,    0,    0,
      233,  235,    0,    0,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  237,  237,  237,
        0,    0,    0,    0,    0,    0,  237,    0,    0,  237,
      238,  238,  238,    0,    0,    0,    0,    0,    0,  238,
        0,    0,  238,  239,  239,  239,    0,  239,    0,    0,
        0,    0,  239,    0,    0,  239,  240,  240,  240,    0,

        0,    0,    0,    0,    0,  240,    0,    0,  240,  242,
      242,  242,    0,    0,    0,    0,    0,    0,  242,    0,
        0,  242,  243,  243,  243,    0,    0,    0,    0,    0,
        0,  243,    0,    0,  243,  244,  244,  244,    0,    0,
        0,    0,    0,    0,  244,    0,    0,  244,  245,  245,
      245,    0,  245,    0,    0,    0,    0,  245,    0,    0,
      245,  248,    0,    0,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  249,    0,    0,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  250,    0,    0,    0,  250,    0,    0,

      250,  250,  250,    0,    0,  250,  252,    0,    0,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  253,  253,  253,    0,    0,    0,    0,    0,
        0,  253,  254,    0,    0,    0,  254,    0,    0,  254,
      254,  254,    0,    0,  254,  256,  256,  256,    0,    0,
      256,    0,    0,    0,  256,  258,  258,  258,    0,    0,
      258,    0,    0,    0,  258,  260,    0,    0,    0,  260,
        0,    0,  260,  260,  260,    0,    0,  260,  264,  264,
      264,    0,    0,    0,    0,    0,    0,  264,  265,    0,
        0,    0,  265,    0,    0,  265,  265,  265,    0,    0,

      265,  271,  271,  271,    0,    0,  271,    0,    0,    0,
      271,  274,  274,  274,    0,    0,  274,  275,  275,  275,
        0,    0,  275,  276,  276,  276,    0,  276,  276,  277,
      277,    0,    0,    0,  277,  278,  278,    0,    0,    0,
      278,  279,  279,    0,    0,    0,  279,  280,  280,    0,
        0,    0,  280,  281,  281,    0,    0,    0,  281,  282,
      282,    0,    0,    0,  282,  284,  284,  284,    0,    0,
      284,  286,  286,  286,    0,    0,  286,  287,  287,  287,
        0,    0,  287,  288,  288,  288,    0,    0,  288,  289,
      289,  289,    0,    0,  289,  292,  292,  292,    0,    0,

      292,  295,  295,  295,    0,  295,  295,  296,  296,  296,
        0,    0,  296,  297,  297,  297,    0,    0,  297,  298,
      298,  298,    0,    0,  298,  301,  301,  301,    0,    0,
      301,    0,    0,    0,  301,  303,  303,  303,    0,    0,
      303,  306,  306,  306,    0,    0,  306,  308,  308,  308,
        0,    0,  308,    0,    0,    0,  308,  310,  310,  310,
        0,    0,  310,    0,    0,    0,  310,  315,  315,  315,
        0,    0,  315,    0,    0,    0,  315,  317,  317,  317,
        0,    0,  317,    0,    0,    0,  317,  319,  319,  319,
        0,    0,  319,    0,    0,    0,  319,  322,  322,  322,

        0,    0,  322,    0,    0,    0,  322,  324,  324,  324,
        0,    0,  324,    0,    0,    0,  324,  326,  326,  326,
        0,    0,  326,    0,    0,    0,  326,  328,  328,  328,
        0,    0,  328,    0,    0,    0,  328,  329,  329,  329,
        0,    0,  329,    0,    0,    0,  329,  330,  330,  330,
        0,  330,  330,    0,    0,    0,  330,  331,  331,  331,
        0,    0,  331,    0,    0,    0,  331,  334,  334,  334,
        0,    0,  334,    0,    0,    0,  334,  338,  338,  338,
        0,    0,  338,    0,    0,    0,  338,  339,  339,  339,
        0,    0,  339,    0,    0,    0,  339,  340,  340,  340,

        0,    0,  340,    0,    0,    0,  340,  341,  341,  341,
        0,  341,  341,    0,    0,    0,  341,  345,  345,  345,
        0,    0,  345,    0,    0,    0,  345,  349,  349,  349,
        0,    0,  349,    0,    0,    0,  349,  350,  350,  350,
        0,    0,    0,    0,    0,    0,  350,  351,  351,  351,
        0,    0,    0,    0,    0,    0,  351,  352,  352,  352,
        0,    0,    0,    0,    0,    0,  352,  353,  353,  353,
        0,    0,    0,    0,    0,    0,  353,  354,  354,  354,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  354,
      355,  355,  355,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  355,  356,  356,  356,    0,  356,    0,    0,
        0,    0,    0,    0,    0,  356,  358,  358,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  358,  359,
      359,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  359,  361,  361,  361,    0,    0,  361,    0,    0,
        0,    0,    0,    0,  361,  362,    0,    0,    0,  362,
        0,    0,    0,    0,    0,    0,  362,  363,  363,  363,
        0,    0,  363,    0,    0,    0,    0,    0,    0,  363,
      364,  364,  364,    0,  364,  364,    0,    0,    0,    0,
        0,    0,  364,  366,    0,    0,  366,  366,  366,  366,

      366,  366,  366,  366,  366,  366,  366,  366,  366,  368,
      368,  368,    0,    0,  368,    0,    0,    0,    0,    0,
        0,  368,  370,    0,    0,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  371,    0,
        0,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  373,    0,    0,    0,    0,  373,
        0,    0,    0,    0,    0,    0,  373,  376,    0,    0,
        0,  376,    0,    0,    0,    0,    0,    0,  376,  377,
      377,  377,    0,    0,  377,    0,    0,    0,    0,    0,
        0,  377,  379,  379,  379,    0,    0,  379,    0,    0,

        0,    0,    0,    0,  379,  381,    0,    0,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  383,    0,    0,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  385,    0,    0,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  386,    0,    0,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  388,
      388,  388,    0,    0,    0,    0,    0,    0,  388,    0,
        0,  388,  389,  389,  389,    0,    0,    0,    0,    0,
        0,  389,    0,    0,  389,  390,  390,  390,    0,  390,

        0,    0,    0,    0,  390,    0,    0,  390,  391,  391,
      391,    0,    0,    0,    0,    0,    0,  391,    0,    0,
      391,  394,  394,  394,    0,    0,    0,    0,    0,    0,
      394,    0,    0,  394,  396,  396,  396,    0,    0,    0,
        0,    0,    0,  396,    0,    0,  396,  398,  398,  398,
        0,    0,    0,    0,    0,    0,  398,    0,    0,  398,
      400,  400,  400,    0,    0,    0,    0,    0,    0,  400,
        0,    0,  400,  410,  410,  410,    0,    0,    0,    0,
        0,    0,  410,    0,    0,  410,  414,  414,  414,    0,
        0,    0,    0,    0,    0,  414,    0,    0,  414,  415,

        0,    0,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  416,    0,    0,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  417,    0,    0,    0,  417,    0,    0,  417,  417,
      417,    0,    0,  417,  419,    0,    0,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      420,    0,    0,    0,  420,    0,    0,  420,  420,  420,
        0,    0,  420,  421,  421,  421,    0,    0,    0,    0,
        0,    0,  421,  422,  422,  422,    0,    0,    0,    0,
        0,    0,  422,  424,    0,    0,    0,  424,    0,    0,

      424,  424,  424,    0,    0,  424,  430,  430,  430,    0,
        0,  430,    0,    0,    0,  430,  431,  431,  431,    0,
        0,  431,    0,    0,    0,  431,  432,  432,  432,    0,
      432,  432,    0,    0,    0,  432,  433,  433,  433,    0,
        0,  433,    0,    0,    0,  433,  434,  434,  434,    0,
        0,  434,    0,    0,    0,  434,  435,  435,  435,    0,
        0,    0,    0,    0,    0,  435,  436,  436,  436,    0,
        0,  436,    0,    0,    0,  436,  437,  437,  437,    0,
        0,  437,    0,    0,    0,  437,  438,  438,  438,    0,
      438,  438,    0,    0,    0,  438,  440,  440,    0,    0,

        0,  440,  441,  441,    0,    0,    0,  441,  443,  443,
      443,    0,    0,  443,  444,  444,  444,    0,    0,  444,
      445,  445,  445,    0,  445,  445,  446,  446,  446,    0,
        0,  446,  447,  447,  447,    0,    0,  447,  448,  448,
      448,    0,    0,  448,  449,  449,  449,    0,    0,  449,
      450,  450,  450,    0,  450,  450,  452,  452,  452,    0,
        0,  452,    0,    0,    0,  452,  453,  453,  453,    0,
        0,  453,  454,  454,  454,    0,  454,  454,    0,    0,
        0,  454,  456,  456,  456,    0,    0,  456,    0,    0,
        0,  456,  458,  458,  458,    0,    0,  458,  461,  461,

      461,    0,    0,  461,    0,    0,    0,  461,  462,  462,
      462,    0,    0,  462,    0,    0,    0,  462,  463,  463,
      463,    0,  463,  463,    0,    0,    0,  463,  464,  464,
      464,    0,    0,  464,    0,    0,    0,  464,  466,  466,
      466,    0,    0,  466,    0,    0,    0,  466,  467,  467,
      467,    0,    0,  467,    0,    0,    0,  467,  470,  470,
      470,    0,    0,  470,    0,    0,    0,  470,  471,  471,
      471,    0,    0,  471,    0,    0,    0,  471,  472,  472,
      472,    0,    0,  472,    0,    0,    0,  472,  473,  473,
      473,    0,    0,  473,    0,    0,    0,  473,  474,  474,

      474,    0,  474,  474,    0,    0,    0,  474,  477,  477,
      477,    0,    0,  477,    0,    0,    0,  477,  478,  478,
      478,    0,    0,  478,    0,    0,    0,  478,  480,  480,
      480,    0,    0,  480,    0,    0,    0,  480,  482,  482,
      482,    0,    0,  482,    0,    0,    0,  482,  483,  483,
      483,    0,    0,  483,    0,    0,    0,  483,  484,  484,
      484,    0,    0,  484,    0,    0,    0,  484,  488,  488,
      488,    0,    0,  488,    0,    0,    0,  488,  489,  489,
      489,    0,    0,  489,    0,    0,    0,  489,  492,  492,
      492,    0,    0,  492,    0,    0,    0,  492,  494,  494,

      494,    0,    0,  494,    0,    0,    0,  494,  498,  498,
      498,    0,    0,  498,    0,    0,    0,  498,  504,  504,
      504,    0,    0,  504,    0,    0,    0,  504,  505,  505,
      505,    0,    0,  505,    0,    0,    0,  505,  506,  506,
      506,    0,  506,  506,    0,    0,    0,  506,  507,  507,
      507,    0,    0,  507,    0,    0,    0,  507,  509,  509,
      509,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      509,  510,  510,  510,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  510,  511,  511,  511,    0,  511,    0,
        0,    0,    0,    0,    0,    0,  511,  513,  513,  513,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  513,
      514,  514,  514,    0,    0,  514,    0,    0,    0,    0,
        0,    0,  514,  515,    0,    0,    0,  515,    0,    0,
        0,    0,    0,    0,  515,  516,  516,  516,    0,    0,
      516,    0,    0,    0,    0,    0,    0,  516,  517,  517,
      517,    0,  517,  517,    0,    0,    0,    0,    0,    0,
      517,  518,  518,  518,    0,    0,  518,    0,    0,    0,
        0,    0,    0,  518,  520,  520,    0,    0,    0,  520,
        0,    0,    0,    0,    0,    0,  520,  521,  521,    0,
        0,    0,  521,    0,    0,    0,    0,    0,    0,  521,

      522,    0,    0,    0,  522,    0,    0,    0,    0,    0,
        0,  522,  523,  523,  523,    0,    0,  523,    0,    0,
        0,    0,    0,    0,  523,  525,  525,  525,    0,    0,
      525,    0,    0,    0,    0,    0,    0,  525,  526,  526,
      526,    0,  526,  526,    0,    0,    0,    0,    0,    0,
      526,  527,  527,  527,    0,    0,  527,    0,    0,    0,
        0,    0,    0,  527,  529,  529,  529,    0,    0,  529,
        0,    0,    0,    0,    0,    0,  529,  530,    0,    0,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  531,  531,  531,    0,    0,  531,    0,

        0,    0,    0,    0,    0,  531,  534,    0,    0,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  536,    0,    0,    0,    0,  536,    0,    0,
        0,    0,    0,    0,  536,  537,    0,    0,    0,    0,
      537,    0,    0,    0,    0,    0,    0,  537,  542,  542,
      542,    0,    0,  542,    0,    0,    0,    0,    0,    0,
      542,  545,  545,  545,    0,    0,  545,    0,    0,    0,
        0,    0,    0,  545,  549,    0,    0,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      551,  551,  551,    0,    0,  551,    0,    0,    0,    0,

        0,    0,  551,  554,    0,    0,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  556,
        0,    0,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  557,    0,    0,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  559,    0,    0,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  560,    0,    0,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  562,    0,    0,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  564,

        0,    0,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  567,    0,    0,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  569,    0,    0,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  570,    0,    0,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  575,  575,  575,    0,    0,    0,    0,
        0,    0,  575,    0,    0,  575,  576,  576,  576,    0,
        0,    0,    0,    0,    0,  576,    0,    0,  576,  577,
      577,  577,    0,  577,    0,    0,    0,    0,  577,    0,

        0,  577,  578,  578,  578,    0,    0,    0,    0,    0,
        0,  578,    0,    0,  578,  581,    0,    0,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  585,  585,  585,    0,    0,    0,    0,    0,    0,
      585,    0,    0,  585,  586,  586,  586,    0,    0,    0,
        0,    0,    0,  586,    0,    0,  586,  590,  590,  590,
        0,    0,    0,    0,    0,    0,  590,    0,    0,  590,
      591,  591,  591,    0,    0,    0,    0,    0,    0,  591,
        0,    0,  591,  592,  592,  592,    0,    0,    0,    0,
        0,    0,  592,    0,    0,  592,  593,  593,  593,    0,

      593,    0,    0,    0,    0,  593,    0,    0,  593,  601,
      601,  601,    0,    0,  601,    0,    0,    0,  601,  602,
      602,  602,    0,    0,  602,    0,    0,    0,  602,  603,
      603,  603,    0,  603,  603,    0,    0,    0,  603,  604,
      604,  604,    0,    0,  604,    0,    0,    0,  604,  606,
      606,  606,    0,    0,  606,    0,    0,    0,  606,  608,
      608,  608,    0,    0,  608,    0,    0,    0,  608,  609,
      609,  609,    0,    0,  609,    0,    0,    0,  609,  610,
      610,  610,    0,    0,  610,    0,    0,    0,  610,  611,
      611,  611,    0,    0,  611,    0,    0,    0,  611,  612,

      612,  612,    0,    0,  612,    0,    0,    0,  612,  615,
      615,  615,    0,    0,  615,    0,    0,    0,  615,  617,
      617,  617,    0,    0,  617,    0,    0,    0,  617,  619,
      619,  619,    0,    0,  619,    0,    0,    0,  619,  622,
      622,  622,    0,    0,  622,    0,    0,    0,  622,  625,
      625,  625,    0,    0,  625,  626,  626,  626,    0,    0,
      626,  627,  627,  627,    0,  627,  627,  629,  629,  629,
        0,    0,  629,    0,    0,    0,  629,  631,  631,  631,
        0,    0,  631,    0,    0,    0,  631,  635,  635,  635,
        0,    0,  635,    0,    0,    0,  635,  636,  636,  636,

        0,    0,  636,    0,    0,    0,  636,  637,  637,  637,
        0,  637,  637,    0,    0,    0,  637,  639,  639,  639,
        0,    0,  639,    0,    0,    0,  639,  641,  641,  641,
        0,    0,  641,    0,    0,    0,  641,  645,  645,  645,
        0,    0,  645,    0,    0,    0,  645,  646,  646,  646,
        0,    0,  646,    0,    0,    0,  646,  647,  647,  647,
        0,    0,  647,    0,    0,    0,  647,  649,  649,  649,
        0,  649,  649,    0,    0,    0,  649,  650,  650,  650,
        0,    0,  650,    0,    0,    0,  650,  657,  657,  657,
        0,    0,  657,    0,    0,    0,  657,  658,  658,  658,

        0,    0,  658,    0,    0,    0,  658,  659,  659,  659,
        0,  659,  659,    0,    0,    0,  659,  662,  662,  662,
        0,    0,  662,    0,    0,    0,    0,    0,    0,  662,
      663,  663,  663,    0,    0,  663,    0,    0,    0,    0,
        0,    0,  663,  664,  664,  664,    0,  664,  664,    0,
        0,    0,    0,    0,    0,  664,  666,  666,    0,    0,
        0,  666,    0,    0,    0,    0,    0,    0,  666,  667,
      667,    0,    0,    0,  667,    0,    0,    0,    0,    0,
        0,  667,  668,  668,    0,    0,    0,  668,    0,    0,
        0,    0,    0,    0,  668,  670,  670,    0,    0,    0,

      670,    0,    0,    0,    0,    0,    0,  670,  671,  671,
        0,    0,    0,  671,    0,    0,    0,    0,    0,    0,
      671,  672,  672,    0,    0,    0,  672,    0,    0,    0,
        0,    0,    0,  672,  675,  675,  675,    0,    0,  675,
        0,    0,    0,    0,    0,    0,  675,  677,  677,  677,
        0,    0,  677,    0,    0,    0,    0,    0,    0,  677,
      679,  679,  679,    0,    0,  679,    0,    0,    0,    0,
        0,    0,  679,  680,  680,  680,    0,    0,  680,    0,
        0,    0,    0,    0,    0,  680,  681,  681,  681,    0,
        0,  681,    0,    0,    0,    0,    0,    0,  681,  685,

      685,  685,    0,    0,  685,    0,    0,    0,    0,    0,
        0,  685,  686,    0,    0,    0,  686,    0,    0,    0,
        0,    0,    0,  686,  688,  688,  688,    0,  688,  688,
        0,    0,    0,    0,    0,    0,  688,  689,  689,  689,
        0,    0,  689,    0,    0,    0,    0,    0,    0,  689,
      691,  691,  691,    0,    0,  691,    0,    0,    0,    0,
        0,    0,  691,  692,  692,  692,    0,    0,  692,    0,
        0,    0,    0,    0,    0,  692,  696,    0,    0,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  698,  698,  698,    0,    0,  698,    0,    0,

        0,    0,    0,    0,  698,  702,  702,  702,    0,    0,
      702,    0,    0,    0,    0,    0,    0,  702,  703,    0,
        0,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  704,    0,    0,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      706,    0,    0,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  707,    0,    0,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  715,    0,    0,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  717,    0,

        0,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  720,    0,    0,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      723,    0,    0,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  728,    0,    0,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  729,    0,    0,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  731,    0,
        0,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  732,    0,    0,  732,  732,  732,

      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      735,    0,    0,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  740,    0,    0,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  741,    0,    0,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  742,    0,
        0,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  748,    0,    0,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      753,    0,    0,  753,  753,  753,  753,  753,  753,  753,

      753,  753,  753,  753,  753,  753,  754,  754,  754,    0,
        0,    0,    0,    0,    0,  754,    0,    0,  754,  755,
      755,  755,    0,    0,    0,    0,    0,    0,  755,    0,
        0,  755,  756,  756,  756,    0,  756,    0,    0,    0,
        0,  756,    0,    0,  756,  757,  757,  757,    0,    0,
        0,    0,    0,    0,  757,    0,    0,  757,  759,  759,
      759,    0,    0,    0,    0,    0,    0,  759,    0,    0,
      759,  760,  760,  760,    0,    0,    0,    0,    0,    0,
      760,    0,    0,  760,  761,  761,  761,    0,    0,    0,
        0,    0,    0,  761,    0,    0,  761,  765,    0,    0,

      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  768,    0,    0,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  769,
        0,    0,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  771,  771,  771,    0,    0,
        0,    0,    0,    0,  771,    0,    0,  771,  777,  777,
      777,    0,    0,  777,    0,    0,    0,  777,  778,  778,
      778,    0,    0,  778,    0,    0,    0,  778,  779,  779,
      779,    0,  779,  779,    0,    0,    0,  779,  780,  780,
      780,    0,    0,  780,    0,    0,    0,  780,  781,  781,

      781,    0,    0,  781,    0,    0,    0,  781,  782,  782,
      782,    0,    0,  782,    0,    0,    0,  782,  783,  783,
      783,    0,    0,  783,    0,    0,    0,  783,  786,  786,
      786,    0,    0,  786,    0,    0,    0,  786,  787,  787,
      787,    0,    0,  787,    0,    0,    0,  787,  788,  788,
      788,    0,    0,  788,    0,    0,    0,  788,  789,  789,
      789,    0,    0,  789,    0,    0,    0,  789,  790,  790,
      790,    0,  790,  790,    0,    0,    0,  790,  793,  793,
      793,    0,    0,  793,    0,    0,    0,  793,  794,  794,
      794,    0,    0,  794,    0,    0,    0,  794,  796,  796,

      796,    0,    0,  796,    0,    0,    0,  796,  798,  798,
        0,    0,    0,  798,    0,    0,    0,    0,    0,    0,
      798,  799,  799,    0,    0,    0,  799,    0,    0,    0,
        0,    0,    0,  799,  802,  802,  802,    0,    0,  802,
        0,    0,    0,    0,    0,    0,  802,  803,  803,  803,
        0,    0,  803,    0,    0,    0,    0,    0,    0,  803,
      804,  804,  804,    0,  804,  804,    0,    0,    0,    0,
        0,    0,  804,  805,  805,  805,    0,    0,  805,    0,
        0,    0,    0,    0,    0,  805,  807,  807,  807,    0,
        0,  807,    0,    0,    0,    0,    0,    0,  807,  808,

      808,  808,    0,    0,  808,    0,    0,    0,    0,    0,
        0,  808,  809,  809,  809,    0,    0,  809,    0,    0,
        0,    0,    0,    0,  809,  810,  810,  810,    0,  810,
      810,    0,    0,    0,    0,    0,    0,  810,  813,    0,
        0,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  814,  814,  814,    0,    0,  814,
        0,    0,    0,    0,    0,    0,  814,  817,    0,    0,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  820,  820,  820,    0,    0,  820,    0,
        0,    0,    0,    0,    0,  820,  824,    0,    0,  824,

      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  827,    0,    0,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  831,    0,
        0,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  834,    0,    0,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      836,    0,    0,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  837,    0,    0,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  838,    0,    0,  838,  838,  838,  838,  838,

      838,  838,  838,  838,  838,  838,  838,  838,  849,    0,
        0,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  857,    0,    0,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      860,    0,    0,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  863,    0,    0,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  868,    0,    0,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  875,    0,
        0,  875,  875,  875,  875,  875,  875,  875,  875,  875,

      875,  875,  875,  875,  876,    0,    0,  876,  876,  876,
      876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
      881,    0,    0,  881,  881,  881,  881,  881,  881,  881,
      881,  881,  881,  881,  881,  881,  892,    0,    0,  892,
      892,  892,  892,  892,  892,  892,  892,  892,  892,  892,
      892,  892,  911,  911,  911,    0,    0,  911,    0,    0,
        0,  911,  915,  915,  915,    0,    0,  915,    0,    0,
        0,    0,    0,    0,  915,  920,    0,    0,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  939,    0,    0,  939,  939,  939,  939,  939,  939,

      939,  939,  939,  939,  939,  939,  939,  940,    0,    0,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  954,    0,    0,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  971,
        0,    0,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  992,    0,  992,  993,    0,
      993,  994,    0,  994,  995,    0,  995,  996,    0,  996,
      997,    0,  997,  998,    0,  998,  999,    0,  999, 1000,
        0, 1000, 1001,    0, 1001, 1002,    0, 1002, 1003,    0,
     1003, 1004,    0, 1004, 1005,    0, 1005, 1006,    0, 1006,

     1007,    0, 1007, 1008,    0, 1008, 1009,    0, 1009, 1010,
        0, 1010, 1011,    0, 1011, 1012,    0, 1012, 1013,    0,
     1013, 1014,    0, 1014, 1015,    0, 1015, 1016,    0, 1016,
     1017,    0, 1017, 1018,    0, 1018, 1019,    0, 1019, 1020,
        0, 1020, 1021,    0, 1021, 1022,    0, 1022, 1023,    0,
     1023, 1024,    0, 1024, 1025,    0, 1025, 1026,    0, 1026,
     1027,    0, 1027, 1028,    0, 1028, 1029,    0, 1029, 1030,
        0, 1030, 1031,    0, 1031, 1032,    0, 1032, 1033,    0,
     1033, 1034,    0, 1034, 1035,    0, 1035, 1036,    0, 1036,
     1037,    0, 1037, 1038,    0, 1038, 1039,    0, 1039, 1040,

        0, 1040, 1041,    0, 1041, 1042,    0, 1042, 1043,    0,
     1043, 1044,    0, 1044, 1045,    0, 1045, 1046,    0, 1046,
     1047,    0, 1047, 1048,    0, 1048, 1049,    0, 1049, 1050,
        0, 1050, 1051,    0, 1051, 1052,    0, 1052, 1053,    0,
     1053, 1054,    0, 1054, 1055,    0, 1055, 1056,    0, 1056,
     1057,    0, 1057, 1058,    0, 1058, 1059,    0, 1059, 1060,
        0, 1060, 1061,    0, 1061, 1062,    0, 1062, 1063,    0,
     1063, 1064,    0, 1064, 1065,    0, 1065, 1066,    0, 1066,
     1067,    0, 1067, 1068,    0, 1068, 1069,    0, 1069, 1070,
        0, 1070, 1071,    0, 1071, 1072,    0, 1072, 1073,    0,

     1073, 1074,    0, 1074, 1075,    0, 1075, 1076,    0, 1076,
     1077,    0, 1077, 1078,    0, 1078, 1079,    0, 1079, 1080,
        0, 1080, 1081,    0, 1081, 1082,    0, 1082, 1083,    0,
     1083, 1084,    0, 1084, 1085,    0, 1085, 1086,    0, 1086,
     1087,    0, 1087, 1088,    0, 1088, 1089,    0, 1089, 1090,
        0, 1090, 1091,    0, 1091, 1092,    0, 1092, 1093,    0,
     1093, 1094,    0, 1094, 1095,    0, 1095, 1096,    0, 1096,
     1097,    0, 1097, 1098,    0, 1098, 1099,    0, 1099, 1100,
        0, 1100, 1101,    0, 1101, 1102,    0, 1102, 1103,    0,
     1103, 1104,    0, 1104, 1105,    0, 1105, 1106,    0, 1106,

     1107,    0, 1107, 1108,    0, 1108, 1109,    0, 1109, 1110,
        0, 1110, 1111,    0, 1111, 1112,    0, 1112, 1113,    0,
     1113, 1114,    0, 1114, 1115,    0, 1115, 1116,    0, 1116,
     1117,    0, 1117, 1118,    0, 1118, 1119,    0, 1119, 1120,
        0, 1120, 1121,    0, 1121, 1122,    0, 1122, 1123,    0,
     1123, 1124,    0, 1124, 1125,    0, 1125, 1126,    0, 1126,
     1127,    0, 1127, 1128,    0, 1128, 1129,    0, 1129, 1130,
        0, 1130, 1131,    0, 1131, 1132,    0, 1132, 1133,    0,
     1133, 1134,    0, 1134, 1135,    0, 1135, 1136,    0, 1136,
     1137,    0, 1137, 1138,    0, 1138, 1139,    0, 1139, 1140,

        0, 1140, 1141,    0, 1141, 1142,    0, 1142, 1143,    0,
     1143, 1144,    0, 1144, 1145,    0, 1145, 1146,    0, 1146,
     1147,    0, 1147, 1148,    0, 1148, 1149,    0, 1149, 1150,
        0, 1150, 1151,    0, 1151, 1152,    0, 1152, 1153,    0,
     1153, 1154,    0, 1154, 1155,    0, 1155, 1156,    0, 1156,
     1157,    0, 1157, 1158,    0, 1158, 1159,    0, 1159, 1160,
        0, 1160, 1161,    0, 1161, 1162,    0, 1162, 1163,    0,
     1163, 1164,    0, 1164, 1165,    0, 1165, 1166,    0, 1166,
     1167,    0, 1167, 1168,    0, 1168, 1169,    0, 1169, 1170,
        0, 1170, 1171,    0, 1171, 1172,    0, 1172, 1173,    0,

     1173, 1174,    0, 1174, 1175,    0, 1175, 1176,    0, 1176,
     1177,    0, 1177, 1178,    0, 1178, 1179,    0, 1179, 1180,
        0, 1180, 1181,    0, 1181, 1182,    0, 1182, 1183,    0,
     1183, 1184,    0, 1184, 1185,    0, 1185, 1186,    0, 1186,
     1187,    0, 1187, 1188,    0, 1188, 1189,    0, 1189, 1190,
        0, 1190, 1191,    0, 1191, 1192,    0, 1192, 1193,    0,
     1193, 1194,    0, 1194, 1195,    0, 1195, 1196,    0, 1196,
     1197,    0, 1197, 1198,    0, 1198, 1199,    0, 1199, 1200,
        0, 1200, 1201,    0, 1201, 1202,    0, 1202, 1203,    0,
     1203, 1204,    0, 1204, 1205,    0, 1205, 1206,    0, 1206,

     1207,    0, 1207, 1208,    0, 1208, 1209,    0, 1209, 1210,
        0, 1210, 1211,    0, 1211, 1212,    0, 1212, 1213,    0,
     1213, 1214,    0, 1214, 1215,    0, 1215, 1216,    0, 1216,
     1217,    0, 1217, 1218,    0, 1218, 1219,    0, 1219, 1220,
        0, 1220, 1221,    0, 1221, 1222,    0, 1222, 1223,    0,
     1223,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[17] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
/*
 *
 * CS-252 
 * shell.l: lexical analyzer for shell
 * You have to extend it.
 *
 */
#line 11 "shell.l"

#include <cstring>
#include <stdlib.h>
#include "y.tab.hh"

#define MAX_INCLUDE_DEPTH 10
YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

static  void yyunput (int c,char *buf_ptr  );

char *getenv(const char *name);

void myunputc(int c) {
  unput(c);
}

void remove_character(char* s, char c) {
  int j, n = strlen(s);
  int escaped = 0; 

  for (int i = j = 0; i < n; i++) {
    if (s[i] != c || escaped) {
      s[j++] = s[i];
      escaped = 0;
    } else {
      escaped = 1;
    }
  }   

  s[j] = '\0';
}

/*void source(char *s) {
  FILE *yyin = fopen(s, "r");

  if (!yyin) {
    fprintf( stderr, "No File" );
  } else {
    yypush_buffer_state( yy_create_buffer( yyin, YY_BUF_SIZE ) );
    yyparse();
    fclose(yyin);
  }
}*/

void removeStartAndEnd(char* s) {
  int j, n = strlen(s);

  s[0] = '\0';
  for (int i = 1; i < n; i++) {
    s[i - 1] = s[i];
  }   
  s[n - 2] = '\0';
}

#line 2221 "lex.yy.cc"
#line 2222 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 70 "shell.l"


#line 2442 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 991 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5952 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 72 "shell.l"
{
  return NEWLINE;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 76 "shell.l"
{
  /* Discard spaces and tabs */
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 80 "shell.l"
{
  return GREAT;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 84 "shell.l"
{
  return GREATGREAT;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 88 "shell.l"
{
  return LESS;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 92 "shell.l"
{
  return PIPE;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 96 "shell.l"
{
  return AMPERSAND;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 100 "shell.l"
{
  return TWOGREAT;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 104 "shell.l"
{
  return GREATAMPERSAND;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 108 "shell.l"
{
  return GREATGREATAMPERSAND;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 112 "shell.l"
{ 
  remove_character(yytext, '$');
  remove_character(yytext, '(');
  remove_character(yytext, ')');

  int pin[2], pout[2];
  pipe(pin); pipe(pout);

  int ret = fork();
  if (ret == 0) {
      close(pin[1]);
      close(pout[0]);

      dup2(pin[0], 0);
      close(pin[0]);

      dup2(pout[1], 1);
      close(pout[1]);
      
      // Execute shell executable
      execvp("/proc/self/exe", NULL);
      perror("Error in Child Process");
      exit(1);
  } else if (ret < 0) {
      perror("Error Forking Child");
      exit(1);
  }

  close(pin[0]);
  close(pout[1]);

  write(pin[1], strcat(yytext, "\n"), strlen(yytext) + 1);
  write(pin[1], "exit\n", 6);
  close(pin[1]);
  
  int size = 1024;
  char* buffer = (char*) malloc(sizeof(char) * size);
  char* iterator = buffer;
  int n = read(pout[0], iterator++, 1);
  while (n > 0) {
    n = read(pout[0], iterator++, 1);
    if (strlen(buffer) == size) {
      size = size * 2;
      realloc(buffer, size);
    }
  }

  *iterator = '\0';
  close(pout[0]);

  for (int i = strlen(buffer) - 1; i >= 0; i--) {
    char c = ' ';
    if (buffer[i] == '\n') {
      myunputc(' ');
    } else {
      myunputc(buffer[i]);
    }
  }
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 172 "shell.l"
{ 
  remove_character(yytext, '\\');
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 178 "shell.l"
{
  remove_character(yytext, '$');
  remove_character(yytext, '{');
  remove_character(yytext, '}');

  int size = 1024;
  char* buffer = (char*) malloc(sizeof(char) * size);
  buffer = getenv(yytext);

  if(buffer) {
    for (int i = strlen(buffer) - 1; i >= 0; i--) {
      char c = ' ';
      if (buffer[i] == '\n') {
        myunputc(' ');
      } else {
        myunputc(buffer[i]);
      }
    }
  }
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 199 "shell.l"
{
  removeStartAndEnd(yytext);
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 205 "shell.l"
{
  /* Assume that file names have only alpha chars */
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 210 "shell.l"
ECHO;
	YY_BREAK
#line 2699 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 991 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 991 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 990);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 210 "shell.l"
