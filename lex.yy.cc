#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 16
#define YY_END_OF_BUFFER 17
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[693] =
    {   0,
        0,    0,   17,   15,    2,    1,   15,   16,    7,   15,
       15,    5,    3,   12,   16,    6,   15,   15,    0,    0,
       15,   12,    0,   15,    0,   15,    0,    0,   15,    0,
        0,    0,    0,   12,    0,    0,    0,   12,   15,    0,
       12,    8,    9,    4,   12,   12,   12,   12,   12,   12,
       12,    0,    0,   12,   15,    0,   14,    0,    0,   15,
        0,   14,   15,    0,   14,    0,    0,   15,    0,    0,
       14,    0,    0,   14,    0,   14,    0,   14,    0,    0,
        0,    0,    0,    0,   12,   12,   12,   12,    0,    0,
       12,    0,    0,    0,   12,   12,   12,   12,   15,    0,

       12,   12,   12,   10,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,    0,    0,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,    0,    0,   14,    0,   14,
       14,   14,   14,   14,   14,   14,   14,    0,   14,    0,
        0,    0,   11,   12,   11,    0,    0,    0,   11,   12,
       12,   11,   12,   12,   12,   12,   12,   12,   12,    0,
        0,   12,   13,    0,    0,   13,   12,   12,   12,   12,
       14,    0,    0,   12,   12,   12,   12,   12,   12,   12,
       12,   14,    0,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   14,    0,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,    0,    0,   14,   11,   14,   11,   14,
        0,   14,   11,    0,   14,   13,   14,   14,   13,   14,
       14,   11,   11,   11,   11,    0,   14,   11,   11,   11,

       12,   12,   11,   12,   11,   11,   11,   12,   12,   11,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       13,   13,   12,    0,   14,   13,   13,   13,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   14,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       14,   14,   14,   14,   14,   14,   11,   11,   11,   14,
       14,   11,   11,   11,   14,   14,   13,   13,   13,   11,
       11,   11,   11,   12,   12,   11,   12,   12,   12,   11,
       12,   11,   11,   11,   12,   12,   11,   12,   11,   11,
       11,   11,   11,   11,   12,   12,   11,   12,   12,   12,
       12,   12,   12,   12,   13,   13,   13,   13,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,   12,   11,

       12,   11,   11,   11,   11,   11,   11,   12,   12,   11,
       12,   13,   13,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   11,   12,   11,
       11,   11,   12,   12,   11,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   12,   12,   12,   12,   12,   12,   12,   12,
       12,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    6,    1,    7,    1,    8,
        9,    1,    1,    1,    1,    1,    1,    1,    1,   10,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   11,
        1,   12,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   13,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   14,   15,   16,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[17] =
    {   0,
        1,    2,    2,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[878] =
    {   0,
        0,    0,  407,   16, 5440, 5440,   32,   44,   58,   71,
      394,    0,   43,   87,   99,    0,    0,    0,  108,    0,
        0,    0,  118,  131,  400,  147,  160,  174,  187,  200,
       48,   14,  206,   49,  215,  231,  244,  257,  270,  396,
      286,    0,    0,  392,    0,  302,  314,    0,    0,  328,
      340,  350,  380,  355,    0,  388,  368,  381,    0,    0,
      392,   30,    0,  387,    0,    0,    0,    0,    0,   56,
       69,   85,  398,  414,  427,  440,  383,  453,  376,   61,
      105,  459,  379,  469,  475,  101,  485,  106,  494,  507,
      519,  535,    0,  548,  561,  574,    0,  587,  600,  379,

      616,  363,  632,    0,  648,  664,  677,  691,  704,  720,
      736,  749,  758,    0,  774,  786,    0,    0,    0,  796,
      809,  356,  821,  831,  353,  840,    0,  853,  867,  880,
      893,  113,  124,  129,  145,  899,   51,  905,  911,  924,
      940,  953,  963,  979,  992, 1003,  158,  159,  165, 1009,
      357, 1019, 1028, 1041, 1051, 1057,  171, 1063, 1069, 1075,
     1085, 1098, 1111, 1121, 1131, 1141,  172, 1151,  173, 1160,
     1173, 1185, 1197, 1210, 1223, 1236, 1248, 1261, 1273, 1285,
        0, 1298, 1311, 1327, 1339, 1355, 1371, 1387, 1403, 1415,
     1431,    0,  357, 1447, 1460, 1474, 1490, 1502, 1516, 1529,

     1545,  354, 1561, 1574, 1587, 1600,    0,    0,  349,    0,
        0,    0,    0,  338, 1613, 1623, 1633, 1643, 1659,    0,
        0, 1672,    0,    0,    0, 1688,  199,    0,    0,    0,
     1704, 1720,  204,    0, 1733, 1743, 1753,    0, 1763, 1775,
        0, 1791,  207,    0,    0,    0,    0, 1804, 1813, 1829,
      208, 1841, 1854,  209,    0, 1867,  337, 1876, 1892, 1905,
     1919, 1932, 1945,  185,  220,  222, 1951, 1967, 1980, 1993,
     2006, 2017,  229, 2023,  225, 2029, 2035, 2041, 2047, 2053,
      233, 2059, 2065, 2071, 2084, 2097, 2110, 2123, 2136, 2152,
        0, 2165, 2178, 2187, 2200, 2206,    0, 2212,    0, 2218,

     2224, 2234, 2247, 2260,    0, 2273, 2289, 2302, 2312,    0,
     2322, 2332, 2342, 2352, 2362, 2372,    0,    0, 2382,    0,
     2391, 2404, 2416, 2429,    0, 2442,    0, 2455, 2468, 2481,
     2494, 2510, 2522, 2535, 2547, 2559, 2571, 2587, 2599,    0,
     2615, 2631, 2647, 2659, 2675, 2691, 2707, 2723,    0, 2739,
        0,    0, 2755,    0,    0, 2771, 2781, 2795, 2808,  336,
        0, 2824,  333,    0, 2840, 2856, 2866, 2880, 2893, 2909,
     2925, 2938, 2948, 2958, 2968, 2978, 2988, 2998, 3011, 3024,
        0, 3040, 3053,    0,  318, 3066,    0, 3082, 3092,    0,
        0,    0, 3106, 3119, 3129, 3145,  323, 3161, 3177,  322,

        0, 3193,    0,  242,    0,    0,    0,    0, 3203, 3213,
     3223, 3232, 3245, 3257, 3273,  318,    0,    0,  247,    0,
     3286, 3292, 3298, 3311, 3324, 3330, 3336, 3342, 3348, 3354,
     3360, 3366, 3372, 3378, 3384, 3397, 3410, 3423, 3436, 3449,
     3455,    0, 3461, 3467, 3477, 3490, 3503, 3513, 3523,    0,
     3533,    0, 3546, 3562,    0, 3575,    0,    0,    0, 3588,
        0, 3604, 3620,    0,    0, 3633,    0,    0, 3643, 3653,
     3663,    0, 3673,    0, 3683, 3696,    0, 3709, 3722, 3735,
     3748, 3764, 3777, 3790, 3803,    0,    0, 3816,    0, 3832,
        0, 3848,    0,    0, 3861,    0,    0, 3873, 3889, 3901,

        0, 3917,    0, 3933, 3949, 3965,    0, 3981,    0,    0,
     3997, 4013,    0, 4029,    0,    0, 4045, 4061,  311, 4074,
        0,  310, 4087, 4100, 4116, 4129, 4143, 4156, 4172, 4185,
     4198, 4208, 4218,    0, 4228, 4244, 4257,    0, 4270,  309,
        0,    0, 4283,  255,    0,    0,    0, 4296, 4312,  313,
        0,    0, 4325,    0, 4335, 4345, 4358, 4371, 4381,    0,
     4394, 4410,    0,    0,    0,    0,    0,    0,  306,    0,
     4423, 4433, 4449,  297,    0, 4462, 4472, 4482, 4492, 4505,
     4518,    0,  296,    0,    0,  282, 4534, 4547, 4553, 4559,
     4565,    0, 4574, 4590, 4606, 4622,    0, 4635, 4645,    0,

        0, 4658,    0,    0,    0, 4674,    0,    0,    0,    0,
        0, 4687, 4700, 4713, 4726,    0, 4742, 4758, 4774,    0,
        0, 4790,    0,    0,    0,    0,    0,    0, 4806,    0,
     4822,    0,    0, 4838,    0,    0, 4851,    0,    0, 4864,
     4874,    0, 4884, 4897,    0, 4910, 4920,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4930, 4943,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 5440,  288,  287, 4959, 4962, 4965, 4968, 4971,  272,

      271,  267, 4974, 4977, 4980, 4983, 4986, 4989, 4992, 4995,
     4998, 5001, 5004, 5007,  263,  259, 5010,  258, 5013, 5016,
      250,  247, 5019, 5022, 5025, 5028, 5031, 5034, 5037, 5040,
     5043, 5046, 5049, 5052, 5055, 5058, 5061, 5064, 5067, 5070,
     5073, 5076, 5079, 5082, 5085, 5088, 5091,  246, 5094,  245,
      234, 5097, 5100, 5103,  232,  213, 5106, 5109,  180, 5112,
     5115, 5118, 5121, 5124, 5127, 5130,  170,  129, 5133, 5136,
     5139, 5142, 5145, 5148, 5151, 5154, 5157, 5160, 5163, 5166,
     5169, 5172, 5175, 5178, 5181, 5184, 5187, 5190, 5193, 5196,
     5199, 5202, 5205, 5208, 5211, 5214, 5217, 5220, 5223, 5226,

      124, 5229,  119, 5232, 5235, 5238, 5241,  114, 5244,   90,
       64, 5247, 5250, 5253, 5256, 5259, 5262, 5265, 5268, 5271,
     5274, 5277,   50, 5280, 5283, 5286, 5289, 5292, 5295, 5298,
     5301, 5304, 5307, 5310, 5313, 5316, 5319, 5322, 5325, 5328,
     5331, 5334, 5337, 5340, 5343, 5346, 5349, 5352, 5355, 5358,
     5361,   19, 5364, 5367, 5370, 5373, 5376, 5379, 5382, 5385,
     5388, 5391, 5394, 5397, 5400, 5403, 5406, 5409, 5412, 5415,
     5418, 5421, 5424, 5427, 5430, 5433, 5436
    } ;

static const flex_int16_t yy_def[878] =
    {   0,
      692,    1,  692,  692,  692,  692,  692,  693,    4,  692,
        4,    9,    9,  692,  694,    9,    4,    7,  693,    9,
       10,   14,  694,  692,  695,  692,  696,   24,  692,  697,
      693,  698,  699,  700,  701,    7,   10,   14,  692,   19,
      692,    9,    9,    9,   14,  692,  700,   38,   41,  692,
      702,  703,   19,  702,   24,  695,  692,  696,   28,   29,
      697,  704,   24,  695,   57,   58,   28,   29,   61,   58,
      705,  706,  707,   57,   29,  692,   58,  708,   58,   58,
      709,  710,  711,  712,  713,  700,  714,  715,  716,  717,
      718,   26,   75,   39,   41,   46,   95,   50,  692,   58,

      692,   47,  692,    9,  692,  692,  719,  105,  692,  692,
      692,  720,  721,   50,  692,  715,   98,  103,   50,  722,
      692,   47,  722,  723,   58,  692,   57,  724,  126,  692,
      725,  726,  726,  724,  727,  728,  729,  730,  731,  732,
       57,  130,  733,  692,  724,  734,  145,   58,  727,  735,
      736,  737,  692,  738,  739,  728,  729,  740,  741,  738,
      742,  692,  743,  744,  745,  746,  715,  747,  715,  748,
      749,  750,  751,  731,  752,  753,  750,  754,  755,  756,
      141,  757,  758,  692,  759,  692,  692,  692,  692,  759,
      692,  144,   58,  692,  744,  692,  692,  715,  190,  692,

      692,  195,  200,  187,  188,  692,  200,  201,  195,  203,
      204,  205,  206,  195,  760,  761,  746,  762,  201,  187,
      188,  692,  195,  196,  205,  692,  217,  188,  196,  205,
      692,  692,  195,  231,  763,  764,  765,  177,  754,  755,
      205,  692,  217,  188,  196,  205,  231,  766,  767,  692,
      198,  768,  692,  195,  231,  769,   58,  692,  692,  770,
      258,  692,  771,  770,  772,  773,  774,  259,  262,  692,
      770,  769,  271,  775,  776,  777,  778,  779,  780,  781,
      776,  777,  782,  783,  784,  785,  786,  784,  787,  270,
      290,  692,  788,  692,  789,  775,  282,  778,  298,  790,

      791,  792,  692,  793,  294,  692,  692,  794,  795,  307,
      794,  796,  797,  798,  798,  799,  315,  315,  800,  315,
      801,  802,  803,  783,  288,  785,  326,  804,  805,  806,
      807,  692,  808,  809,  808,  810,  803,  692,  810,  290,
      692,  692,  692,  811,  692,  692,  692,  692,  342,  692,
      342,  347,  692,  342,  347,  348,  796,  342,  692,  315,
      358,  692,  315,  358,  692,  345,  812,  365,  692,  692,
      692,  812,  813,  814,  815,  816,  817,  805,  818,  807,
      345,  369,  370,  356,  372,  692,  370,  350,  814,  383,
      386,  370,  692,  819,  820,  692,  315,  692,  692,  372,

      393,  347,  388,  315,  347,  358,  402,  398,  821,  822,
      821,  823,  824,  823,  692,  315,  398,  399,  357,  398,
      825,  826,  827,  828,  829,  829,  830,  831,  830,  825,
      826,  832,  832,  833,  827,  828,  834,  834,  835,  836,
      837,  433,  833,  838,  839,  692,  840,  838,  839,  446,
      840,  446,  692,  692,  451,  841,  454,  451,  446,  692,
      454,  692,  692,  462,  451,  842,  454,  451,  843,  844,
      843,  315,  844,  315,  845,  846,  438,  835,  847,  848,
      849,  692,  847,  848,  849,  482,  485,  850,  485,  692,
      482,  692,  490,  485,  851,  485,  490,  852,  692,  852,

      482,  692,  490,  692,  692,  692,  505,  692,  505,  504,
      692,  692,  511,  692,  512,  505,  692,  506,  471,  511,
      518,  315,  505,  692,  692,  853,  524,  692,  514,  692,
      853,  854,  855,  471,  856,  525,  528,  514,  504,  531,
      520,  529,  512,  471,  514,  520,  529,  692,  692,  531,
      548,  471,  857,  471,  858,  859,  692,  860,  861,  484,
      862,  692,  504,  511,  512,  511,  514,  518,  471,  520,
      863,  864,  692,  471,  548,  865,  866,  865,  867,  868,
      867,  573,  471,  548,  573,  315,  692,  869,  869,  870,
      871,  557,  692,  692,  692,  692,  595,  860,  866,  594,

      598,  692,  593,  595,  595,  692,  595,  578,  599,  595,
      578,  872,  873,  862,  868,  614,  692,  692,  692,  618,
      562,  692,  617,  581,  615,  581,  618,  618,  692,  618,
      692,  622,  618,  518,  511,  634,  692,  634,  511,  874,
      875,  598,  876,  877,  614,  874,  875,  557,  598,  557,
      593,  594,  598,  599,  594,  598,  876,  877,  614,  562,
      614,  615,  614,  617,  562,  622,  617,  598,  599,  598,
      614,  615,  614,  594,  596,  594,  594,  596,  594,  595,
      596,  595,  617,  619,  617,  617,  619,  617,  618,  619,
      618,    0,  692,  692,  692,  692,  692,  692,  692,  692,

      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,

      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692
    } ;

static const flex_int16_t yy_nxt[5457] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   10,   11,
       12,   13,   14,   15,   16,   15,   17,   25,   81,  498,
       18,   19,   20,   21,   21,   17,   20,   20,   22,   23,
       20,   23,   24,   56,  133,   25,   26,   27,   28,   29,
       29,   24,   28,   28,   24,   30,   28,   30,   32,   43,
      333,   33,   32,   87,   44,  278,   34,   35,   20,  279,
       34,   88,   36,   70,  190,   37,   37,   20,   70,   70,
       38,   21,   64,  135,   70,   39,   40,   37,   21,   21,
       21,   37,   37,   41,   31,   37,   31,   45,  137,  138,
      498,   46,   47,   48,   49,   49,   45,   48,   48,   50,

       51,   48,   51,   52,   53,   87,   31,   31,   64,  149,
      168,   54,   32,   88,  333,   33,   56,  133,  169,  337,
       34,   35,   52,   53,  321,   31,   31,   56,  133,  120,
       54,   55,   56,  265,   56,   57,   58,   59,   60,   60,
       55,   59,   59,   55,   61,   59,   61,   63,   64,  135,
       64,   65,   66,   67,   68,   68,   63,   67,   67,   63,
       69,   67,   69,   56,   71,  266,   70,   72,   64,  135,
      412,  264,   70,   73,   59,  278,  168,  168,   74,  279,
      190,   75,   75,   59,  169,  169,   59,   60,   56,  265,
       56,   76,   77,   75,   60,   60,   60,   75,   75,   60,

       70,   75,   70,   56,   78,   79,  394,   70,   70,   83,
       84,  216,  395,  337,  394,  248,  216,  214,   85,   90,
      395,  167,  214,   64,  135,  137,  422,   91,   31,  278,
       31,   28,  333,  279,  321,   92,  266,  278,   93,   93,
       28,  279,  264,   28,   37,  177,  170,  120,   94,  394,
      238,   37,   37,   37,  216,  395,   95,   48,  177,  170,
      214,   96,  571,  167,   97,   97,   48,   51,  572,   98,
       29,   89,   86,   25,   99,  100,   93,   29,   29,   29,
       93,   93,   29,   80,   93,   80,   49,   23,   31,  394,
      101,  102,   97,   49,   49,   49,   97,   97,  103,   86,

       97,   86,  105,  571,  571,   25,  106,  107,  108,  109,
      109,  105,  108,  108,  110,  111,  108,  111,   87,  572,
      533,  112,  535,  395,  572,  394,   88,  113,  114,  533,
      394,  535,  115,  116,  117,  118,  118,  114,  117,  117,
      119,  120,  117,  120,  121,  122,  395,   86,   86,  395,
       70,  214,  123,   25,  124,  125,  216,   80,   80,  121,
      122,  216,   86,   86,   70,  155,   70,  123,  126,   86,
       86,   64,  127,  128,  129,  130,  130,  126,  129,  129,
      126,  131,  129,  131,   56,   71,   70,  155,   72,   70,
       70,   62,   62,   31,   73,   56,   78,   79,  104,   70,

       70,   56,  140,   31,   62,   42,  692,  692,  692,  692,
      692,   70,  692,   70,  129,  692,  692,  692,  141,  692,
      692,  142,  142,  129,  692,  692,  129,   75,  692,  692,
      692,  143,  692,  692,   75,   75,   75,  692,  692,   75,
      130,  692,  692,   64,  144,  145,  142,  130,  130,  130,
      142,  142,  130,  134,  142,  134,   64,  146,  147,  692,
      134,  134,  151,  152,  692,  692,  692,  153,  692,  692,
      692,  154,  157,  158,  692,  692,  692,  159,  151,  161,
      692,  692,  692,  162,  692,  692,  692,  163,   25,  165,
      692,  692,  692,  692,  692,  692,  692,  166,  171,  692,

      692,  692,  692,  692,  692,  692,  172,   31,  692,  173,
       25,  175,  692,  692,  692,  692,  692,  692,  692,  692,
       80,  692,  176,  178,  692,  692,  692,  692,  692,  692,
      692,  179,   86,  692,  180,   67,  692,  692,  692,  181,
      692,  692,  182,  182,   67,  692,  692,   67,   93,  692,
      692,  692,  183,  692,  692,   93,   93,   93,  692,  692,
       93,   97,  692,  692,  692,  184,  692,  692,   97,   97,
       97,  692,  692,  185,  108,  692,  692,  692,  186,  692,
      692,  187,  187,  108,  692,  692,  188,  117,  692,  692,
      692,  189,  692,  692,  190,  190,  117,  692,  692,  191,

       68,  692,  692,   64,  192,  193,  182,   68,   68,   68,
      182,  182,   68,  148,  182,  148,  109,  692,  692,   25,
      194,  195,  187,  109,  109,  109,  187,  187,  196,  164,
      187,  164,  118,  692,  692,  692,  197,  198,  190,  118,
      118,  118,  190,  190,  199,  167,  190,  167,  200,  692,
      692,   56,  201,  202,  203,  204,  204,  200,  203,  203,
      205,  206,  203,  206,  207,  692,  692,   64,  208,  209,
      210,  211,  211,  207,  210,  210,  212,  213,  210,  213,
       56,  215,  692,  692,  216,  692,  692,  692,  692,  217,
      218,  203,  692,  692,  692,  219,  692,  692,  220,  220,

      203,  692,  692,  221,  204,  692,  692,   56,  222,  223,
      220,  204,  204,  204,  220,  220,  224,  214,  220,  214,
      225,  692,  692,   56,  226,  227,  228,  229,  229,  225,
      228,  228,  230,  231,  228,  231,  206,  692,  692,   56,
      232,  233,  206,  214,  214,  206,  206,  206,  234,  206,
      206,  206,   83,  236,  692,  692,  692,  692,  692,  692,
      692,  237,  239,  692,  692,  692,  692,  692,  692,  692,
      240,   86,  692,   86,  241,  692,  692,   25,  242,  243,
      244,  245,  245,  241,  244,  244,  246,  247,  244,  247,
      168,  692,  692,  248,  692,  692,  692,  692,  169,  249,

      250,  251,  692,  167,  167,  692,  692,  692,  252,  111,
      692,  692,   25,  253,  254,  111,  164,  164,  111,  111,
      111,  255,  111,  111,  111,  250,  251,  692,  167,  167,
      692,  692,  692,  252,   64,  256,  257,  692,  148,  148,
      258,  692,  692,   56,  259,  260,  261,  262,  262,  258,
      261,  261,  258,  263,  261,  263,   56,  265,  692,  692,
      266,  692,  692,  692,  692,  692,  267,  261,  692,  692,
      692,  268,  692,  692,  269,  269,  261,  692,  692,  261,
      262,  692,  692,   56,  270,  271,  269,  262,  262,  262,
      269,  269,  262,  264,  269,  264,   56,  272,  273,  692,

      264,  264,  275,  276,  692,  692,  692,  277,  281,  282,
      692,  692,  692,  283,   56,  285,  692,  692,  692,  692,
      692,  692,  692,  692,   70,  692,  286,   64,  288,  692,
      692,  692,  692,  692,  692,  692,  692,  134,  692,  289,
      129,  692,  692,  692,  141,  692,  692,  142,  142,  129,
      692,  692,  129,  269,  692,  692,  692,  290,  692,  692,
      269,  269,  269,  692,  692,  269,   64,  291,  145,  692,
      692,  692,  692,  692,  692,  692,  134,  692,  134,  130,
      692,  692,   64,  144,  145,  142,  130,  130,  130,  142,
      142,  130,  134,  142,  134,   56,  265,  692,  692,  692,

      692,  692,  692,  692,  692,  267,   64,  146,  147,  692,
      134,  134,  151,  152,  692,  692,  692,  153,  692,  692,
      692,  154,  157,  158,  692,  692,  692,  159,  292,  692,
      692,  151,  293,  150,  292,  150,  153,  292,  292,  292,
      294,  292,  292,  292,  151,  161,  692,  692,  692,  162,
      692,  692,  692,  163,  151,  692,  151,  692,  151,  155,
      275,  276,  692,  692,  692,  277,  281,  297,  692,  692,
      692,  298,  275,  300,  274,  692,  274,  277,  151,  161,
      692,  692,  692,  162,  692,  692,  692,  163,  157,  302,
      692,  692,  692,  303,  692,  692,  692,  304,  305,  692,

      692,  151,  306,  160,  305,  160,  162,  305,  305,  305,
      307,  305,  305,  305,  151,  309,  692,  692,  692,  310,
      692,  692,  692,  311,   56,  215,  692,  692,  692,  692,
      692,  692,  692,  217,   64,  313,  692,  692,  692,  692,
      692,  692,  692,  314,   56,  316,  692,  692,  692,  692,
      692,  692,  692,  317,   25,  319,  692,  692,  692,  692,
      692,  692,  692,  320,  171,  692,  692,  692,  692,  692,
      692,  692,  172,   31,  692,  173,   25,  175,  692,  692,
      692,  692,  692,  692,  692,  692,   80,  692,  176,  178,
      692,  692,  692,  692,  692,  692,  692,  179,   86,  692,

      180,  322,   31,  692,  692,  692,  692,  692,  692,  323,
       31,  692,   31,   56,  285,  692,  692,  692,  692,  692,
      692,  692,  692,   70,  692,  286,   64,  325,  692,  692,
      692,  692,  692,  692,  692,  692,  148,  692,  326,   56,
      328,   70,  692,  692,  692,  692,  692,  692,  692,   70,
      692,   70,  178,  692,  692,  692,  692,  692,  692,  692,
      179,   86,  692,  180,   25,  330,  692,  692,  692,  692,
      692,  692,  692,  331,  164,  692,  332,  334,  692,  692,
      692,  692,  692,  692,  692,  335,  167,  692,  336,  338,
       86,  692,  692,  692,  692,  692,  692,  339,   86,  692,

       86,   56,  143,   77,  692,  692,  692,  692,  692,  692,
      692,   70,  692,   70,   64,  340,  193,  692,  692,  692,
      692,  692,  692,  692,  148,  692,  148,  187,  692,  692,
       25,  341,  195,  187,  187,  187,  187,  187,  187,  342,
      164,  187,  164,  343,  198,  692,  692,  692,  692,  692,
      692,  344,  167,  692,  167,  210,  692,  692,   64,  345,
      209,  210,  346,  346,  210,  210,  210,  347,  213,  210,
      213,  220,  692,  692,   56,  348,  223,  220,  220,  220,
      220,  220,  220,  349,  214,  220,  214,  228,  692,  692,
       56,  350,  227,  228,  351,  351,  228,  228,  228,  352,

      231,  228,  231,  244,  692,  692,   25,  353,  243,  244,
      354,  354,  244,  244,  244,  355,  247,  244,  247,  343,
      198,  692,  692,  692,  692,  692,  692,  344,  167,  692,
      167,  117,  692,  692,  692,  189,  116,  117,  190,  190,
      117,  117,  117,  191,  120,  117,  120,  211,  692,  692,
       64,  356,  357,  346,  211,  211,  211,  346,  346,  358,
      312,  346,  312,   56,  215,  692,  692,  692,  692,  692,
      692,  692,  217,  218,  229,  692,  692,   56,  359,  360,
      351,  229,  229,  229,  351,  351,  361,  315,  351,  315,
      245,  692,  692,   25,  362,  363,  354,  245,  245,  245,

      354,  354,  364,  318,  354,  318,  168,  692,  692,  692,
      692,  692,  692,  692,  169,  249,  118,  692,  692,  692,
      197,  692,  692,  118,  118,  118,  692,  692,  199,  200,
      692,  692,   56,  201,  202,  203,  204,  204,  200,  203,
      203,  205,  206,  203,  206,  365,  692,  692,   64,  366,
      367,  368,  369,  369,  365,  368,  368,  370,  371,  368,
      371,  203,  692,  692,  692,  219,  692,  692,  220,  220,
      203,  692,  692,  221,  204,  692,  692,  692,  222,  692,
      692,  204,  204,  204,  692,  692,  224,  225,  692,  692,
      692,  226,  692,  692,  229,  229,  225,  692,  692,  230,

      206,  692,  692,   56,  232,  233,  206,  214,  214,  206,
      206,  206,  234,  206,  206,  206,   64,  373,  692,  692,
      692,  692,  692,  692,  692,  374,  137,  376,  692,  692,
      692,  692,  692,  692,  692,  377,   56,  316,  692,  692,
      692,  692,  692,  692,  692,  317,   56,  379,  692,  692,
      692,  692,  692,  692,  692,  380,  214,  692,  214,  368,
      692,  692,  692,  381,  692,  692,  382,  382,  368,  692,
      692,  383,  369,  692,  692,   64,  384,  385,  382,  369,
      369,  369,  382,  382,  386,  372,  382,  372,  387,  692,
      692,   64,  388,  389,  390,  391,  391,  387,  390,  390,

      392,  393,  390,  393,  231,  692,  692,   56,  396,  397,
      231,  315,  315,  231,  231,  231,  398,  231,  231,  231,
      371,  692,  692,   64,  399,  400,  371,  372,  372,  371,
      371,  371,  401,  371,  371,  371,  151,  161,  692,  692,
      692,  162,  692,  692,  692,  163,  157,  302,  692,  692,
      692,  303,  692,  692,  692,  304,  151,  309,  692,  692,
      692,  310,  692,  692,  692,  311,   25,  330,  692,  692,
      692,  692,  692,  692,  692,  331,  164,  692,  332,  334,
      692,  692,  692,  692,  692,  692,  692,  335,  167,  692,
      336,  402,  692,  692,   64,  403,  404,  405,  406,  406,

      402,  405,  405,  407,  408,  405,  408,   83,  410,  692,
      692,  692,  692,  692,  692,  692,  411,  413,  692,  692,
      692,  692,  692,  692,  692,  414,  167,  692,  167,  247,
      692,  692,   25,  415,  416,  247,  318,  318,  247,  247,
      247,  417,  247,  247,  247,  250,  251,  692,  167,  167,
      692,  692,  692,  252,  213,  692,  692,   64,  418,  419,
      213,  312,  312,  213,  213,  213,  420,  213,  213,  213,
       64,  146,  147,  692,  134,  134,  258,  692,  692,   56,
      259,  260,  261,  262,  262,  258,  261,  261,  258,  263,
      261,  263,  126,  692,  692,   64,  127,  128,  129,  130,

      130,  126,  129,  129,  126,  131,  129,  131,   56,  265,
      692,  692,  266,  692,  692,  692,  692,  692,  267,  261,
      692,  692,  692,  268,  692,  692,  269,  269,  261,  692,
      692,  261,  262,  692,  692,   56,  270,  271,  269,  262,
      262,  262,  269,  269,  262,  264,  269,  264,   56,  272,
      273,  692,  264,  264,   56,  424,  692,  692,  692,  692,
      692,  692,  692,  692,  264,  692,  264,  129,  692,  692,
      692,  141,  692,  692,  142,  142,  129,  692,  692,  129,
      269,  692,  692,  692,  290,  692,  692,  269,  269,  269,
      692,  692,  269,  130,  692,  692,   64,  144,  145,  142,

      130,  130,  130,  142,  142,  130,  134,  142,  134,   56,
      265,  692,  692,  692,  692,  692,  692,  692,  692,  267,
       64,  146,  147,  692,  134,  134,  275,  276,  692,  692,
      692,  277,  281,  282,  692,  692,  692,  283,  275,  300,
      274,  692,  274,  277,  275,  426,  692,  692,  692,  427,
      275,  429,  275,  692,  275,  279,  275,  431,  692,  692,
      692,  432,  281,  282,  692,  692,  692,  283,  275,  434,
      430,  692,  430,  432,   56,  285,  692,  692,  692,  692,
      692,  692,  692,  692,   70,  692,  286,   64,  288,  692,
      692,  692,  692,  692,  692,  692,  692,  134,  692,  289,

       56,  328,   70,  692,  692,  692,  692,  692,  692,  692,
       70,  692,   70,   56,  436,  692,  692,  692,  692,  692,
      692,  692,  692,  264,  692,  437,   64,  288,  692,  692,
      692,  692,  692,  692,  692,  692,  134,  692,  289,   56,
      439,  264,  692,  692,  692,  692,  692,  692,  692,  264,
      692,  264,  142,  692,  692,  692,  291,  692,  692,  142,
      142,  142,  692,  692,  142,  292,  692,  692,  151,  293,
      150,  292,  150,  153,  292,  292,  292,  294,  292,  292,
      292,  157,  441,  156,  692,  156,  159,  305,  692,  692,
      151,  306,  160,  305,  160,  162,  305,  305,  305,  307,

      305,  305,  305,  151,  692,  151,  692,  151,  155,  275,
      276,  692,  692,  692,  277,  275,  300,  274,  692,  274,
      277,  281,  443,  280,  692,  280,  283,  275,  445,  692,
      692,  692,  446,  692,  692,  692,  447,  281,  449,  692,
      692,  692,  450,  692,  692,  692,  451,  452,  692,  692,
      275,  453,  444,  452,  444,  446,  452,  452,  452,  454,
      452,  452,  452,  275,  456,  692,  692,  692,  457,  692,
      692,  692,  458,  459,  692,  692,  157,  460,  301,  459,
      301,  303,  459,  459,  459,  461,  459,  459,  459,  462,
      692,  692,  151,  463,  308,  462,  308,  310,  462,  462,

      462,  464,  462,  462,  462,  151,  309,  692,  692,  692,
      310,  692,  692,  692,  311,  157,  466,  692,  692,  692,
      467,  692,  692,  692,  468,  151,  309,  692,  692,  692,
      310,  692,  692,  692,  311,   56,  215,  692,  692,  692,
      692,  692,  692,  692,  217,   64,  373,  692,  692,  692,
      692,  692,  692,  692,  374,   56,  316,  692,  692,  692,
      692,  692,  692,  692,  317,   56,  316,  692,  692,  692,
      692,  692,  692,  692,  317,   64,  470,  692,  692,  692,
      692,  692,  692,  692,  471,   64,  473,  692,  692,  692,
      692,  692,  692,  692,  474,  322,   31,  692,  692,  692,

      692,  692,  692,  323,   31,  692,   31,   25,  476,   80,
      692,  692,  692,  692,  692,  692,  692,   80,  692,   80,
      338,   86,  692,  692,  692,  692,  692,  692,  339,   86,
      692,   86,   56,  285,  692,  692,  692,  692,  692,  692,
      692,  692,   70,  692,  286,   56,  328,   70,  692,  692,
      692,  692,  692,  692,  692,   70,  692,   70,   64,  478,
      134,  692,  692,  692,  692,  692,  692,  692,  134,  692,
      134,   56,  480,  692,  692,  692,  692,  692,  692,  692,
      481,  214,  692,  482,   64,  484,  692,  692,  692,  692,
      692,  692,  692,  485,  312,  692,  486,   56,  488,  692,

      692,  692,  692,  692,  692,  692,  489,  315,  692,  490,
      491,  692,  692,   56,  492,  214,  491,  491,  491,  491,
      491,  491,  493,  214,  491,  214,  334,  692,  692,  692,
      692,  692,  692,  692,  335,  167,  692,  336,   25,  495,
      692,  692,  692,  692,  692,  692,  692,  496,  318,  692,
      497,  334,  692,  692,  692,  692,  692,  692,  692,  335,
      167,  692,  336,  499,  167,  692,  692,  692,  692,  692,
      692,  500,  167,  692,  167,  338,   86,  692,  692,  692,
      692,  692,  692,  339,   86,  692,   86,  501,  692,  692,
       25,  502,  164,  501,  501,  501,  501,  501,  501,  503,

      164,  501,  164,  499,  167,  692,  692,  692,  692,  692,
      692,  500,  167,  692,  167,  346,  692,  692,   64,  504,
      357,  346,  346,  346,  346,  346,  346,  505,  312,  346,
      312,  351,  692,  692,   56,  506,  360,  351,  351,  351,
      351,  351,  351,  507,  315,  351,  315,  354,  692,  692,
       25,  508,  363,  354,  354,  354,  354,  354,  354,  509,
      318,  354,  318,  343,  198,  692,  692,  692,  692,  692,
      692,  344,  167,  692,  167,  368,  692,  692,   64,  381,
      367,  368,  382,  382,  368,  368,  368,  383,  371,  368,
      371,  220,  692,  692,   56,  348,  223,  220,  220,  220,

      220,  220,  220,  349,  214,  220,  214,  228,  692,  692,
       56,  350,  227,  228,  351,  351,  228,  228,  228,  352,
      231,  228,  231,  382,  692,  692,   64,  510,  385,  382,
      382,  382,  382,  382,  382,  511,  372,  382,  372,  390,
      692,  692,   64,  512,  389,  390,  513,  513,  390,  390,
      390,  514,  393,  390,  393,  405,  692,  692,   64,  515,
      404,  405,  516,  516,  405,  405,  405,  517,  408,  405,
      408,  369,  692,  692,  692,  384,  692,  692,  369,  369,
      369,  692,  692,  386,   56,  215,  692,  692,  692,  692,
      692,  692,  692,  217,  218,  229,  692,  692,  692,  359,

      692,  692,  229,  229,  229,  692,  692,  361,  391,  692,
      692,   64,  518,  519,  513,  391,  391,  391,  513,  513,
      520,  469,  513,  469,  406,  692,  692,   64,  521,  522,
      516,  406,  406,  406,  516,  516,  523,  472,  516,  472,
      524,  692,  692,   56,  525,  526,  527,  528,  528,  524,
      527,  527,  529,  530,  527,  530,  365,  692,  692,  692,
      366,  692,  692,  369,  369,  365,  692,  692,  370,   56,
      532,  692,  692,  533,  692,  692,  692,  692,  534,  535,
      527,  692,  692,  692,  536,  692,  692,  537,  537,  527,
      692,  692,  538,  528,  692,  692,   56,  539,  540,  537,

      528,  528,  528,  537,  537,  541,  531,  537,  531,  542,
      692,  692,   56,  543,  544,  545,  546,  546,  542,  545,
      545,  547,  548,  545,  548,  530,  692,  692,   56,  549,
      550,  530,  531,  531,  530,  530,  530,  551,  530,  530,
      530,   56,  532,  692,  692,  692,  692,  692,  692,  692,
      534,   64,  373,  692,  692,  692,  692,  692,  692,  692,
      374,   56,  553,  692,  692,  692,  692,  692,  692,  692,
      554,  275,  445,  692,  692,  692,  446,  692,  692,  692,
      447,  281,  556,  692,  692,  692,  557,  692,  692,  692,
      558,  275,  456,  692,  692,  692,  457,  692,  692,  692,

      458,   56,  480,  692,  692,  692,  692,  692,  692,  692,
      481,  214,  692,  482,   64,  560,  692,  692,  692,  692,
      692,  692,  692,  561,  372,  692,  562,   56,  488,  692,
      692,  692,  692,  692,  692,  692,  489,  315,  692,  490,
      537,  692,  692,  692,  563,  692,  692,  537,  537,  537,
      692,  692,  564,  545,  692,  692,  692,  565,  692,  692,
      566,  566,  545,  692,  692,  567,  546,  692,  692,   56,
      568,  569,  566,  546,  546,  546,  566,  566,  570,  552,
      566,  552,  387,  692,  692,  692,  388,  692,  692,  391,
      391,  387,  692,  692,  392,   56,  553,  692,  692,  571,

      692,  692,  692,  692,  554,  572,  548,  692,  692,   56,
      573,  574,  548,  552,  552,  548,  548,  548,  575,  548,
      548,  548,  137,  577,  692,  692,  692,  692,  692,  692,
      692,  578,   56,  580,  692,  692,  692,  692,  692,  692,
      692,  581,  315,  692,  315,  393,  692,  692,   64,  582,
      583,  393,  469,  469,  393,  393,  393,  584,  393,  393,
      393,  231,  692,  692,   56,  396,  397,  231,  315,  315,
      231,  231,  231,  398,  231,  231,  231,  371,  692,  692,
       64,  399,  400,  371,  372,  372,  371,  371,  371,  401,
      371,  371,  371,  225,  692,  692,  692,  226,  692,  692,

      229,  229,  225,  692,  692,  230,  151,  309,  692,  692,
      692,  310,  692,  692,  692,  311,  157,  466,  692,  692,
      692,  467,  692,  692,  692,  468,  151,  309,  692,  692,
      692,  310,  692,  692,  692,  311,  334,  692,  692,  692,
      692,  692,  692,  692,  335,  167,  692,  336,   25,  495,
      692,  692,  692,  692,  692,  692,  692,  496,  318,  692,
      497,  334,  692,  692,  692,  692,  692,  692,  692,  335,
      167,  692,  336,  408,  692,  692,   64,  585,  586,  408,
      472,  472,  408,  408,  408,  587,  408,  408,  408,  275,
      431,  692,  692,  692,  432,  281,  282,  692,  692,  692,

      283,   56,  436,  692,  692,  692,  692,  692,  692,  692,
      692,  264,  692,  437,   64,  288,  692,  692,  692,  692,
      692,  692,  692,  692,  134,  692,  289,  275,  426,  692,
      692,  692,  427,  275,  426,  692,  692,  692,  427,  275,
      589,  425,  692,  425,  427,  275,  429,  275,  692,  275,
      279,  275,  589,  425,  692,  425,  427,  275,  431,  692,
      692,  692,  432,  281,  282,  692,  692,  692,  283,  275,
      434,  430,  692,  430,  432,  275,  434,  430,  692,  430,
      432,  281,  443,  280,  692,  280,  283,   56,  436,  692,
      692,  692,  692,  692,  692,  692,  692,  264,  692,  437,

       64,  288,  692,  692,  692,  692,  692,  692,  692,  692,
      134,  692,  289,   56,  439,  264,  692,  692,  692,  692,
      692,  692,  692,  264,  692,  264,   56,  439,  264,  692,
      692,  692,  692,  692,  692,  692,  264,  692,  264,   64,
      478,  134,  692,  692,  692,  692,  692,  692,  692,  134,
      692,  134,  275,  300,  274,  692,  274,  277,  281,  591,
      296,  692,  296,  298,  281,  443,  280,  692,  280,  283,
      275,  445,  692,  692,  692,  446,  692,  692,  692,  447,
      281,  556,  692,  692,  692,  557,  692,  692,  692,  558,
      452,  692,  692,  275,  453,  444,  452,  444,  446,  452,

      452,  452,  454,  452,  452,  452,  275,  456,  692,  692,
      692,  457,  692,  692,  692,  458,  275,  445,  692,  692,
      692,  446,  692,  692,  692,  447,  281,  556,  692,  692,
      692,  557,  692,  692,  692,  558,  275,  456,  692,  692,
      692,  457,  692,  692,  692,  458,  592,  692,  692,  281,
      593,  555,  592,  555,  557,  592,  592,  592,  594,  592,
      592,  592,  595,  692,  692,  275,  596,  455,  595,  455,
      457,  595,  595,  595,  597,  595,  595,  595,  281,  599,
      692,  692,  692,  600,  692,  692,  692,  601,  602,  692,
      692,  281,  603,  448,  602,  448,  450,  602,  602,  602,

      604,  602,  602,  602,  462,  692,  692,  151,  463,  308,
      462,  308,  310,  462,  462,  462,  464,  462,  462,  462,
      605,  692,  692,  157,  606,  465,  605,  465,  467,  605,
      605,  605,  607,  605,  605,  605,  281,  609,  692,  692,
      692,  610,  692,  692,  692,  611,   56,  553,  692,  692,
      692,  692,  692,  692,  692,  554,   64,  470,  692,  692,
      692,  692,  692,  692,  692,  471,   56,  553,  692,  692,
      692,  692,  692,  692,  692,  554,   64,  470,  692,  692,
      692,  692,  692,  692,  692,  471,   56,  328,   70,  692,
      692,  692,  692,  692,  692,  692,   70,  692,   70,   64,

      613,  148,  692,  692,  692,  692,  692,  692,  692,  148,
      692,  148,   64,  478,  134,  692,  692,  692,  692,  692,
      692,  692,  134,  692,  134,   56,  480,  692,  692,  692,
      692,  692,  692,  692,  481,  214,  692,  482,   64,  560,
      692,  692,  692,  692,  692,  692,  692,  561,  372,  692,
      562,   56,  488,  692,  692,  692,  692,  692,  692,  692,
      489,  315,  692,  490,  491,  692,  692,   56,  492,  214,
      491,  491,  491,  491,  491,  491,  493,  214,  491,  214,
       56,  480,  692,  692,  692,  692,  692,  692,  692,  481,
      214,  692,  482,   64,  560,  692,  692,  692,  692,  692,

      692,  692,  561,  372,  692,  562,   56,  488,  692,  692,
      692,  692,  692,  692,  692,  489,  315,  692,  490,   64,
      615,  692,  692,  692,  692,  692,  692,  692,  616,  469,
      692,  617,  618,  692,  692,   56,  619,  315,  618,  618,
      618,  618,  618,  618,  620,  315,  618,  315,  621,  692,
      692,   64,  622,  372,  621,  621,  621,  621,  621,  621,
      623,  372,  621,  372,   64,  625,  692,  692,  692,  692,
      692,  692,  692,  626,  472,  692,  627,  499,  167,  692,
      692,  692,  692,  692,  692,  500,  167,  692,  167,  628,
      692,  692,   25,  629,  318,  628,  628,  628,  628,  628,

      628,  630,  318,  628,  318,  499,  167,  692,  692,  692,
      692,  692,  692,  500,  167,  692,  167,  631,  692,  692,
       64,  632,  312,  631,  631,  631,  631,  631,  631,  633,
      312,  631,  312,  382,  692,  692,   64,  510,  385,  382,
      382,  382,  382,  382,  382,  511,  372,  382,  372,  351,
      692,  692,   56,  506,  360,  351,  351,  351,  351,  351,
      351,  507,  315,  351,  315,  513,  692,  692,   64,  634,
      519,  513,  513,  513,  513,  513,  513,  635,  469,  513,
      469,  516,  692,  692,   64,  636,  522,  516,  516,  516,
      516,  516,  516,  637,  472,  516,  472,  566,  692,  692,

       56,  638,  569,  566,  566,  566,  566,  566,  566,  639,
      552,  566,  552,  390,  692,  692,   64,  512,  389,  390,
      513,  513,  390,  390,  390,  514,  393,  390,  393,  545,
      692,  692,   56,  565,  544,  545,  566,  566,  545,  545,
      545,  567,  548,  545,  548,  228,  692,  692,   56,  350,
      227,  228,  351,  351,  228,  228,  228,  352,  231,  228,
      231,  391,  692,  692,  692,  518,  692,  692,  391,  391,
      391,  692,  692,  520,  546,  692,  692,  692,  568,  692,
      692,  546,  546,  546,  692,  692,  570,  229,  692,  692,
      692,  359,  692,  692,  229,  229,  229,  692,  692,  361,

      524,  692,  692,   56,  525,  526,  527,  528,  528,  524,
      527,  527,  529,  530,  527,  530,  365,  692,  692,   64,
      366,  367,  368,  369,  369,  365,  368,  368,  370,  371,
      368,  371,   56,  532,  692,  692,  533,  692,  692,  692,
      692,  534,  535,  527,  692,  692,  692,  536,  692,  692,
      537,  537,  527,  692,  692,  538,  528,  692,  692,   56,
      539,  540,  537,  528,  528,  528,  537,  537,  541,  531,
      537,  531,  542,  692,  692,  692,  543,  692,  692,  546,
      546,  542,  692,  692,  547,  530,  692,  692,   56,  549,
      550,  530,  531,  531,  530,  530,  530,  551,  530,  530,

      530,   56,  532,  692,  692,  692,  692,  692,  692,  692,
      534,   64,  373,  692,  692,  692,  692,  692,  692,  692,
      374,  137,  641,  692,  692,  692,  692,  692,  692,  692,
      642,   56,  644,  692,  692,  692,  692,  692,  692,  692,
      645,  531,  692,  531,  368,  692,  692,  692,  381,  692,
      692,  382,  382,  368,  692,  692,  383,  537,  692,  692,
      692,  563,  692,  692,  537,  537,  537,  692,  692,  564,
      369,  692,  692,  692,  384,  692,  692,  369,  369,  369,
      692,  692,  386,  387,  692,  692,  692,  388,  692,  692,
      391,  391,  387,  692,  692,  392,  548,  692,  692,   56,

      573,  574,  548,  552,  552,  548,  548,  548,  575,  548,
      548,  548,  371,  692,  692,   64,  399,  400,  371,  372,
      372,  371,  371,  371,  401,  371,  371,  371,   64,  470,
      692,  692,  692,  692,  692,  692,  692,  471,  275,  647,
      692,  692,  692,  648,  692,  692,  692,  649,  281,  556,
      692,  692,  692,  557,  692,  692,  692,  558,  650,  692,
      692,  275,  651,  646,  650,  646,  648,  650,  650,  650,
      652,  650,  650,  650,  275,  654,  692,  692,  692,  655,
      692,  692,  692,  656,   56,  658,  692,  692,  692,  692,
      692,  692,  692,  659,  531,  692,  660,   56,  662,  692,

      692,  692,  692,  692,  692,  692,  663,  552,  692,  664,
      665,  692,  692,   56,  666,  531,  665,  665,  665,  665,
      665,  665,  667,  531,  665,  531,  137,  669,  692,  692,
      692,  692,  692,  692,  692,  670,   56,  672,  692,  692,
      692,  692,  692,  692,  692,  673,  552,  692,  552,  393,
      692,  692,   64,  582,  583,  393,  469,  469,  393,  393,
      393,  584,  393,  393,  393,  275,  456,  692,  692,  692,
      457,  692,  692,  692,  458,  281,  599,  692,  692,  692,
      600,  692,  692,  692,  601,  275,  456,  692,  692,  692,
      457,  692,  692,  692,  458,   56,  488,  692,  692,  692,

      692,  692,  692,  692,  489,  315,  692,  490,   64,  615,
      692,  692,  692,  692,  692,  692,  692,  616,  469,  692,
      617,   56,  488,  692,  692,  692,  692,  692,  692,  692,
      489,  315,  692,  490,  231,  692,  692,   56,  396,  397,
      231,  315,  315,  231,  231,  231,  398,  231,  231,  231,
      275,  589,  425,  692,  425,  427,  275,  589,  425,  692,
      425,  427,  275,  300,  274,  692,  274,  277,  281,  443,
      280,  692,  280,  283,  592,  692,  692,  281,  593,  555,
      592,  555,  557,  592,  592,  592,  594,  592,  592,  592,
      674,  692,  692,  275,  675,  653,  674,  653,  655,  674,

      674,  674,  676,  674,  674,  674,  595,  692,  692,  275,
      596,  455,  595,  455,  457,  595,  595,  595,  597,  595,
      595,  595,  677,  692,  692,  281,  678,  598,  677,  598,
      600,  677,  677,  677,  679,  677,  677,  677,  275,  654,
      692,  692,  692,  655,  692,  692,  692,  656,  281,  599,
      692,  692,  692,  600,  692,  692,  692,  601,  452,  692,
      692,  275,  453,  444,  452,  444,  446,  452,  452,  452,
      454,  452,  452,  452,  680,  692,  692,  281,  681,  608,
      680,  608,  610,  680,  680,  680,  682,  680,  680,  680,
       56,  328,   70,  692,  692,  692,  692,  692,  692,  692,

       70,  692,   70,   64,  478,  134,  692,  692,  692,  692,
      692,  692,  692,  134,  692,  134,   56,  662,  692,  692,
      692,  692,  692,  692,  692,  663,  552,  692,  664,   64,
      615,  692,  692,  692,  692,  692,  692,  692,  616,  469,
      692,  617,  683,  692,  692,   56,  684,  552,  683,  683,
      683,  683,  683,  683,  685,  552,  683,  552,  618,  692,
      692,   56,  619,  315,  618,  618,  618,  618,  618,  618,
      620,  315,  618,  315,  686,  692,  692,   64,  687,  469,
      686,  686,  686,  686,  686,  686,  688,  469,  686,  469,
      621,  692,  692,   64,  622,  372,  621,  621,  621,  621,

      621,  621,  623,  372,  621,  372,  689,  692,  692,   64,
      690,  472,  689,  689,  689,  689,  689,  689,  691,  472,
      689,  472,  491,  692,  692,   56,  492,  214,  491,  491,
      491,  491,  491,  491,  493,  214,  491,  214,  513,  692,
      692,  692,  634,  692,  692,  513,  513,  513,  692,  692,
      635,  351,  692,  692,   56,  506,  360,  351,  351,  351,
      351,  351,  351,  507,  315,  351,  315,  275,  647,  692,
      692,  692,  648,  692,  692,  692,  649,  281,  556,  692,
      692,  692,  557,  692,  692,  692,  558,   56,  658,  692,
      692,  692,  692,  692,  692,  692,  659,  531,  692,  660,

       64,  560,  692,  692,  692,  692,  692,  692,  692,  561,
      372,  692,  562,  275,  647,  692,  692,  692,  648,  692,
      692,  692,  649,  281,  556,  692,  692,  692,  557,  692,
      692,  692,  558,   56,  658,  692,  692,  692,  692,  692,
      692,  692,  659,  531,  692,  660,   64,  560,  692,  692,
      692,  692,  692,  692,  692,  561,  372,  692,  562,   56,
      692,   56,   70,  692,   70,   61,  692,   61,   80,  692,
       80,   82,  692,   82,   30,  692,   30,  132,  692,  132,
      134,  692,  134,  136,  692,  136,  139,  692,  139,  131,
      692,  131,  148,  692,  148,  150,  692,  150,  151,  692,

      151,  156,  692,  156,  160,  692,  160,  164,  692,  164,
      174,  692,  174,  214,  692,  214,  235,  692,  235,   69,
      692,   69,  264,  692,  264,  263,  692,  263,  132,  692,
      132,  134,  692,  134,  274,  692,  274,  275,  692,  275,
      280,  692,  280,  284,  692,  284,  287,  692,  287,  142,
      692,  142,  131,  692,  131,  150,  692,  150,  151,  692,
      151,  156,  692,  156,  160,  692,  160,  295,  692,  295,
      296,  692,  296,  299,  692,  299,  301,  692,  301,  308,
      692,  308,  214,  692,  214,  312,  692,  312,  315,  692,
      315,  318,  692,  318,  174,  692,  174,  324,  692,  324,

      327,  692,  327,  329,  692,  329,   75,  692,   75,  182,
      692,  182,  372,  692,  372,  375,  692,  375,  378,  692,
      378,  160,  692,  160,  301,  692,  301,  308,  692,  308,
      409,  692,  409,  131,  692,  131,  264,  692,  264,  263,
      692,  263,  134,  692,  134,  421,  692,  421,  423,  692,
      423,  274,  692,  274,  275,  692,  275,  280,  692,  280,
      299,  692,  299,  425,  692,  425,  428,  692,  428,  430,
      692,  430,  433,  692,  433,  284,  692,  284,  287,  692,
      287,  327,  692,  327,  435,  692,  435,  438,  692,  438,
      440,  692,  440,  295,  692,  295,  442,  692,  442,  444,

      692,  444,  448,  692,  448,  455,  692,  455,  308,  692,
      308,  465,  692,  465,  214,  692,  214,  372,  692,  372,
      315,  692,  315,  469,  692,  469,  472,  692,  472,  475,
      692,  475,  477,  692,  477,  479,  692,  479,  483,  692,
      483,  487,  692,  487,  494,  692,  494,  531,  692,  531,
      372,  692,  372,  552,  692,  552,  444,  692,  444,  555,
      692,  555,  455,  692,  455,  559,  692,  559,  576,  692,
      576,  579,  692,  579,  308,  692,  308,  465,  692,  465,
      494,  692,  494,  430,  692,  430,  280,  692,  280,  435,
      692,  435,  287,  692,  287,  425,  692,  425,  588,  692,

      588,  428,  692,  428,  433,  692,  433,  442,  692,  442,
      438,  692,  438,  477,  692,  477,  299,  692,  299,  590,
      692,  590,  444,  692,  444,  555,  692,  555,  455,  692,
      455,  598,  692,  598,  608,  692,  608,  552,  692,  552,
      469,  692,  469,  327,  692,  327,  612,  692,  612,  479,
      692,  479,  559,  692,  559,  487,  692,  487,  614,  692,
      614,  624,  692,  624,  531,  692,  531,  372,  692,  372,
      640,  692,  640,  643,  692,  643,  469,  692,  469,  646,
      692,  646,  555,  692,  555,  653,  692,  653,  657,  692,
      657,  661,  692,  661,  668,  692,  668,  671,  692,  671,

      455,  692,  455,  598,  692,  598,  487,  692,  487,  614,
      692,  614,  588,  692,  588,  299,  692,  299,  442,  692,
      442,  327,  692,  327,  477,  692,  477,  646,  692,  646,
      555,  692,  555,  657,  692,  657,  559,  692,  559,    3,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692
    } ;

static const flex_int16_t yy_chk[5457] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    4,   32,   32,  852,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    7,   62,   62,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    8,   13,
      823,    8,   31,   34,   13,  137,    8,    8,    9,  137,
       31,   34,    9,   70,  811,    9,    9,    9,   80,   70,
        9,   10,   71,   71,   80,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   14,   72,   72,
      810,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   15,   15,   86,   15,   15,   81,   81,
       88,   15,   19,   86,  808,   19,  132,  132,   88,  803,
       19,   19,   23,   23,  801,   23,   23,  133,  133,  768,
       23,   24,  134,  134,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   26,  135,  135,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   27,   27,  147,  148,   27,  149,  149,
      767,  147,  148,   27,   28,  157,  167,  169,   28,  157,
      759,   28,   28,   28,  167,  169,   28,   29,  264,  264,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   30,   30,   30,  227,   30,   30,   33,
       33,  233,  227,  756,  243,  251,  254,  233,   33,   35,
      243,  251,  254,  265,  265,  266,  266,   35,   35,  275,
       35,   36,  755,  275,  751,   36,  273,  281,   36,   36,
       36,  281,  273,   36,   37,  750,  748,  722,   37,  404,
      721,   37,   37,   37,  419,  404,   37,   38,  718,  716,
      419,   38,  544,  715,   38,   38,   38,  702,  544,   38,
       39,  701,  700,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   41,  694,  693,  586,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   46,  583,  574,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   47,  569,
      550,   47,  540,  522,  519,  416,   47,   47,   50,  400,
      397,  385,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   51,   51,  363,   51,   51,  360,
      257,  214,   51,   52,   52,   52,  209,   52,   52,   54,
       54,  202,   54,   54,  193,  151,  125,   54,   57,  122,
      102,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   58,   58,  100,   83,   58,   79,
       77,   64,   56,   53,   58,   61,   61,   61,   44,   61,

       61,   73,   73,   40,   25,   11,    3,    0,    0,    0,
        0,   73,    0,   73,   74,    0,    0,    0,   74,    0,
        0,   74,   74,   74,    0,    0,   74,   75,    0,    0,
        0,   75,    0,    0,   75,   75,   75,    0,    0,   75,
       76,    0,    0,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   78,   78,   78,    0,
       78,   78,   82,   82,    0,    0,    0,   82,    0,    0,
        0,   82,   84,   84,    0,    0,    0,   84,   85,   85,
        0,    0,    0,   85,    0,    0,    0,   85,   87,   87,
        0,    0,    0,    0,    0,    0,    0,   87,   89,    0,

        0,    0,    0,    0,    0,    0,   89,   89,    0,   89,
       90,   90,    0,    0,    0,    0,    0,    0,    0,    0,
       90,    0,   90,   91,    0,    0,    0,    0,    0,    0,
        0,   91,   91,    0,   91,   92,    0,    0,    0,   92,
        0,    0,   92,   92,   92,    0,    0,   92,   94,    0,
        0,    0,   94,    0,    0,   94,   94,   94,    0,    0,
       94,   95,    0,    0,    0,   95,    0,    0,   95,   95,
       95,    0,    0,   95,   96,    0,    0,    0,   96,    0,
        0,   96,   96,   96,    0,    0,   96,   98,    0,    0,
        0,   98,    0,    0,   98,   98,   98,    0,    0,   98,

       99,    0,    0,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,  101,    0,    0,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  103,    0,    0,    0,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  105,    0,
        0,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  106,    0,    0,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      107,  107,    0,    0,  107,    0,    0,    0,    0,  107,
      107,  108,    0,    0,    0,  108,    0,    0,  108,  108,

      108,    0,    0,  108,  109,    0,    0,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      110,    0,    0,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  111,    0,    0,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  112,  112,    0,    0,    0,    0,    0,    0,
        0,  112,  113,    0,    0,    0,    0,    0,    0,    0,
      113,  113,    0,  113,  115,    0,    0,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      116,    0,    0,  116,    0,    0,    0,    0,  116,  116,

      120,  120,    0,  120,  120,    0,    0,    0,  120,  121,
        0,    0,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  123,  123,    0,  123,  123,
        0,    0,    0,  123,  124,  124,  124,    0,  124,  124,
      126,    0,    0,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  128,  128,    0,    0,
      128,    0,    0,    0,    0,    0,  128,  129,    0,    0,
        0,  129,    0,    0,  129,  129,  129,    0,    0,  129,
      130,    0,    0,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  131,  131,  131,    0,

      131,  131,  136,  136,    0,    0,    0,  136,  138,  138,
        0,    0,    0,  138,  139,  139,    0,    0,    0,    0,
        0,    0,    0,    0,  139,    0,  139,  140,  140,    0,
        0,    0,    0,    0,    0,    0,    0,  140,    0,  140,
      141,    0,    0,    0,  141,    0,    0,  141,  141,  141,
        0,    0,  141,  142,    0,    0,    0,  142,    0,    0,
      142,  142,  142,    0,    0,  142,  143,  143,  143,    0,
        0,    0,    0,    0,    0,    0,  143,    0,  143,  144,
        0,    0,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  145,  145,    0,    0,    0,

        0,    0,    0,    0,    0,  145,  146,  146,  146,    0,
      146,  146,  150,  150,    0,    0,    0,  150,    0,    0,
        0,  150,  152,  152,    0,    0,    0,  152,  153,    0,
        0,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  154,  154,    0,    0,    0,  154,
        0,    0,    0,  154,  155,    0,  155,    0,  155,  155,
      156,  156,    0,    0,    0,  156,  158,  158,    0,    0,
        0,  158,  159,  159,  159,    0,  159,  159,  160,  160,
        0,    0,    0,  160,    0,    0,    0,  160,  161,  161,
        0,    0,    0,  161,    0,    0,    0,  161,  162,    0,

        0,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  163,  163,    0,    0,    0,  163,
        0,    0,    0,  163,  164,  164,    0,    0,    0,    0,
        0,    0,    0,  164,  165,  165,    0,    0,    0,    0,
        0,    0,    0,  165,  166,  166,    0,    0,    0,    0,
        0,    0,    0,  166,  168,  168,    0,    0,    0,    0,
        0,    0,    0,  168,  170,    0,    0,    0,    0,    0,
        0,    0,  170,  170,    0,  170,  171,  171,    0,    0,
        0,    0,    0,    0,    0,    0,  171,    0,  171,  172,
        0,    0,    0,    0,    0,    0,    0,  172,  172,    0,

      172,  173,  173,    0,    0,    0,    0,    0,    0,  173,
      173,    0,  173,  174,  174,    0,    0,    0,    0,    0,
        0,    0,    0,  174,    0,  174,  175,  175,    0,    0,
        0,    0,    0,    0,    0,    0,  175,    0,  175,  176,
      176,  176,    0,    0,    0,    0,    0,    0,    0,  176,
        0,  176,  177,    0,    0,    0,    0,    0,    0,    0,
      177,  177,    0,  177,  178,  178,    0,    0,    0,    0,
        0,    0,    0,  178,  178,    0,  178,  179,    0,    0,
        0,    0,    0,    0,    0,  179,  179,    0,  179,  180,
      180,    0,    0,    0,    0,    0,    0,  180,  180,    0,

      180,  182,  182,  182,    0,    0,    0,    0,    0,    0,
        0,  182,    0,  182,  183,  183,  183,    0,    0,    0,
        0,    0,    0,    0,  183,    0,  183,  184,    0,    0,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  185,  185,    0,    0,    0,    0,    0,
        0,  185,  185,    0,  185,  186,    0,    0,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  187,    0,    0,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  188,    0,    0,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,

      188,  188,  188,  189,    0,    0,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  190,
      190,    0,    0,    0,    0,    0,    0,  190,  190,    0,
      190,  191,    0,    0,    0,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  194,    0,    0,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  195,  195,    0,    0,    0,    0,    0,
        0,    0,  195,  195,  196,    0,    0,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      197,    0,    0,  197,  197,  197,  197,  197,  197,  197,

      197,  197,  197,  197,  197,  197,  198,    0,    0,    0,
        0,    0,    0,    0,  198,  198,  199,    0,    0,    0,
      199,    0,    0,  199,  199,  199,    0,    0,  199,  200,
        0,    0,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  201,    0,    0,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  203,    0,    0,    0,  203,    0,    0,  203,  203,
      203,    0,    0,  203,  204,    0,    0,    0,  204,    0,
        0,  204,  204,  204,    0,    0,  204,  205,    0,    0,
        0,  205,    0,    0,  205,  205,  205,    0,    0,  205,

      206,    0,    0,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  215,  215,    0,    0,
        0,    0,    0,    0,    0,  215,  216,  216,    0,    0,
        0,    0,    0,    0,    0,  216,  217,  217,    0,    0,
        0,    0,    0,    0,    0,  217,  218,  218,    0,    0,
        0,    0,    0,    0,    0,  218,  218,    0,  218,  219,
        0,    0,    0,  219,    0,    0,  219,  219,  219,    0,
        0,  219,  222,    0,    0,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  226,    0,
        0,  226,  226,  226,  226,  226,  226,  226,  226,  226,

      226,  226,  226,  226,  231,    0,    0,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      232,    0,    0,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  235,  235,    0,    0,
        0,  235,    0,    0,    0,  235,  236,  236,    0,    0,
        0,  236,    0,    0,    0,  236,  237,  237,    0,    0,
        0,  237,    0,    0,    0,  237,  239,  239,    0,    0,
        0,    0,    0,    0,    0,  239,  239,    0,  239,  240,
        0,    0,    0,    0,    0,    0,    0,  240,  240,    0,
      240,  242,    0,    0,  242,  242,  242,  242,  242,  242,

      242,  242,  242,  242,  242,  242,  242,  248,  248,    0,
        0,    0,    0,    0,    0,    0,  248,  249,    0,    0,
        0,    0,    0,    0,    0,  249,  249,    0,  249,  250,
        0,    0,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  252,  252,    0,  252,  252,
        0,    0,    0,  252,  253,    0,    0,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      256,  256,  256,    0,  256,  256,  258,    0,    0,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  259,    0,    0,  259,  259,  259,  259,  259,

      259,  259,  259,  259,  259,  259,  259,  259,  260,  260,
        0,    0,  260,    0,    0,    0,    0,    0,  260,  261,
        0,    0,    0,  261,    0,    0,  261,  261,  261,    0,
        0,  261,  262,    0,    0,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  263,  263,
      263,    0,  263,  263,  267,  267,    0,    0,    0,    0,
        0,    0,    0,    0,  267,    0,  267,  268,    0,    0,
        0,  268,    0,    0,  268,  268,  268,    0,    0,  268,
      269,    0,    0,    0,  269,    0,    0,  269,  269,  269,
        0,    0,  269,  270,    0,    0,  270,  270,  270,  270,

      270,  270,  270,  270,  270,  270,  270,  270,  270,  271,
      271,    0,    0,    0,    0,    0,    0,    0,    0,  271,
      272,  272,  272,    0,  272,  272,  274,  274,    0,    0,
        0,  274,  276,  276,    0,    0,    0,  276,  277,  277,
      277,    0,  277,  277,  278,  278,    0,    0,    0,  278,
      279,  279,  279,    0,  279,  279,  280,  280,    0,    0,
        0,  280,  282,  282,    0,    0,    0,  282,  283,  283,
      283,    0,  283,  283,  284,  284,    0,    0,    0,    0,
        0,    0,    0,    0,  284,    0,  284,  285,  285,    0,
        0,    0,    0,    0,    0,    0,    0,  285,    0,  285,

      286,  286,  286,    0,    0,    0,    0,    0,    0,    0,
      286,    0,  286,  287,  287,    0,    0,    0,    0,    0,
        0,    0,    0,  287,    0,  287,  288,  288,    0,    0,
        0,    0,    0,    0,    0,    0,  288,    0,  288,  289,
      289,  289,    0,    0,    0,    0,    0,    0,    0,  289,
        0,  289,  290,    0,    0,    0,  290,    0,    0,  290,
      290,  290,    0,    0,  290,  292,    0,    0,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  293,  293,  293,    0,  293,  293,  294,    0,    0,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,

      294,  294,  294,  295,    0,  295,    0,  295,  295,  296,
      296,    0,    0,    0,  296,  298,  298,  298,    0,  298,
      298,  300,  300,  300,    0,  300,  300,  301,  301,    0,
        0,    0,  301,    0,    0,    0,  301,  302,  302,    0,
        0,    0,  302,    0,    0,    0,  302,  303,    0,    0,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  304,  304,    0,    0,    0,  304,    0,
        0,    0,  304,  306,    0,    0,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  307,
        0,    0,  307,  307,  307,  307,  307,  307,  307,  307,

      307,  307,  307,  307,  307,  308,  308,    0,    0,    0,
      308,    0,    0,    0,  308,  309,  309,    0,    0,    0,
      309,    0,    0,    0,  309,  311,  311,    0,    0,    0,
      311,    0,    0,    0,  311,  312,  312,    0,    0,    0,
        0,    0,    0,    0,  312,  313,  313,    0,    0,    0,
        0,    0,    0,    0,  313,  314,  314,    0,    0,    0,
        0,    0,    0,    0,  314,  315,  315,    0,    0,    0,
        0,    0,    0,    0,  315,  316,  316,    0,    0,    0,
        0,    0,    0,    0,  316,  319,  319,    0,    0,    0,
        0,    0,    0,    0,  319,  321,  321,    0,    0,    0,

        0,    0,    0,  321,  321,    0,  321,  322,  322,  322,
        0,    0,    0,    0,    0,    0,    0,  322,    0,  322,
      323,  323,    0,    0,    0,    0,    0,    0,  323,  323,
        0,  323,  324,  324,    0,    0,    0,    0,    0,    0,
        0,    0,  324,    0,  324,  326,  326,  326,    0,    0,
        0,    0,    0,    0,    0,  326,    0,  326,  328,  328,
      328,    0,    0,    0,    0,    0,    0,    0,  328,    0,
      328,  329,  329,    0,    0,    0,    0,    0,    0,    0,
      329,  329,    0,  329,  330,  330,    0,    0,    0,    0,
        0,    0,    0,  330,  330,    0,  330,  331,  331,    0,

        0,    0,    0,    0,    0,    0,  331,  331,    0,  331,
      332,    0,    0,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  333,    0,    0,    0,
        0,    0,    0,    0,  333,  333,    0,  333,  334,  334,
        0,    0,    0,    0,    0,    0,    0,  334,  334,    0,
      334,  335,    0,    0,    0,    0,    0,    0,    0,  335,
      335,    0,  335,  336,  336,    0,    0,    0,    0,    0,
        0,  336,  336,    0,  336,  337,  337,    0,    0,    0,
        0,    0,    0,  337,  337,    0,  337,  338,    0,    0,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,

      338,  338,  338,  339,  339,    0,    0,    0,    0,    0,
        0,  339,  339,    0,  339,  341,    0,    0,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  342,    0,    0,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  343,    0,    0,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  344,  344,    0,    0,    0,    0,    0,
        0,  344,  344,    0,  344,  345,    0,    0,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  346,    0,    0,  346,  346,  346,  346,  346,  346,

      346,  346,  346,  346,  346,  346,  346,  347,    0,    0,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  348,    0,    0,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  350,
        0,    0,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  353,    0,    0,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  356,    0,    0,    0,  356,    0,    0,  356,  356,
      356,    0,    0,  356,  357,  357,    0,    0,    0,    0,
        0,    0,    0,  357,  357,  358,    0,    0,    0,  358,

        0,    0,  358,  358,  358,    0,    0,  358,  359,    0,
        0,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  362,    0,    0,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      365,    0,    0,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  366,    0,    0,    0,
      366,    0,    0,  366,  366,  366,    0,    0,  366,  367,
      367,    0,    0,  367,    0,    0,    0,    0,  367,  367,
      368,    0,    0,    0,  368,    0,    0,  368,  368,  368,
        0,    0,  368,  369,    0,    0,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  370,
        0,    0,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  371,    0,    0,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  372,  372,    0,    0,    0,    0,    0,    0,    0,
      372,  373,  373,    0,    0,    0,    0,    0,    0,    0,
      373,  374,  374,    0,    0,    0,    0,    0,    0,    0,
      374,  375,  375,    0,    0,    0,  375,    0,    0,    0,
      375,  376,  376,    0,    0,    0,  376,    0,    0,    0,
      376,  377,  377,    0,    0,    0,  377,    0,    0,    0,

      377,  378,  378,    0,    0,    0,    0,    0,    0,    0,
      378,  378,    0,  378,  379,  379,    0,    0,    0,    0,
        0,    0,    0,  379,  379,    0,  379,  380,  380,    0,
        0,    0,    0,    0,    0,    0,  380,  380,    0,  380,
      382,    0,    0,    0,  382,    0,    0,  382,  382,  382,
        0,    0,  382,  383,    0,    0,    0,  383,    0,    0,
      383,  383,  383,    0,    0,  383,  386,    0,    0,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  388,    0,    0,    0,  388,    0,    0,  388,
      388,  388,    0,    0,  388,  389,  389,    0,    0,  389,

        0,    0,    0,    0,  389,  389,  393,    0,    0,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  394,  394,    0,    0,    0,    0,    0,    0,
        0,  394,  395,  395,    0,    0,    0,    0,    0,    0,
        0,  395,  395,    0,  395,  396,    0,    0,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  398,    0,    0,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  399,    0,    0,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  402,    0,    0,    0,  402,    0,    0,

      402,  402,  402,    0,    0,  402,  409,  409,    0,    0,
        0,  409,    0,    0,    0,  409,  410,  410,    0,    0,
        0,  410,    0,    0,    0,  410,  411,  411,    0,    0,
        0,  411,    0,    0,    0,  411,  412,    0,    0,    0,
        0,    0,    0,    0,  412,  412,    0,  412,  413,  413,
        0,    0,    0,    0,    0,    0,    0,  413,  413,    0,
      413,  414,    0,    0,    0,    0,    0,    0,    0,  414,
      414,    0,  414,  415,    0,    0,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  421,
      421,    0,    0,    0,  421,  422,  422,    0,    0,    0,

      422,  423,  423,    0,    0,    0,    0,    0,    0,    0,
        0,  423,    0,  423,  424,  424,    0,    0,    0,    0,
        0,    0,    0,    0,  424,    0,  424,  425,  425,    0,
        0,    0,  425,  426,  426,    0,    0,    0,  426,  427,
      427,  427,    0,  427,  427,  428,  428,  428,    0,  428,
      428,  429,  429,  429,    0,  429,  429,  430,  430,    0,
        0,    0,  430,  431,  431,    0,    0,    0,  431,  432,
      432,  432,    0,  432,  432,  433,  433,  433,    0,  433,
      433,  434,  434,  434,    0,  434,  434,  435,  435,    0,
        0,    0,    0,    0,    0,    0,    0,  435,    0,  435,

      436,  436,    0,    0,    0,    0,    0,    0,    0,    0,
      436,    0,  436,  437,  437,  437,    0,    0,    0,    0,
        0,    0,    0,  437,    0,  437,  438,  438,  438,    0,
        0,    0,    0,    0,    0,    0,  438,    0,  438,  439,
      439,  439,    0,    0,    0,    0,    0,    0,    0,  439,
        0,  439,  440,  440,  440,    0,  440,  440,  441,  441,
      441,    0,  441,  441,  443,  443,  443,    0,  443,  443,
      444,  444,    0,    0,    0,  444,    0,    0,    0,  444,
      445,  445,    0,    0,    0,  445,    0,    0,    0,  445,
      446,    0,    0,  446,  446,  446,  446,  446,  446,  446,

      446,  446,  446,  446,  446,  446,  447,  447,    0,    0,
        0,  447,    0,    0,    0,  447,  448,  448,    0,    0,
        0,  448,    0,    0,    0,  448,  449,  449,    0,    0,
        0,  449,    0,    0,    0,  449,  451,  451,    0,    0,
        0,  451,    0,    0,    0,  451,  453,    0,    0,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  454,    0,    0,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  456,  456,
        0,    0,    0,  456,    0,    0,    0,  456,  460,    0,
        0,  460,  460,  460,  460,  460,  460,  460,  460,  460,

      460,  460,  460,  460,  462,    0,    0,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      463,    0,    0,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  466,  466,    0,    0,
        0,  466,    0,    0,    0,  466,  469,  469,    0,    0,
        0,    0,    0,    0,    0,  469,  470,  470,    0,    0,
        0,    0,    0,    0,    0,  470,  471,  471,    0,    0,
        0,    0,    0,    0,    0,  471,  473,  473,    0,    0,
        0,    0,    0,    0,    0,  473,  475,  475,  475,    0,
        0,    0,    0,    0,    0,    0,  475,    0,  475,  476,

      476,  476,    0,    0,    0,    0,    0,    0,    0,  476,
        0,  476,  478,  478,  478,    0,    0,    0,    0,    0,
        0,    0,  478,    0,  478,  479,  479,    0,    0,    0,
        0,    0,    0,    0,  479,  479,    0,  479,  480,  480,
        0,    0,    0,    0,    0,    0,    0,  480,  480,    0,
      480,  481,  481,    0,    0,    0,    0,    0,    0,    0,
      481,  481,    0,  481,  482,    0,    0,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      483,  483,    0,    0,    0,    0,    0,    0,    0,  483,
      483,    0,  483,  484,  484,    0,    0,    0,    0,    0,

        0,    0,  484,  484,    0,  484,  485,  485,    0,    0,
        0,    0,    0,    0,    0,  485,  485,    0,  485,  488,
      488,    0,    0,    0,    0,    0,    0,    0,  488,  488,
        0,  488,  490,    0,    0,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  492,    0,
        0,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  495,  495,    0,    0,    0,    0,
        0,    0,    0,  495,  495,    0,  495,  498,  498,    0,
        0,    0,    0,    0,    0,  498,  498,    0,  498,  499,
        0,    0,  499,  499,  499,  499,  499,  499,  499,  499,

      499,  499,  499,  499,  499,  500,  500,    0,    0,    0,
        0,    0,    0,  500,  500,    0,  500,  502,    0,    0,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  504,    0,    0,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  505,
        0,    0,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  506,    0,    0,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  508,    0,    0,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  511,    0,    0,

      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  512,    0,    0,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  514,
        0,    0,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  517,    0,    0,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  518,    0,    0,    0,  518,    0,    0,  518,  518,
      518,    0,    0,  518,  520,    0,    0,    0,  520,    0,
        0,  520,  520,  520,    0,    0,  520,  523,    0,    0,
        0,  523,    0,    0,  523,  523,  523,    0,    0,  523,

      524,    0,    0,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  525,    0,    0,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  526,  526,    0,    0,  526,    0,    0,    0,
        0,  526,  526,  527,    0,    0,    0,  527,    0,    0,
      527,  527,  527,    0,    0,  527,  528,    0,    0,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  529,    0,    0,    0,  529,    0,    0,  529,
      529,  529,    0,    0,  529,  530,    0,    0,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,

      530,  531,  531,    0,    0,    0,    0,    0,    0,    0,
      531,  532,  532,    0,    0,    0,    0,    0,    0,    0,
      532,  533,  533,    0,    0,    0,    0,    0,    0,    0,
      533,  535,  535,    0,    0,    0,    0,    0,    0,    0,
      535,  535,    0,  535,  536,    0,    0,    0,  536,    0,
        0,  536,  536,  536,    0,    0,  536,  537,    0,    0,
        0,  537,    0,    0,  537,  537,  537,    0,    0,  537,
      539,    0,    0,    0,  539,    0,    0,  539,  539,  539,
        0,    0,  539,  543,    0,    0,    0,  543,    0,    0,
      543,  543,  543,    0,    0,  543,  548,    0,    0,  548,

      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  549,    0,    0,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  553,  553,
        0,    0,    0,    0,    0,    0,    0,  553,  555,  555,
        0,    0,    0,  555,    0,    0,    0,  555,  556,  556,
        0,    0,    0,  556,    0,    0,    0,  556,  557,    0,
        0,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  558,  558,    0,    0,    0,  558,
        0,    0,    0,  558,  559,  559,    0,    0,    0,    0,
        0,    0,    0,  559,  559,    0,  559,  561,  561,    0,

        0,    0,    0,    0,    0,    0,  561,  561,    0,  561,
      562,    0,    0,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  571,  571,    0,    0,
        0,    0,    0,    0,    0,  571,  572,  572,    0,    0,
        0,    0,    0,    0,    0,  572,  572,    0,  572,  573,
        0,    0,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  576,  576,    0,    0,    0,
      576,    0,    0,    0,  576,  577,  577,    0,    0,    0,
      577,    0,    0,    0,  577,  578,  578,    0,    0,    0,
      578,    0,    0,    0,  578,  579,  579,    0,    0,    0,

        0,    0,    0,    0,  579,  579,    0,  579,  580,  580,
        0,    0,    0,    0,    0,    0,    0,  580,  580,    0,
      580,  581,  581,    0,    0,    0,    0,    0,    0,    0,
      581,  581,    0,  581,  587,    0,    0,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      588,  588,  588,    0,  588,  588,  589,  589,  589,    0,
      589,  589,  590,  590,  590,    0,  590,  590,  591,  591,
      591,    0,  591,  591,  593,    0,    0,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      594,    0,    0,  594,  594,  594,  594,  594,  594,  594,

      594,  594,  594,  594,  594,  594,  595,    0,    0,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  595,  596,    0,    0,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  598,  598,
        0,    0,    0,  598,    0,    0,    0,  598,  599,  599,
        0,    0,    0,  599,    0,    0,    0,  599,  602,    0,
        0,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  606,    0,    0,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      612,  612,  612,    0,    0,    0,    0,    0,    0,    0,

      612,    0,  612,  613,  613,  613,    0,    0,    0,    0,
        0,    0,    0,  613,    0,  613,  614,  614,    0,    0,
        0,    0,    0,    0,    0,  614,  614,    0,  614,  615,
      615,    0,    0,    0,    0,    0,    0,    0,  615,  615,
        0,  615,  617,    0,    0,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  618,    0,
        0,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  619,    0,    0,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      622,    0,    0,  622,  622,  622,  622,  622,  622,  622,

      622,  622,  622,  622,  622,  622,  629,    0,    0,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  631,    0,    0,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  634,    0,
        0,    0,  634,    0,    0,  634,  634,  634,    0,    0,
      634,  637,    0,    0,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  640,  640,    0,
        0,    0,  640,    0,    0,    0,  640,  641,  641,    0,
        0,    0,  641,    0,    0,    0,  641,  643,  643,    0,
        0,    0,    0,    0,    0,    0,  643,  643,    0,  643,

      644,  644,    0,    0,    0,    0,    0,    0,    0,  644,
      644,    0,  644,  646,  646,    0,    0,    0,  646,    0,
        0,    0,  646,  647,  647,    0,    0,    0,  647,    0,
        0,    0,  647,  657,  657,    0,    0,    0,    0,    0,
        0,    0,  657,  657,    0,  657,  658,  658,    0,    0,
        0,    0,    0,    0,    0,  658,  658,    0,  658,  695,
        0,  695,  696,    0,  696,  697,    0,  697,  698,    0,
      698,  699,    0,  699,  703,    0,  703,  704,    0,  704,
      705,    0,  705,  706,    0,  706,  707,    0,  707,  708,
        0,  708,  709,    0,  709,  710,    0,  710,  711,    0,

      711,  712,    0,  712,  713,    0,  713,  714,    0,  714,
      717,    0,  717,  719,    0,  719,  720,    0,  720,  723,
        0,  723,  724,    0,  724,  725,    0,  725,  726,    0,
      726,  727,    0,  727,  728,    0,  728,  729,    0,  729,
      730,    0,  730,  731,    0,  731,  732,    0,  732,  733,
        0,  733,  734,    0,  734,  735,    0,  735,  736,    0,
      736,  737,    0,  737,  738,    0,  738,  739,    0,  739,
      740,    0,  740,  741,    0,  741,  742,    0,  742,  743,
        0,  743,  744,    0,  744,  745,    0,  745,  746,    0,
      746,  747,    0,  747,  749,    0,  749,  752,    0,  752,

      753,    0,  753,  754,    0,  754,  757,    0,  757,  758,
        0,  758,  760,    0,  760,  761,    0,  761,  762,    0,
      762,  763,    0,  763,  764,    0,  764,  765,    0,  765,
      766,    0,  766,  769,    0,  769,  770,    0,  770,  771,
        0,  771,  772,    0,  772,  773,    0,  773,  774,    0,
      774,  775,    0,  775,  776,    0,  776,  777,    0,  777,
      778,    0,  778,  779,    0,  779,  780,    0,  780,  781,
        0,  781,  782,    0,  782,  783,    0,  783,  784,    0,
      784,  785,    0,  785,  786,    0,  786,  787,    0,  787,
      788,    0,  788,  789,    0,  789,  790,    0,  790,  791,

        0,  791,  792,    0,  792,  793,    0,  793,  794,    0,
      794,  795,    0,  795,  796,    0,  796,  797,    0,  797,
      798,    0,  798,  799,    0,  799,  800,    0,  800,  802,
        0,  802,  804,    0,  804,  805,    0,  805,  806,    0,
      806,  807,    0,  807,  809,    0,  809,  812,    0,  812,
      813,    0,  813,  814,    0,  814,  815,    0,  815,  816,
        0,  816,  817,    0,  817,  818,    0,  818,  819,    0,
      819,  820,    0,  820,  821,    0,  821,  822,    0,  822,
      824,    0,  824,  825,    0,  825,  826,    0,  826,  827,
        0,  827,  828,    0,  828,  829,    0,  829,  830,    0,

      830,  831,    0,  831,  832,    0,  832,  833,    0,  833,
      834,    0,  834,  835,    0,  835,  836,    0,  836,  837,
        0,  837,  838,    0,  838,  839,    0,  839,  840,    0,
      840,  841,    0,  841,  842,    0,  842,  843,    0,  843,
      844,    0,  844,  845,    0,  845,  846,    0,  846,  847,
        0,  847,  848,    0,  848,  849,    0,  849,  850,    0,
      850,  851,    0,  851,  853,    0,  853,  854,    0,  854,
      855,    0,  855,  856,    0,  856,  857,    0,  857,  858,
        0,  858,  859,    0,  859,  860,    0,  860,  861,    0,
      861,  862,    0,  862,  863,    0,  863,  864,    0,  864,

      865,    0,  865,  866,    0,  866,  867,    0,  867,  868,
        0,  868,  869,    0,  869,  870,    0,  870,  871,    0,
      871,  872,    0,  872,  873,    0,  873,  874,    0,  874,
      875,    0,  875,  876,    0,  876,  877,    0,  877,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[17] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
/*
 *
 * CS-252 
 * shell.l: lexical analyzer for shell
 * You have to extend it.
 *
 */
#line 11 "shell.l"

#include <cstring>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include "y.tab.hh"
/*
#include <string.h>
#include "y.tab.h"

////////////  Start added code ///////////


extern “C” char * read_line();

int mygetc(FILE * f) {
  static char *p;
  char ch;

     if (!isatty(0)) {
  // stdin is not a tty. Call real getc
    return getc(f);
  }

  // stdin is a tty. Call our read_line.
  if (p==NULL || *p == 0) {
    char * s = read_line();
    p = s;
  }

  ch = *p;
  p++;

  return ch;
}

#undef getc
#define getc(f) mygetc(f)

/////////// End added code ///////////*/

#define MAX_INCLUDE_DEPTH 10
YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

static  void yyunput (int c,char *buf_ptr  );

char *getenv(const char *name);

void myunputc(int c) {
  unput(c);
}

void remove_character(char* s, char c, int p) {
  int j, n = strlen(s);
  int escaped = 0; 
  int count = 0;

  for (int i = j = 0; i < n; i++) {
    if (s[i] != c || escaped || (p && count == p)) {
      s[j++] = s[i];
      escaped = 0;
    } else {
      escaped = 1;
      count++;
    }
  }   

  s[j] = '\0';
}

/*void source(char *s) {
  FILE *yyin = fopen(s, "r");

  if (!yyin) {
    fprintf( stderr, "No File" );
  } else {
    yypush_buffer_state( yy_create_buffer( yyin, YY_BUF_SIZE ) );
    yyparse();
    fclose(yyin);
  }
}*/

void removeStartAndEnd(char* s) {
  int j, n = strlen(s);

  s[0] = '\0';
  for (int i = 1; i < n; i++) {
    s[i - 1] = s[i];
  }   
  s[n - 2] = '\0';
}

#line 2038 "lex.yy.cc"
#line 2039 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 108 "shell.l"


#line 2259 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 693 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5440 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 110 "shell.l"
{
  return NEWLINE;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 114 "shell.l"
{
  /* Discard spaces and tabs */
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 118 "shell.l"
{
  return GREAT;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 122 "shell.l"
{
  return GREATGREAT;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 126 "shell.l"
{
  return LESS;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 130 "shell.l"
{
  return PIPE;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 134 "shell.l"
{
  return AMPERSAND;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 138 "shell.l"
{
  return TWOGREAT;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 142 "shell.l"
{
  return GREATAMPERSAND;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 146 "shell.l"
{
  return GREATGREATAMPERSAND;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 150 "shell.l"
{ 
  remove_character(yytext, '$', NULL);
  remove_character(yytext, '(', NULL);
  remove_character(yytext, ')', NULL);

  int pin[2], pout[2];
  pipe(pin); pipe(pout);

  int ret = fork();
  if (ret == 0) {
      close(pin[1]);
      close(pout[0]);

      dup2(pin[0], 0);
      close(pin[0]);

      dup2(pout[1], 1);
      close(pout[1]);
      
      // Execute shell executable
      execvp("/proc/self/exe", NULL);
      perror("Error in Child Process");
      exit(1);
  } else if (ret < 0) {
      perror("Error Forking Child");
      exit(1);
  }

  close(pin[0]);
  close(pout[1]);

  write(pin[1], strcat(yytext, "\n"), strlen(yytext) + 1);
  write(pin[1], "exit\n", 6);
  close(pin[1]);
  
  int size = 1024;
  char* buffer = (char*) malloc(sizeof(char) * size);
  char* iterator = buffer;
  int n = read(pout[0], iterator++, 1);
  while (n > 0) {
    n = read(pout[0], iterator++, 1);
    if (strlen(buffer) == size) {
      size = size * 2;
      realloc(buffer, size);
    }
  }

  *iterator = '\0';
  close(pout[0]);

  for (int i = strlen(buffer) - 1; i >= 0; i--) {
    char c = ' ';
    if (buffer[i] == '\n') {
      myunputc(' ');
    } else {
      myunputc(buffer[i]);
    }
  }
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 210 "shell.l"
{ 
  remove_character(yytext, '\\', NULL);
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 216 "shell.l"
{
  char* envStart = strchr(yytext, '{') + 1;
  char* envEnd = strchr(yytext, '}');
  int length = (int)(envEnd - envStart);

  char* env = (char*) malloc(sizeof(char) * length);
  env = strncpy(env, envStart, length);
  env[length] = '\0';

  int size = 1024;
  char* buffer = (char*) malloc(sizeof(char) * size);
  char* initialBuffer = buffer;

  if (!strcmp(env, "$")) {
    // Return PID of the Shell
    sprintf(buffer, "%d", getpid());
  } else if (!strcmp(env, "?")) {
    // Return exit code of last command
    if (getenv("LAST_STAT")) buffer = getenv("LAST_STAT");
    else buffer[0] = '\0';  
  } else if (!strcmp(env, "!")) {
    // Return PID of last background process
    if (getenv("LAST_BP")) buffer = getenv("LAST_BP");
    else buffer[0] = '\0';
    buffer = getenv(env);
  } else if (!strcmp(env, "_")) {
    // Return the last argument of the last command
    if (getenv("LAST_ARG")) buffer = getenv("LAST_ARG");
    else buffer[0] = '\0';
  } else if (!strcmp(env, "SHELL")) {
    // Return the path of the shell
    if (getenv(env)) buffer = getenv(env);
    else buffer[0] = '\0';
  } else {
    // Return ENV variable expansion
    if (getenv(env)) buffer = getenv(env);
    else buffer[0] = '\0';
  }

  free(env);

  char* target = (char*) malloc(sizeof(char) * size);
  char* iterator = target;

  strncpy(iterator, yytext, (int) (envStart - yytext) - 2);
  iterator += (int) (envStart - yytext) - 2;

  strncpy(iterator, buffer, strlen(buffer));
  iterator += strlen(buffer);

  strncpy(iterator, yytext + (int) (envStart - yytext) + length + 1, (int) (yytext + strlen(yytext) - envEnd + 1));
  iterator += (int) (yytext + strlen(yytext) - envEnd);
  
  iterator[(int) (iterator - target)] = '\0';

  if(target) {
    for (int i = strlen(target) - 1; i >= 0; i--) {
      myunputc(target[i]);
    }
  }

  //free(initialBuffer);
  free(target);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 281 "shell.l"
{
  removeStartAndEnd(yytext);
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 287 "shell.l"
{
  /* Assume that file names have only alpha chars */
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 292 "shell.l"
ECHO;
	YY_BREAK
#line 2560 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 693 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 693 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 692);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 292 "shell.l"
