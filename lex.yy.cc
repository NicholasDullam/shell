#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 16
#define YY_END_OF_BUFFER 17
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[825] =
    {   0,
        0,    0,   17,   15,    2,    1,   15,   15,    7,   15,
        5,    3,   13,   15,    6,   15,   15,   15,    0,   13,
       15,    0,   15,   15,    0,   15,    0,    0,   13,    8,
        9,    4,   13,   13,   13,   13,   13,   15,   15,    0,
       14,   15,    0,   14,   15,    0,   14,   15,    0,   15,
       14,    0,   15,    0,   15,   15,    0,   13,    0,    0,
        0,   13,   13,   13,   10,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   15,   14,   14,   14,
       14,   14,   14,   15,    0,   14,   15,    0,   14,   14,
        0,   15,    0,   15,   15,    0,   12,   13,   12,   15,

        0,   15,   15,    0,   12,   15,    0,    0,   12,   13,
       13,   13,   13,   13,   12,   13,   14,    0,    0,    0,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   15,   14,
       14,   14,   14,   14,   14,   14,   15,    0,   14,   15,
        0,   12,   14,   12,   14,    0,   14,   14,   14,   12,
       15,   14,    0,   12,   14,   14,    0,   12,   12,   12,
       12,   12,   12,   12,   12,   15,   14,   15,    0,   12,

       12,   12,   12,   12,   12,   15,    0,   15,   15,    0,
       12,   13,    0,    0,   12,    0,   12,   12,   12,   12,
       13,   13,   12,   13,   13,   13,   13,   13,   12,   13,
       13,   12,   12,   12,   12,   12,   12,   13,   13,   13,
       13,   12,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   15,   14,   14,   14,
       14,   14,   14,   12,   12,   12,   12,   14,   14,   14,

       14,   12,   14,   14,   14,   12,   12,   12,   12,   12,
       12,   15,    0,   14,   15,    0,   12,   14,   14,   12,
        0,   12,   12,   12,   14,   14,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   14,    0,
       12,    0,    0,   12,   13,   12,   12,   12,   12,   12,
       12,   12,   12,   13,   13,   12,   13,   13,   13,   13,
       12,   13,   13,   13,   13,   13,   12,   13,   13,   13,
       13,   13,   12,   13,   13,   13,   13,   12,   13,   12,
       12,   12,   12,   12,   12,   13,   13,   13,   13,   12,
       13,   13,   13,   13,   13,   12,   13,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       13,   13,   13,   13,   12,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   12,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       15,   12,   12,   12,   14,   14,   14,   14,   12,   14,
       12,   12,   12,   12,   14,    0,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   13,   13,   12,   13,   13,   12,   12,
       12,   12,   13,   13,   12,   13,   13,   13,   12,   13,
       13,   13,   12,   13,   13,   13,   13,   13,   13,   12,
       13,   13,   13,   12,   13,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   13,   13,
       13,   13,   12,   13,   13,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   13,   13,   13,   13,   12,   13,
       13,   13,   13,   13,   12,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   12,
       13,   13,   13,   13,   12,   13,   12,   12,   12,   12,
       12,   12,   13,   13,   13,   13,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,    0,   14,   14,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,   13,   12,
       13,   12,   12,   12,   12,   13,   13,   12,   13,   13,
       13,   13,   12,   13,   13,   13,   12,   13,   13,   12,
       12,   12,   12,   13,   13,   12,   13,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,   13,   13,
       13,   13,   12,   13,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   13,   13,   13,   13,
       13,   13,   13,   12,   13,   11,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   13,   13,   13,   12,   13,   13,   13,   12,   13,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   13,   13,   13,   13,   12,   13,   11,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   13,
       13,   12,   13,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    6,    1,    7,    1,    8,
        9,    1,    1,    1,    1,    1,    1,    1,    1,   10,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   11,
        1,   12,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   13,    1,    1,    1,    1,    1,    1,   14,    1,

       15,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       16,    1,    1,   17,   18,    1,   19,    1,    1,    1,
        1,    1,    1,   20,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[21] =
    {   0,
        1,    2,    2,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[979] =
    {   0,
        0,    0,  976,   20, 5113, 5113,   37,  967,   40,  962,
       45,   54,   67,  957,   40,    0,   84,  964,   57,    0,
      101,  964,  118,  135,   18,  155,   50,   85,   57,   87,
       91,  102,    0,  175,  960,  105,  195,  948,  938,  940,
      212,    0,   96,  111,  936,  920,  229,    0,  122,  246,
      127,  263,  271,  915,  291,  897,  308,  321,  130,    0,
      338,  348,  357,  139,  141,  370,  390,  896,  407,  420,
      440,    0,  460,  877,  144,    0,  867,  477,    0,  494,
      193,  115,  173,  514,  149,  534,  873,  551,  216,  557,
      221,    0,  871,    0,  871,  562,  575,    0,  233,    0,

      234,  595,  870,  612,  621,  641,  658,  869,  664,  674,
        0,  687,  868,  704,  717,  737,  224,    0,  754,  863,
        0,  760,  770,  780,  790,  800,  809,  862,    0,  822,
      861,  860,    0,    0,    0,  859,  858,    0,  842,  859,
        0,  869,    0,  882,  837,    0,    0,    0,    0,  836,
        0,    0,    0,  902,  817,    0,    0,  922,  942,  959,
      976,  816,  813,  993,  240,    0,    0,  250, 1013,  812,
        0,    0,  256,  311, 1033,  265,    0,  811, 1050, 1059,
     1079, 1096,  810, 1102,  258, 1108,  808, 1117, 1137,  804,
     1154,    0, 1167,  314,  315,    0,    0,  803,    0,    0,

        0, 1187,  802, 1204,    0, 1213,  800, 1233,  800, 1250,
        0,    0, 1260,  799,    0, 1266, 1276, 1282,  794, 1292,
     1302,  793, 1312, 1322, 1335, 1355,  792, 1372, 1385, 1405,
     1425,    0, 1445,  791,    0,    0, 1465, 1485, 1505,  790,
     1522,    0,    0, 1532, 1542, 1552, 1562, 1572, 1582,  789,
     1592,  784,    0, 1602,    0,  783, 1612, 1625, 1645,  782,
     1662, 1675,    0, 1695,  781, 1712,    0, 1722, 1732, 1742,
        0, 1755,  780, 1772,    0, 1785, 1805,    0,  779,  774,
        0,    0,    0,  773,    0,    0, 1825, 1845, 1865,  772,
     1882,  341,  351,  363,  410,  413,  481,    0,    0,  771,

     1888, 1897, 1917, 1934,  769, 1940,    0, 1949,  764, 1966,
        0, 1975,  364,    0,  763, 1992, 2001, 2018,  762,    0,
     2024, 2030, 2036, 2042,    0,  761,    0, 2051,  760,    0,
        0, 2071,    0,    0,  759,    0,    0, 2091,    0, 2108,
        0, 2114, 2120, 2130, 2140, 2150,  754,    0, 2156, 2166,
     2176, 2186, 2196, 2206, 2216, 2226, 2236, 2246, 2256,  753,
     2266,    0, 2279, 2299,  732, 2316, 2329, 2349,    0,    0,
      731,    0,    0,    0, 2369, 2386,  712, 2396, 2406,    0,
     2419,  711,    0,    0, 2439,    0, 2459,  708,    0,    0,
        0, 2479, 2499,  707, 2516, 2529, 2549,    0, 2569,  706,

        0,    0,    0, 2589, 2609, 2629,  704,    0,    0,    0,
        0, 2649,  703,    0,    0,    0, 2669, 2686,  682,    0,
     2696, 2706, 2716, 2726, 2736, 2746, 2756, 2766,  681,    0,
     2779, 2799,  678, 2816, 2829, 2849, 2866, 2876,    0,    0,
     2889,  677,    0,    0, 2909,    0,  676, 2926, 2939, 2959,
     2976,    0,  674,    0, 2989,    0,    0,  673,    0,    0,
     3009,  487,  499,  507, 3029, 3049,  668, 3066, 3075, 3092,
     3098, 3104, 3110, 3119, 3136, 3142, 3148, 3154,  667,    0,
     3160, 3169, 3189,  666, 3206,    0, 3215, 3235,  664, 3252,
        0, 3265,    0,    0,  663,    0,    0,    0,  658,    0,

     3282, 3288,  657, 3298, 3308, 3318, 3328, 3338, 3348, 3358,
     3368, 3378,    0, 3388, 3398,    0,    0, 3408, 3418,  636,
        0, 3428, 3438,  635,    0,    0, 3448, 3458, 3468, 3478,
     3488,  616,    0,    0, 3498, 3511, 3531,  615, 3548, 3561,
     3581, 3598, 3608, 3618, 3628, 3641, 3661,  612, 3678,    0,
     3691, 3711, 3731, 3751,  611,    0,    0,    0, 3771, 3791,
      590, 3808,    0,    0, 3821,    0,    0,  589,    0,    0,
        0, 3841, 3861,  570,    0,    0, 3881,    0, 3901,  569,
        0,    0,    0, 3921,    0,    0,  566,    0,    0,    0,
     3941, 3961,  565, 3978,    0,    0, 3988, 3998,  564,    0,

     4011,    0,  562, 4028,    0,    0,    0,  561,    0,    0,
        0, 4041,    0,  556,    0,    0,    0,    0,  551,    0,
        0,    0,    0,    0,  550,    0,    0,    0,    0,  529,
        0,    0,    0,  528,    0,    0,    0, 4058, 4064, 4070,
     4076, 4085, 4105,  509, 4122,    0, 4128, 4134, 4140, 4146,
      505,    0,    0, 4156, 4166,  502,    0,    0, 4176,  501,
        0, 4186, 4196,  499,    0,    0, 4206,    0, 4216,    0,
        0, 4226,  487,    0, 4236,    0,  486, 4246,    0, 4256,
        0,  485,    0,    0, 4266,  479, 4276,    0, 4286,    0,
      455,    0,    0,    0,  454,    0,    0, 4299,    0, 4319,

      435,    0,    0,    0, 4339,    0,  434,    0,    0, 4359,
        0,    0,  415,    0,    0,    0, 4379, 4399, 4419,    0,
      408,    0,    0,    0,    0,    0,  385,    0,    0,    0,
     4439, 4459,  384,    0,    0,    0,    0,  358,    0, 4479,
     4499,  356, 4516, 4529, 4549,    0, 4566,  351,    0,    0,
      350,    0,    0, 4572,  349,    0,    0, 4582,    0,  341,
        0,    0, 4592,  340,    0,    0, 4602,    0,  339,    0,
        0, 4612,    0,  286,    0,    0,    0, 4622,    0,    0,
        0,    0,  285,    0,    0,    0, 4635,    0,    0,  265,
        0,    0,    0,    0,    0,  248,    0,    0,    0,    0,

     4652,    0,  246,    0,    0,    0,  240,    0,    0,    0,
      239,    0,    0,    0,    0,  230,    0,    0,    0,    0,
      223,    0,    0, 5113, 4665,  150, 4668, 4671, 4674, 4677,
     4680,  136, 4683, 4686, 4689, 4692, 4695, 4698, 4701, 4704,
     4707,  116, 4710, 4713, 4716, 4719, 4722, 4725, 4728, 4731,
     4734, 4737, 4740, 4743, 4746, 4749, 4752, 4755, 4758, 4761,
     4764, 4767, 4770, 4773, 4776, 4779, 4782, 4785, 4788, 4791,
     4794, 4797, 4800, 4803, 4806, 4809, 4812, 4815, 4818, 4821,
     4824, 4827, 4830, 4833, 4836, 4839, 4842, 4845, 4848, 4851,
     4854, 4857, 4860, 4863, 4866, 4869, 4872, 4875, 4878, 4881,

     4884, 4887, 4890, 4893, 4896, 4899, 4902, 4905, 4908, 4911,
     4914, 4917, 4920, 4923, 4926, 4929, 4932, 4935, 4938, 4941,
     4944, 4947, 4950, 4953, 4956, 4959, 4962, 4965, 4968, 4971,
     4974, 4977, 4980, 4983, 4986, 4989, 4992, 4995, 4998, 5001,
     5004, 5007, 5010, 5013, 5016, 5019, 5022, 5025, 5028, 5031,
     5034, 5037,   70, 5040, 5043, 5046, 5049, 5052, 5055, 5058,
     5061, 5064, 5067, 5070, 5073, 5076, 5079, 5082, 5085, 5088,
     5091, 5094,   64, 5097, 5100, 5103, 5106, 5109
    } ;

static const flex_int16_t yy_def[979] =
    {   0,
      824,    1,  824,  824,  824,  824,  825,    4,  826,    4,
      826,  826,  824,    4,   12,    4,  825,    4,   12,   13,
      827,  828,  829,  827,  830,  824,  831,   12,  832,   12,
       12,   12,   13,  824,   13,  832,  824,    4,   24,  828,
      833,   24,  830,  834,   24,  828,  833,   24,  830,  835,
      836,  830,  824,  837,  824,   53,  838,  824,  839,   52,
      840,  841,  832,  842,   12,  824,  824,   66,  843,  824,
      824,   37,  824,   37,  842,   37,    4,  844,   47,  844,
      845,  834,  834,  824,  846,  824,   84,  847,  836,  845,
      848,   53,  837,   55,   53,  838,  824,   58,  849,   84,

      846,  824,   84,  847,  824,  824,  850,   96,  851,  852,
       58,  824,   58,  852,  824,  824,  836,   52,  850,   96,
      114,  853,  843,  854,  855,  856,  842,  127,   66,  824,
       66,  123,   70,   66,  130,   66,  123,   70,  824,  857,
      123,  854,   70,  824,   70,  142,   70,   58,  112,   58,
      114,  116,   70,  824,   70,  142,   70,  824,  824,  844,
      858,  160,   90,  859,  836,   90,   84,  846,  824,   84,
      104,  105,  860,  861,  824,  846,  169,  175,  862,  824,
      824,  863,  104,  864,  865,  863,  104,  824,  824,  188,
      866,  188,  824,  867,  867,   84,  169,   84,  104,  105,

      105,  824,  105,  864,  105,  824,  868,  824,  206,  869,
      188,   58,  870,  104,  204,  871,  872,  866,  218,  873,
      874,  114,  873,  875,  824,  824,  225,  876,  824,  824,
      824,  193,  824,  193,  223,  193,  824,  824,  824,  238,
      875,  237,  238,  877,  878,  879,  880,  881,  879,  249,
      874,  114,  241,  882,  249,  249,  883,  824,  824,  258,
      884,  824,  225,  824,  225,  876,  230,  877,  884,  885,
      262,  824,  262,  885,  262,  824,  824,  272,  277,  249,
      277,  238,  239,  238,  241,  238,  824,  824,  824,  288,
      886,  887,  887,  888,  889,  888,  889,  288,  289,  288,

      886,  824,  824,  890,  301,  891,  302,  824,  302,  891,
      302,  824,  892,  289,  312,  893,  824,  890,  301,  310,
      894,  895,  896,  896,  318,  301,  317,  824,  317,  324,
      317,  824,  302,  308,  302,  310,  302,  824,  318,  893,
      324,  897,  898,  899,  900,  901,  324,  324,  902,  903,
      904,  904,  905,  906,  907,  908,  909,  910,  911,  241,
      905,  241,  824,  824,  363,  907,  824,  824,  363,  364,
      363,  366,  367,  368,  824,  912,  366,  908,  909,  367,
      824,  367,  378,  367,  824,  368,  824,  368,  379,  385,
      368,  824,  824,  392,  900,  824,  824,  367,  824,  367,

      378,  367,  385,  824,  824,  824,  405,  361,  405,  405,
      368,  824,  368,  379,  385,  368,  824,  912,  366,  379,
      913,  914,  914,  915,  913,  916,  916,  911,  241,  241,
      824,  824,  431,  917,  824,  824,  918,  917,  423,  435,
      824,  435,  423,  435,  824,  364,  445,  919,  824,  824,
      920,  425,  423,  423,  824,  368,  387,  368,  379,  368,
      824,  921,  921,  921,  824,  824,  465,  922,  824,  923,
      924,  925,  925,  824,  926,  927,  928,  924,  473,  473,
      929,  824,  824,  482,  928,  482,  824,  824,  487,  930,
      487,  824,  482,  483,  482,  485,  482,  478,  485,  485,

      931,  930,  502,  932,  933,  934,  934,  935,  936,  937,
      938,  938,  512,  939,  940,  507,  379,  941,  942,  507,
      507,  935,  943,  379,  522,  379,  944,  945,  932,  946,
      947,  379,  522,  379,  948,  824,  824,  536,  940,  824,
      824,  939,  949,  950,  951,  824,  824,  546,  950,  546,
      824,  824,  824,  824,  553,  522,  553,  553,  824,  824,
      559,  951,  551,  559,  824,  540,  547,  540,  507,  540,
      553,  824,  824,  572,  529,  572,  824,  553,  824,  553,
      522,  553,  553,  824,  541,  560,  541,  379,  553,  541,
      824,  824,  591,  946,  577,  591,  952,  943,  379,  379,

      824,  537,  601,  949,  559,  601,  537,  601,  604,  546,
      559,  824,  542,  604,  549,  562,  546,  547,  546,  549,
      546,  551,  559,  560,  559,  562,  551,  559,  542,  604,
      562,  559,  560,  559,  562,  559,  953,  954,  955,  956,
      957,  824,  824,  642,  956,  642,  958,  959,  959,  960,
      507,  507,  522,  961,  962,  522,  522,  522,  963,  529,
      529,  964,  965,  522,  522,  522,  966,  542,  967,  507,
      379,  960,  549,  549,  968,  598,  562,  968,  562,  969,
      598,  379,  522,  379,  970,  594,  964,  594,  971,  672,
      549,  549,  678,  598,  562,  678,  562,  824,  551,  824,

      551,  678,  551,  551,  824,  547,  705,  507,  705,  824,
      551,  700,  551,  678,  551,  551,  824,  824,  824,  560,
      719,  379,  710,  719,  710,  700,  710,  522,  710,  710,
      824,  824,  731,  687,  731,  731,  598,  562,  562,  824,
      824,  740,  972,  824,  824,  973,  958,  645,  645,  672,
      507,  507,  522,  962,  678,  678,  678,  974,  754,  522,
      522,  522,  975,  687,  687,  687,  976,  754,  678,  678,
      678,  977,  598,  379,  522,  379,  542,  972,  549,  562,
      744,  547,  744,  549,  744,  551,  824,  710,  700,  710,
      522,  710,  710,  745,  560,  745,  562,  551,  745,  973,

      978,  754,  522,  522,  522,  672,  549,  549,  678,  598,
      562,  678,  562,  551,  700,  551,  678,  551,  551,  754,
      678,  678,  678,    0,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,

      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824
    } ;

static const flex_int16_t yy_nxt[5134] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,    4,    4,   10,
       11,   12,   13,    4,    4,    4,    4,   14,    4,   15,
       16,   40,   51,   52,   17,   18,   19,   16,   16,   16,
       19,   19,   20,   16,   16,   16,   16,   16,   16,   19,
       22,   23,   24,   25,   27,   28,   19,   25,   25,   27,
       28,   19,   29,   22,   59,   60,   25,   29,   27,   28,
       31,   62,   63,   19,  800,   32,   29,   33,   19,   64,
      746,   34,   35,   36,   33,   33,   33,   36,   36,   37,
       33,   33,   33,   33,   33,   33,   36,   22,   23,   24,
       25,   19,   61,   19,   25,   25,   19,   19,   19,   40,

       51,   52,   19,   25,   40,   41,   42,   43,   65,   62,
       63,   43,   43,   19,   40,   83,   75,   64,   40,   83,
       43,   46,   47,   48,   49,   40,   51,   52,   49,   49,
       46,   89,   90,   46,  117,  118,   36,   49,   40,   41,
       42,   43,   50,  126,  127,   43,   43,   19,  126,  127,
       19,  128,   19,  173,   43,   53,  128,  174,   54,   55,
       56,   57,   53,   53,   53,   57,   57,   58,   53,   53,
       53,   53,   53,   53,   57,   66,   40,   83,   22,   67,
       68,   69,   66,   66,   66,   69,   69,   70,   66,   66,
       66,   66,   66,   66,   69,   72,   40,  165,  166,   73,

       74,   75,   72,   72,   72,   75,   75,   76,   72,   72,
       72,   72,   72,   72,   75,   46,   79,   80,   81,   46,
       89,   90,   81,   81,   85,  186,  187,   46,   89,   90,
      801,   81,   46,   79,   80,   81,   93,  787,  173,   81,
       81,  195,  174,   46,   89,   90,  772,  767,   81,   85,
       86,   87,   88,  758,  173,  718,   88,   88,  174,  168,
      293,   85,  325,  326,  294,   88,   40,   51,   52,  173,
       91,   92,  717,  174,   93,   94,   95,   96,   92,   97,
       92,   96,   96,   98,   92,   92,   92,   92,   92,   92,
       96,  100,  698,  680,  101,  102,  103,  104,  100,  105,

      100,  104,  104,  100,  100,  100,  100,  100,  100,  100,
      104,   93,  107,  108,  168,  296,  109,   93,   93,  297,
      110,  111,  195,  195,   93,  112,  113,  114,  111,  115,
      111,  114,  114,  116,  111,  111,  111,  111,  111,  111,
      114,   54,  119,  120,  168,  293,  801,  667,  758,  294,
      121,   22,  122,  123,  168,  293,  801,  654,  641,  294,
      124,   62,   63,  612,  125,  772,  168,  463,  173,   64,
      129,  464,  174,   40,  130,  131,  132,  129,  129,  129,
      132,  132,  133,  129,  129,  129,  129,  129,  129,  132,
      134,  584,  717,   46,  135,  136,  137,  134,  134,  134,

      137,  137,  138,  134,  134,  134,  134,  134,  134,  137,
       40,  140,  141,  168,  296,  565,  168,  463,  297,  142,
      143,  464,  787,   40,  144,  145,  146,  143,  143,  143,
      146,  146,  147,  143,  143,  143,  143,  143,  143,  146,
      148,  552,  787,   54,  149,  150,  151,  148,  148,  148,
      151,  151,  152,  148,  148,  148,  148,  148,  148,  151,
      153,  772,  767,   22,  154,  155,  156,  153,  153,  153,
      156,  156,  157,  153,  153,  153,  153,  153,  153,  156,
       40,  161,  162,  163,  168,  296,  535,  163,  163,  297,
      168,  463,  680,  772,  767,  464,  163,   40,  161,  162,

      163,  164,  168,  463,  163,  163,  758,  464,  509,  758,
      168,  463,  654,  163,  167,  464,  474,  168,  169,  170,
      171,  167,  172,  167,  171,  171,  167,  167,  167,  167,
      167,  167,  167,  171,  175,  718,  689,  176,  177,  178,
      179,  175,  180,  175,  179,  179,  175,  175,  175,  175,
      175,  175,  175,  179,  168,  182,  183,  718,  698,  184,
       40,  165,  166,  689,  185,   93,  107,  108,  612,  612,
      109,  680,  417,  565,  110,  188,  717,  404,   93,  189,
      190,  191,  188,  192,  188,  191,  191,  193,  188,  188,
      188,  188,  188,  188,  191,  196,  552,  718,  176,  197,

      198,  199,  196,  200,  196,  199,  199,  196,  196,  196,
      196,  196,  196,  196,  199,  168,  182,  183,  717,  698,
      184,  201,  375,  680,  168,  202,  203,  204,  201,  205,
      201,  204,  204,  201,  201,  201,  201,  201,  201,  201,
      204,  206,  680,  654,  207,  208,  209,  210,  206,  211,
      206,  210,  210,  212,  206,  206,  206,  206,  206,  206,
      210,  101,  213,  214,  191,  481,  215,   93,  217,  218,
      338,  332,  219,  338,  641,  303,  220,   93,  221,  222,
      565,  597,  223,  612,  455,  436,  224,  225,  535,  518,
      101,  226,  227,  228,  225,  229,  225,  228,  228,  230,

      225,  225,  225,  225,  225,  225,  228,   93,  221,  222,
      565,  584,  223,  552,  231,  565,  224,  232,  552,  518,
       93,  233,  234,  235,  232,  236,  232,  235,  235,  237,
      232,  232,  232,  232,  232,  232,  235,  238,  375,  375,
       93,  239,  240,  241,  238,  242,  238,  241,  241,  243,
      238,  238,  238,  238,  238,  238,  241,  101,  213,  214,
      535,  481,  215,   46,  244,  245,  474,  338,  470,  470,
      181,  474,  246,   40,  140,  141,  470,  247,  303,  303,
      417,  146,  142,   40,  248,  249,  276,  455,  375,  436,
      146,  358,  250,   54,  251,  252,  146,  417,  404,  375,

      358,  191,  253,   22,  254,  255,  321,  106,   99,  338,
      181,  332,  256,  126,  127,  321,  257,  321,  303,  181,
      163,  128,  258,  164,  276,   46,  259,  260,  261,  258,
      258,  258,  261,  261,  262,  258,  258,  258,  258,  258,
      258,  261,  263,  231,  276,   85,  264,  265,  266,  263,
      263,  263,  266,  266,  267,  263,  263,  263,  263,  263,
      263,  266,   46,  268,  269,  132,  139,  132,  139,   75,
      216,  270,   40,  248,  249,  231,  216,  181,  106,   99,
      181,  250,  271,  159,  158,   46,  272,  273,  274,  271,
      271,  271,  274,  274,  275,  271,  271,  271,  271,  271,

      271,  274,  277,  139,  106,   46,  278,  279,  280,  277,
      277,  277,  280,  280,  281,  277,  277,  277,  277,  277,
      277,  280,  282,   99,   44,   54,  283,  284,  285,  282,
      282,  282,  285,  285,  286,  282,  282,  282,  282,  282,
      282,  285,   16,   39,   44,   39,   17,   18,   19,   16,
       16,   16,   19,   19,   20,  287,   16,   16,   16,   16,
       16,   19,   40,  161,  162,  163,   77,   71,   44,  163,
      163,   26,   38,   30,   26,  824,  824,  824,  163,   46,
       79,   80,   81,  824,  824,  824,   81,   81,  824,  824,
      824,  824,  824,  824,  824,   81,   85,  289,  290,  291,

      824,  824,  824,  291,  291,  824,  824,  824,  824,  824,
      824,  824,  291,  175,  824,  824,  176,  177,  178,  179,
      175,  180,  175,  179,  179,  175,  175,  175,  175,  175,
      175,  175,  179,  298,  824,  824,  168,  299,  300,  301,
      298,  302,  298,  301,  301,  298,  298,  298,  298,  298,
      298,  298,  301,  168,  304,  305,  824,  824,  306,  307,
      824,  824,  168,  308,  309,  310,  307,  311,  307,  310,
      310,  307,  307,  307,  307,  307,  307,  307,  310,  312,
      824,  824,  313,  314,  315,  316,  312,  317,  312,  316,
      316,  312,  312,  312,  312,  312,  312,  312,  316,  176,

      318,  319,  824,  824,  320,  168,  322,  323,  824,  824,
      324,  176,  318,  319,  824,  824,  320,  188,  824,  824,
       93,  189,  190,  191,  188,  192,  188,  191,  191,  193,
      188,  188,  188,  188,  188,  188,  191,  327,  824,  824,
      101,  328,  329,  330,  327,  331,  327,  330,  330,  327,
      327,  327,  327,  327,  327,  327,  330,   93,  217,  218,
      824,  824,  219,  824,  824,  824,  220,  232,  824,  824,
       93,  233,  234,  235,  232,  236,  232,  235,  235,  237,
      232,  232,  232,  232,  232,  232,  235,  333,  824,  824,
      176,  334,  335,  336,  333,  337,  333,  336,  336,  333,

      333,  333,  333,  333,  333,  333,  336,  168,  322,  323,
      824,  824,  324,   92,  824,  824,   93,   94,   95,   96,
       92,   97,   92,   96,   96,   98,   92,   92,   92,   92,
       92,   92,   96,  100,  824,  824,  101,  102,  103,  104,
      100,  105,  100,  104,  104,  100,  100,  100,  100,  100,
      100,  100,  104,   93,  107,  108,  824,  824,  109,  824,
      824,  824,  110,  176,  339,  340,  824,  824,  341,  207,
      342,  343,  824,  824,  344,  824,  824,  824,  345,  101,
      346,  347,  824,  824,  348,   93,  217,  218,  824,  349,
      219,  824,  824,  824,  220,   93,  350,  351,  824,  824,

      352,  824,  824,  824,  353,  101,  354,  355,  824,  824,
      356,  824,  824,  824,  357,   93,  350,  351,  824,  824,
      352,  824,  824,  824,  353,   93,  359,  360,  824,  824,
      361,  824,  824,  824,  362,  363,  824,  824,  168,  364,
      365,  366,  363,  367,  363,  366,  366,  368,  363,  363,
      363,  363,  363,  363,  366,  369,  824,  824,  176,  370,
      371,  372,  369,  373,  369,  372,  372,  374,  369,  369,
      369,  369,  369,  369,  372,  168,  376,  377,  824,  824,
      378,  824,  824,  824,  379,  380,  824,  824,  168,  381,
      382,  383,  380,  384,  380,  383,  383,  385,  380,  380,

      380,  380,  380,  380,  383,  386,  824,  824,  168,  387,
      388,  389,  386,  390,  386,  389,  389,  391,  386,  386,
      386,  386,  386,  386,  389,  392,  824,  824,  207,  393,
      394,  395,  392,  396,  392,  395,  395,  397,  392,  392,
      392,  392,  392,  392,  395,  398,  824,  824,  101,  399,
      400,  401,  398,  402,  398,  401,  401,  403,  398,  398,
      398,  398,  398,  398,  401,  405,  824,  824,   93,  406,
      407,  408,  405,  409,  405,  408,  408,  410,  405,  405,
      405,  405,  405,  405,  408,  238,  824,  824,   93,  239,
      240,  241,  238,  242,  238,  241,  241,  243,  238,  238,

      238,  238,  238,  238,  241,  411,  824,  824,  101,  412,
      413,  414,  411,  415,  411,  414,  414,  416,  411,  411,
      411,  411,  411,  411,  414,   93,  359,  360,  824,  824,
      361,  824,  824,  824,  362,   46,  268,  269,  824,  824,
      824,  824,  824,  824,  270,   40,  140,  141,  824,  247,
      824,  824,  824,  824,  142,   40,  248,  249,  824,  824,
      824,  824,  824,  824,  250,   85,  418,  419,  824,  824,
      824,  824,  824,  824,  420,   46,  421,  422,  824,  824,
      824,  824,  824,  824,  423,   40,  248,  249,  824,  424,
      824,  824,  824,  824,  250,  101,  354,  355,  824,  824,

      356,  824,  824,  824,  357,   46,  425,  426,  824,  824,
      824,  824,  824,  824,  427,   54,  428,  429,  824,  824,
      824,  824,  824,  824,  430,  431,  824,  824,   40,  432,
      433,  434,  431,  431,  431,  434,  434,  435,  431,  431,
      431,  431,  431,  431,  434,  258,  824,  824,   46,  259,
      260,  261,  258,  258,  258,  261,  261,  262,  258,  258,
      258,  258,  258,  258,  261,   40,  437,  438,  824,  824,
      824,  824,  824,  824,  439,  440,  824,  824,   40,  441,
      442,  443,  440,  440,  440,  443,  443,  444,  440,  440,
      440,  440,  440,  440,  443,  445,  824,  824,  176,  446,

      447,  448,  445,  449,  445,  448,  448,  450,  445,  445,
      445,  445,  445,  445,  448,  168,  376,  377,  824,  824,
      378,  824,  824,  824,  379,   46,  268,  269,  824,  824,
      824,  824,  824,  824,  270,   40,  437,  438,  824,  451,
      824,  824,  824,  824,  439,   40,  452,  453,  824,  824,
      824,  824,  824,  824,  454,  271,  824,  824,   46,  272,
      273,  274,  271,  271,  271,  274,  274,  275,  271,  271,
      271,  271,  271,  271,  274,   40,  452,  453,  824,  824,
      824,  824,  824,  824,  454,  456,  824,  824,   85,  457,
      458,  459,  456,  456,  456,  459,  459,  460,  456,  456,

      456,  456,  456,  456,  459,  143,  824,  824,   40,  144,
      145,  146,  143,  143,  143,  146,  146,  147,  143,  143,
      143,  143,  143,  143,  146,   16,  824,  824,  824,   17,
       18,   19,   16,   16,   16,   19,   19,   20,   16,  461,
       16,   16,   16,   16,   19,  298,  824,  824,  168,  299,
      300,  301,  298,  302,  298,  301,  301,  298,  298,  298,
      298,  298,  298,  298,  301,  175,  824,  824,  176,  177,
      178,  179,  175,  180,  175,  179,  179,  175,  175,  175,
      175,  175,  175,  175,  179,  168,  304,  305,  824,  824,
      306,  168,  304,  305,  824,  824,  306,  307,  824,  824,

      168,  308,  309,  310,  307,  311,  307,  310,  310,  307,
      307,  307,  307,  307,  307,  307,  310,  465,  824,  824,
      313,  466,  467,  468,  465,  469,  465,  468,  468,  465,
      465,  465,  465,  465,  465,  465,  468,  176,  318,  319,
      824,  824,  320,  168,  471,  472,  824,  824,  473,  333,
      824,  824,  176,  334,  335,  336,  333,  337,  333,  336,
      336,  333,  333,  333,  333,  333,  333,  333,  336,  168,
      471,  472,  824,  824,  473,  167,  824,  824,  168,  169,
      170,  171,  167,  172,  167,  171,  171,  167,  167,  167,
      167,  167,  167,  167,  171,  168,  182,  183,  824,  824,

      184,  201,  824,  824,  168,  202,  203,  204,  201,  205,
      201,  204,  204,  201,  201,  201,  201,  201,  201,  201,
      204,  176,  318,  319,  824,  824,  320,  313,  475,  476,
      824,  824,  477,  176,  478,  479,  824,  824,  480,  168,
      322,  323,  824,  481,  324,  168,  322,  323,  824,  824,
      324,  482,  824,  824,  176,  483,  484,  485,  482,  486,
      482,  485,  485,  482,  482,  482,  482,  482,  482,  482,
      485,  487,  824,  824,  207,  488,  489,  490,  487,  491,
      487,  490,  490,  492,  487,  487,  487,  487,  487,  487,
      490,  493,  824,  824,  313,  494,  495,  496,  493,  497,

      493,  496,  496,  493,  493,  493,  493,  493,  493,  493,
      496,  168,  182,  183,  824,  321,  184,  101,  213,  214,
      824,  824,  215,   93,  107,  108,  824,  216,  109,  824,
      824,  824,  110,   93,  217,  218,  824,  824,  219,  824,
      824,  824,  220,   93,  221,  222,  824,  824,  223,  824,
      824,  824,  224,  176,  498,  499,  824,  824,  500,  207,
      501,  502,  824,  824,  503,  824,  824,  824,  504,  101,
      505,  506,  824,  824,  507,  824,  824,  824,  508,   93,
      350,  351,  824,  509,  352,  824,  824,  824,  353,   93,
      350,  351,  824,  824,  352,  824,  824,  824,  353,   93,

      510,  511,  824,  824,  512,  824,  824,  824,  513,  176,
      514,  515,  824,  824,  516,  824,  824,  824,  517,  168,
      376,  377,  824,  518,  378,  824,  824,  824,  379,  168,
      519,  520,  824,  824,  521,  824,  824,  824,  522,  168,
      523,  524,  824,  824,  525,  824,  824,  824,  526,  207,
      527,  528,  824,  824,  529,  824,  824,  824,  530,  101,
      531,  532,  824,  824,  533,  824,  824,  824,  534,   93,
      510,  511,  824,  824,  512,  824,  824,  824,  513,  363,
      824,  824,  168,  364,  365,  366,  363,  367,  363,  366,
      366,  368,  363,  363,  363,  363,  363,  363,  366,  445,

      824,  824,  176,  446,  447,  448,  445,  449,  445,  448,
      448,  450,  445,  445,  445,  445,  445,  445,  448,  168,
      376,  377,  824,  824,  378,  824,  824,  824,  379,  380,
      824,  824,  168,  381,  382,  383,  380,  384,  380,  383,
      383,  385,  380,  380,  380,  380,  380,  380,  383,  386,
      824,  824,  168,  387,  388,  389,  386,  390,  386,  389,
      389,  391,  386,  386,  386,  386,  386,  386,  389,  536,
      824,  824,  313,  537,  538,  539,  536,  540,  536,  539,
      539,  541,  536,  536,  536,  536,  536,  536,  539,  176,
      542,  543,  824,  824,  544,  824,  824,  824,  545,  168,

      519,  520,  824,  824,  521,  824,  824,  824,  522,  168,
      523,  524,  824,  824,  525,  824,  824,  824,  526,  546,
      824,  824,  176,  547,  548,  549,  546,  550,  546,  549,
      549,  551,  546,  546,  546,  546,  546,  546,  549,  553,
      824,  824,  168,  554,  555,  556,  553,  557,  553,  556,
      556,  558,  553,  553,  553,  553,  553,  553,  556,  559,
      824,  824,  176,  560,  561,  562,  559,  563,  559,  562,
      562,  564,  559,  559,  559,  559,  559,  559,  562,  111,
      824,  824,   93,  112,  113,  114,  111,  115,  111,  114,
      114,  116,  111,  111,  111,  111,  111,  111,  114,  225,

      824,  824,  101,  226,  227,  228,  225,  229,  225,  228,
      228,  230,  225,  225,  225,  225,  225,  225,  228,   93,
      221,  222,  824,  824,  223,  824,  824,  824,  224,  232,
      824,  824,   93,  233,  234,  235,  232,  236,  232,  235,
      235,  237,  232,  232,  232,  232,  232,  232,  235,  238,
      824,  824,   93,  239,  240,  241,  238,  242,  238,  241,
      241,  243,  238,  238,  238,  238,  238,  238,  241,  566,
      824,  824,  176,  567,  568,  569,  566,  570,  566,  569,
      569,  571,  566,  566,  566,  566,  566,  566,  569,  572,
      824,  824,  207,  573,  574,  575,  572,  576,  572,  575,

      575,  577,  572,  572,  572,  572,  572,  572,  575,  405,
      824,  824,   93,  406,  407,  408,  405,  409,  405,  408,
      408,  410,  405,  405,  405,  405,  405,  405,  408,  578,
      824,  824,  101,  579,  580,  581,  578,  582,  578,  581,
      581,  583,  578,  578,  578,  578,  578,  578,  581,  585,
      824,  824,  176,  586,  587,  588,  585,  589,  585,  588,
      588,  590,  585,  585,  585,  585,  585,  585,  588,  591,
      824,  824,  207,  592,  593,  594,  591,  595,  591,  594,
      594,  596,  591,  591,  591,  591,  591,  591,  594,  176,
      542,  543,  824,  824,  544,  824,  824,  824,  545,   46,

      421,  422,  824,  824,  824,  824,  824,  824,  423,   40,
      452,  453,  824,  597,  824,  824,  824,  824,  454,   40,
      452,  453,  824,  824,  824,  824,  824,  824,  454,   85,
      598,  599,  824,  824,  824,  824,  824,  824,  600,   46,
      421,  422,  824,  824,  824,  824,  824,  824,  423,   40,
      248,  249,  824,  424,  824,  824,  824,  824,  250,   40,
      248,  249,  824,  824,  824,  824,  824,  824,  250,  101,
      531,  532,  824,  824,  533,  824,  824,  824,  534,  431,
      824,  824,   40,  432,  433,  434,  431,  431,  431,  434,
      434,  435,  431,  431,  431,  431,  431,  431,  434,  258,

      824,  824,   46,  259,  260,  261,  258,  258,  258,  261,
      261,  262,  258,  258,  258,  258,  258,  258,  261,   40,
      437,  438,  824,  824,  824,  824,  824,  824,  439,  440,
      824,  824,   40,  441,  442,  443,  440,  440,  440,  443,
      443,  444,  440,  440,  440,  440,  440,  440,  443,  601,
      824,  824,   85,  602,  603,  604,  601,  601,  601,  604,
      604,  605,  601,  601,  601,  601,  601,  601,  604,   46,
      268,  269,  824,  824,  824,  824,  824,  824,  270,   40,
      437,  438,  824,  451,  824,  824,  824,  824,  439,  271,
      824,  824,   46,  272,  273,  274,  271,  271,  271,  274,

      274,  275,  271,  271,  271,  271,  271,  271,  274,  606,
      824,  824,  168,  607,  608,  609,  606,  610,  606,  609,
      609,  611,  606,  606,  606,  606,  606,  606,  609,  168,
      613,  614,  824,  824,  615,  824,  824,  824,  616,  617,
      824,  824,  168,  618,  619,  620,  617,  621,  617,  620,
      620,  622,  617,  617,  617,  617,  617,  617,  620,  623,
      824,  824,  168,  624,  625,  626,  623,  627,  623,  626,
      626,  628,  623,  623,  623,  623,  623,  623,  626,   85,
      629,  630,  824,  824,  824,  824,  824,  824,  631,  632,
      824,  824,   85,  633,  634,  635,  632,  632,  632,  635,

      635,  636,  632,  632,  632,  632,  632,  632,  635,   16,
      824,  824,  637,   17,   18,   19,   16,   16,   16,   19,
       19,   20,   16,   16,   16,   16,   16,   16,   19,  298,
      824,  824,  168,  299,  300,  301,  298,  302,  298,  301,
      301,  298,  298,  298,  298,  298,  298,  298,  301,  175,
      824,  824,  176,  177,  178,  179,  175,  180,  175,  179,
      179,  175,  175,  175,  175,  175,  175,  175,  179,  168,
      304,  305,  824,  824,  306,  307,  824,  824,  168,  308,
      309,  310,  307,  311,  307,  310,  310,  307,  307,  307,
      307,  307,  307,  307,  310,  313,  638,  639,  824,  824,

      640,  176,  478,  479,  824,  824,  480,  168,  471,  472,
      824,  641,  473,  168,  471,  472,  824,  824,  473,  642,
      824,  824,  313,  643,  644,  645,  642,  646,  642,  645,
      645,  642,  642,  642,  642,  642,  642,  642,  645,  176,
      318,  319,  824,  824,  320,  168,  182,  183,  824,  321,
      184,  168,  322,  323,  824,  824,  324,  176,  478,  479,
      824,  824,  480,  313,  647,  648,  824,  824,  649,  201,
      824,  824,  168,  202,  203,  204,  201,  205,  201,  204,
      204,  201,  201,  201,  201,  201,  201,  201,  204,  333,
      824,  824,  176,  334,  335,  336,  333,  337,  333,  336,

      336,  333,  333,  333,  333,  333,  333,  333,  336,  168,
      322,  323,  824,  824,  324,  188,  824,  824,   93,  189,
      190,  191,  188,  192,  188,  191,  191,  193,  188,  188,
      188,  188,  188,  188,  191,  327,  824,  824,  101,  328,
      329,  330,  327,  331,  327,  330,  330,  327,  327,  327,
      327,  327,  327,  327,  330,   93,  217,  218,  824,  824,
      219,  824,  824,  824,  220,  232,  824,  824,   93,  233,
      234,  235,  232,  236,  232,  235,  235,  237,  232,  232,
      232,  232,  232,  232,  235,  101,  346,  347,  824,  824,
      348,   93,  217,  218,  824,  349,  219,  824,  824,  824,

      220,   93,  350,  351,  824,  824,  352,  824,  824,  824,
      353,  176,  650,  651,  824,  824,  652,  824,  824,  824,
      653,  168,  519,  520,  824,  654,  521,  824,  824,  824,
      522,  168,  519,  520,  824,  824,  521,  824,  824,  824,
      522,  168,  655,  656,  824,  824,  657,  824,  824,  824,
      658,  207,  659,  660,  824,  824,  661,  824,  824,  824,
      662,  101,  663,  664,  824,  824,  665,  824,  824,  824,
      666,   93,  510,  511,  824,  667,  512,  824,  824,  824,
      513,   93,  510,  511,  824,  824,  512,  824,  824,  824,
      513,  176,  542,  543,  824,  824,  544,  824,  824,  824,

      545,  168,  376,  377,  824,  518,  378,  824,  824,  824,
      379,  313,  668,  669,  824,  824,  670,  824,  824,  824,
      671,  176,  672,  673,  824,  824,  674,  824,  824,  824,
      675,  168,  655,  656,  824,  824,  657,  824,  824,  824,
      658,  176,  676,  677,  824,  824,  678,  824,  824,  824,
      679,  101,  354,  355,  824,  824,  356,  824,  824,  824,
      357,   93,  221,  222,  824,  358,  223,  824,  824,  824,
      224,   93,  350,  351,  824,  824,  352,  824,  824,  824,
      353,   93,  359,  360,  824,  824,  361,  824,  824,  824,
      362,  176,  681,  682,  824,  824,  683,  824,  824,  824,

      684,  207,  685,  686,  824,  824,  687,  824,  824,  824,
      688,  363,  824,  824,  168,  364,  365,  366,  363,  367,
      363,  366,  366,  368,  363,  363,  363,  363,  363,  363,
      366,  445,  824,  824,  176,  446,  447,  448,  445,  449,
      445,  448,  448,  450,  445,  445,  445,  445,  445,  445,
      448,  168,  376,  377,  824,  824,  378,  824,  824,  824,
      379,  380,  824,  824,  168,  381,  382,  383,  380,  384,
      380,  383,  383,  385,  380,  380,  380,  380,  380,  380,
      383,  386,  824,  824,  168,  387,  388,  389,  386,  390,
      386,  389,  389,  391,  386,  386,  386,  386,  386,  386,

      389,  176,  542,  543,  824,  824,  544,  824,  824,  824,
      545,  168,  613,  614,  824,  689,  615,  824,  824,  824,
      616,  168,  690,  691,  824,  824,  692,  824,  824,  824,
      693,  168,  694,  695,  824,  824,  696,  824,  824,  824,
      697,  617,  824,  824,  168,  618,  619,  620,  617,  621,
      617,  620,  620,  622,  617,  617,  617,  617,  617,  617,
      620,  546,  824,  824,  176,  547,  548,  549,  546,  550,
      546,  549,  549,  551,  546,  546,  546,  546,  546,  546,
      549,  168,  690,  691,  824,  824,  692,  824,  824,  824,
      693,  699,  824,  824,  168,  700,  701,  702,  699,  703,

      699,  702,  702,  704,  699,  699,  699,  699,  699,  699,
      702,  705,  824,  824,  313,  706,  707,  708,  705,  709,
      705,  708,  708,  710,  705,  705,  705,  705,  705,  705,
      708,  553,  824,  824,  168,  554,  555,  556,  553,  557,
      553,  556,  556,  558,  553,  553,  553,  553,  553,  553,
      556,  711,  824,  824,  176,  712,  713,  714,  711,  715,
      711,  714,  714,  716,  711,  711,  711,  711,  711,  711,
      714,  623,  824,  824,  168,  624,  625,  626,  623,  627,
      623,  626,  626,  628,  623,  623,  623,  623,  623,  623,
      626,  559,  824,  824,  176,  560,  561,  562,  559,  563,

      559,  562,  562,  564,  559,  559,  559,  559,  559,  559,
      562,  168,  694,  695,  824,  824,  696,  824,  824,  824,
      697,  719,  824,  824,  313,  720,  721,  722,  719,  723,
      719,  722,  722,  724,  719,  719,  719,  719,  719,  719,
      722,  232,  824,  824,   93,  233,  234,  235,  232,  236,
      232,  235,  235,  237,  232,  232,  232,  232,  232,  232,
      235,  398,  824,  824,  101,  399,  400,  401,  398,  402,
      398,  401,  401,  403,  398,  398,  398,  398,  398,  398,
      401,  405,  824,  824,   93,  406,  407,  408,  405,  409,
      405,  408,  408,  410,  405,  405,  405,  405,  405,  405,

      408,  725,  824,  824,  176,  726,  727,  728,  725,  729,
      725,  728,  728,  730,  725,  725,  725,  725,  725,  725,
      728,  731,  824,  824,  207,  732,  733,  734,  731,  735,
      731,  734,  734,  736,  731,  731,  731,  731,  731,  731,
      734,  238,  824,  824,   93,  239,  240,  241,  238,  242,
      238,  241,  241,  243,  238,  238,  238,  238,  238,  238,
      241,  411,  824,  824,  101,  412,  413,  414,  411,  415,
      411,  414,  414,  416,  411,  411,  411,  411,  411,  411,
      414,   93,  359,  360,  824,  824,  361,  824,  824,  824,
      362,   85,  737,  738,  824,  824,  824,  824,  824,  824,

      739,  176,  676,  677,  824,  824,  678,  824,  824,  824,
      679,  606,  824,  824,  168,  607,  608,  609,  606,  610,
      606,  609,  609,  611,  606,  606,  606,  606,  606,  606,
      609,  168,  613,  614,  824,  824,  615,  824,  824,  824,
      616,  740,  824,  824,  313,  741,  742,  743,  740,  744,
      740,  743,  743,  745,  740,  740,  740,  740,  740,  740,
      743,  176,  318,  319,  824,  824,  320,  168,  304,  305,
      824,  470,  306,  168,  471,  472,  824,  824,  473,  313,
      747,  748,  824,  824,  749,  307,  824,  824,  168,  308,
      309,  310,  307,  311,  307,  310,  310,  307,  307,  307,

      307,  307,  307,  307,  310,  333,  824,  824,  176,  334,
      335,  336,  333,  337,  333,  336,  336,  333,  333,  333,
      333,  333,  333,  333,  336,  168,  471,  472,  824,  824,
      473,  176,  478,  479,  824,  824,  480,  168,  322,  323,
      824,  481,  324,  168,  322,  323,  824,  824,  324,  176,
      672,  673,  824,  824,  674,  824,  824,  824,  675,  313,
      750,  751,  824,  824,  752,  824,  824,  824,  753,  176,
      754,  755,  824,  824,  756,  824,  824,  824,  757,  101,
      505,  506,  824,  824,  507,  824,  824,  824,  508,   93,
      510,  511,  824,  824,  512,  824,  824,  824,  513,  176,

      759,  760,  824,  824,  761,  824,  824,  824,  762,  207,
      763,  764,  824,  824,  765,  824,  824,  824,  766,  168,
      376,  377,  824,  518,  378,  824,  824,  824,  379,  176,
      672,  673,  824,  824,  674,  824,  824,  824,  675,  168,
      768,  769,  824,  824,  770,  824,  824,  824,  771,  168,
      768,  769,  824,  824,  770,  824,  824,  824,  771,  313,
      773,  774,  824,  824,  775,  824,  824,  824,  776,  101,
      531,  532,  824,  824,  533,  824,  824,  824,  534,   93,
      510,  511,  824,  824,  512,  824,  824,  824,  513,  313,
      777,  778,  824,  824,  779,  824,  824,  824,  780,  781,

      824,  824,  313,  782,  783,  784,  781,  785,  781,  784,
      784,  786,  781,  781,  781,  781,  781,  781,  784,  711,
      824,  824,  176,  712,  713,  714,  711,  715,  711,  714,
      714,  716,  711,  711,  711,  711,  711,  711,  714,  380,
      824,  824,  168,  381,  382,  383,  380,  384,  380,  383,
      383,  385,  380,  380,  380,  380,  380,  380,  383,  553,
      824,  824,  168,  554,  555,  556,  553,  557,  553,  556,
      556,  558,  553,  553,  553,  553,  553,  553,  556,  788,
      824,  824,  313,  789,  790,  791,  788,  792,  788,  791,
      791,  793,  788,  788,  788,  788,  788,  788,  791,  794,

      824,  824,  313,  795,  796,  797,  794,  798,  794,  797,
      797,  799,  794,  794,  794,  794,  794,  794,  797,  386,
      824,  824,  168,  387,  388,  389,  386,  390,  386,  389,
      389,  391,  386,  386,  386,  386,  386,  386,  389,  405,
      824,  824,   93,  406,  407,  408,  405,  409,  405,  408,
      408,  410,  405,  405,  405,  405,  405,  405,  408,  578,
      824,  824,  101,  579,  580,  581,  578,  582,  578,  581,
      581,  583,  578,  578,  578,  578,  578,  578,  581,  606,
      824,  824,  168,  607,  608,  609,  606,  610,  606,  609,
      609,  611,  606,  606,  606,  606,  606,  606,  609,  445,

      824,  824,  176,  446,  447,  448,  445,  449,  445,  448,
      448,  450,  445,  445,  445,  445,  445,  445,  448,  168,
      613,  614,  824,  824,  615,  824,  824,  824,  616,  617,
      824,  824,  168,  618,  619,  620,  617,  621,  617,  620,
      620,  622,  617,  617,  617,  617,  617,  617,  620,  623,
      824,  824,  168,  624,  625,  626,  623,  627,  623,  626,
      626,  628,  623,  623,  623,  623,  623,  623,  626,  176,
      478,  479,  824,  824,  480,  176,  754,  755,  824,  824,
      756,  824,  824,  824,  757,  313,  802,  803,  824,  824,
      804,  824,  824,  824,  805,  101,  663,  664,  824,  824,

      665,  824,  824,  824,  666,  313,  806,  807,  824,  824,
      808,  824,  824,  824,  809,  313,  810,  811,  824,  824,
      812,  824,  824,  824,  813,  168,  613,  614,  824,  689,
      615,  824,  824,  824,  616,  814,  824,  824,  313,  815,
      816,  817,  814,  818,  814,  817,  817,  819,  814,  814,
      814,  814,  814,  814,  817,  313,  820,  821,  824,  824,
      822,  824,  824,  824,  823,   21,  824,   21,   39,  824,
       39,   40,  824,   40,   45,  824,   45,   43,  824,   43,
       25,  824,   25,   78,  824,   78,   82,  824,   82,   84,
      824,   84,   81,  824,   81,   93,  824,   93,   96,  824,

       96,   49,  824,   49,   57,  824,   57,   69,  824,   69,
      132,  824,  132,  160,  824,  160,  163,  824,  163,  168,
      824,  168,  171,  824,  171,   88,  824,   88,  194,  824,
      194,  104,  824,  104,  191,  824,  191,  114,  824,  114,
      137,  824,  137,  146,  824,  146,  151,  824,  151,  156,
      824,  156,  261,  824,  261,   78,  824,   78,  288,  824,
      288,  292,  824,  292,  295,  824,  295,  301,  824,  301,
      179,  824,  179,  204,  824,  204,  291,  824,  291,  191,
      824,  191,  194,  824,  194,   93,  824,   93,   96,  824,
       96,  199,  824,  199,  210,  824,  210,  330,  824,  330,

      235,  824,  235,  228,  824,  228,  241,  824,  241,  366,
      824,  366,  261,  824,  261,  132,  824,  132,  146,  824,
      146,  266,  824,  266,  274,  824,  274,  280,  824,  280,
      285,  824,  285,  434,  824,  434,  443,  824,  443,  301,
      824,  301,  292,  824,  292,  462,  824,  462,  295,  824,
      295,  179,  824,  179,  310,  824,  310,  168,  824,  168,
      171,  824,  171,  316,  824,  316,  336,  824,  336,  204,
      824,  204,  104,  824,  104,   96,  824,   96,  191,  824,
      191,  114,  824,  114,  485,  824,  485,  490,  824,  490,
      401,  824,  401,  235,  824,  235,  408,  824,  408,  372,

      824,  372,  366,  824,  366,  383,  824,  383,  389,  824,
      389,  395,  824,  395,  414,  824,  414,  448,  824,  448,
      274,  824,  274,  443,  824,  443,  459,  824,  459,  146,
      824,  146,  434,  824,  434,  261,  824,  261,  609,  824,
      609,  604,  824,  604,  462,  824,  462,  301,  824,  301,
      468,  824,  468,  336,  824,  336,  310,  824,  310,  179,
      824,  179,  171,  824,  171,  204,  824,  204,  496,  824,
      496,  191,  824,  191,  330,  824,  330,  235,  824,  235,
      569,  824,  569,  383,  824,  383,  556,  824,  556,  575,
      824,  575,  581,  824,  581,  408,  824,  408,  448,  824,

      448,  366,  824,  366,  539,  824,  539,  549,  824,  549,
      562,  824,  562,  228,  824,  228,  114,  824,  114,  241,
      824,  241,  588,  824,  588,  594,  824,  594,  609,  824,
      609,  620,  824,  620,  626,  824,  626,  635,  824,  635,
      179,  824,  179,  301,  824,  301,  310,  824,  310,  645,
      824,  645,  336,  824,  336,  204,  824,  204,  549,  824,
      549,  708,  824,  708,  714,  824,  714,  401,  824,  401,
      408,  824,  408,  728,  824,  728,  734,  824,  734,  366,
      824,  366,  702,  824,  702,  722,  824,  722,  414,  824,
      414,  743,  824,  743,  609,  824,  609,  791,  824,  791,

      581,  824,  581,  784,  824,  784,  797,  824,  797,  817,
      824,  817,    3,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824
    } ;

static const flex_int16_t yy_chk[5134] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        4,   25,   25,   25,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        7,    7,    7,    7,    9,    9,   15,    7,    7,   11,
       11,   15,    9,   27,   27,   27,    7,   11,   12,   12,
       12,   29,   29,   19,  973,   12,   12,   13,   19,   29,
      953,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   17,   17,   17,
       17,   28,   28,   30,   17,   17,   28,   31,   30,   43,

       43,   43,   31,   17,   21,   21,   21,   21,   32,   36,
       36,   21,   21,   32,   44,   44,  842,   36,   82,   82,
       21,   23,   23,   23,   23,   49,   49,   49,   23,   23,
       51,   51,   51,   59,   59,   59,  832,   23,   24,   24,
       24,   24,   24,   64,   64,   24,   24,   65,   75,   75,
      826,   64,   65,   85,   24,   26,   75,   85,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   34,   83,   83,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   37,   81,   81,   81,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   41,   41,   41,   41,   89,
       89,   89,   41,   41,   91,   91,   91,  117,  117,  117,
      821,   41,   47,   47,   47,   47,   99,  816,  101,   47,
       47,   99,  101,  165,  165,  165,  811,  807,   47,   50,
       50,   50,   50,  803,  168,  796,   50,   50,  168,  173,
      173,  185,  185,  185,  173,   50,   52,   52,   52,  176,
       52,   53,  790,  176,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   55,  783,  774,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   57,   57,   57,  174,  174,   57,  194,  195,  174,
       57,   58,  194,  195,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   61,   61,   61,  292,  292,  769,  764,  760,  292,
       61,   62,   62,   62,  293,  293,  755,  751,  748,  293,
       62,   63,   63,  742,   63,  738,  294,  294,  313,   63,
       66,  294,  313,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       67,  733,  727,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       69,   69,   69,  295,  295,  721,  296,  296,  295,   69,
       70,  296,  713,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       71,  707,  701,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       73,  695,  691,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       78,   78,   78,   78,  297,  297,  686,   78,   78,  297,
      462,  462,  682,  677,  673,  462,   78,   80,   80,   80,

       80,   80,  463,  463,   80,   80,  664,  463,  660,  656,
      464,  464,  651,   80,   84,  464,  644,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   86,  634,  630,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   88,   88,   88,  625,  619,   88,
       90,   90,   90,  614,   90,   96,   96,   96,  608,  603,
       96,  599,  593,  587,   96,   97,  580,  574,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,  102,  568,  561,  102,  102,

      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  104,  104,  104,  555,  548,
      104,  105,  538,  532,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  106,  524,  520,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  107,  107,  107,  503,  499,  107,  109,  109,  109,
      495,  489,  109,  484,  479,  467,  109,  110,  110,  110,
      458,  453,  110,  447,  442,  433,  110,  112,  429,  419,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,

      112,  112,  112,  112,  112,  112,  112,  114,  114,  114,
      413,  407,  114,  400,  394,  388,  114,  115,  382,  377,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  116,  371,  365,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  119,  119,  119,
      360,  347,  119,  122,  122,  122,  335,  329,  326,  319,
      315,  309,  122,  123,  123,  123,  305,  123,  300,  290,
      284,  280,  123,  124,  124,  124,  279,  273,  265,  260,
      256,  252,  124,  125,  125,  125,  250,  240,  234,  227,

      222,  219,  125,  126,  126,  126,  214,  209,  207,  203,
      198,  190,  126,  127,  127,  187,  127,  183,  178,  170,
      163,  127,  130,  162,  155,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  139,  150,  145,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  140,  140,  140,  137,  136,  132,  131,  128,
      120,  140,  142,  142,  142,  113,  108,  103,   95,   93,
       87,  142,  144,   77,   74,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,

      144,  144,  154,   68,   56,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  158,   54,   46,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  159,   45,   40,   39,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  160,  160,  160,  160,   38,   35,   22,  160,
      160,   18,   14,   10,    8,    3,    0,    0,  160,  161,
      161,  161,  161,    0,    0,    0,  161,  161,    0,    0,
        0,    0,    0,    0,    0,  161,  164,  164,  164,  164,

        0,    0,    0,  164,  164,    0,    0,    0,    0,    0,
        0,    0,  164,  169,    0,    0,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  175,    0,    0,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  179,  179,  179,    0,    0,  179,  180,
        0,    0,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  181,
        0,    0,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  182,

      182,  182,    0,    0,  182,  184,  184,  184,    0,    0,
      184,  186,  186,  186,    0,    0,  186,  188,    0,    0,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  189,    0,    0,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  191,  191,  191,
        0,    0,  191,    0,    0,    0,  191,  193,    0,    0,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  202,    0,    0,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,

      202,  202,  202,  202,  202,  202,  202,  204,  204,  204,
        0,    0,  204,  206,    0,    0,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  208,    0,    0,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  210,  210,  210,    0,    0,  210,    0,
        0,    0,  210,  213,  213,  213,    0,    0,  213,  216,
      216,  216,    0,    0,  216,    0,    0,    0,  216,  217,
      217,  217,    0,    0,  217,  218,  218,  218,    0,  218,
      218,    0,    0,    0,  218,  220,  220,  220,    0,    0,

      220,    0,    0,    0,  220,  221,  221,  221,    0,    0,
      221,    0,    0,    0,  221,  223,  223,  223,    0,    0,
      223,    0,    0,    0,  223,  224,  224,  224,    0,    0,
      224,    0,    0,    0,  224,  225,    0,    0,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  226,    0,    0,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  228,  228,  228,    0,    0,
      228,    0,    0,    0,  228,  229,    0,    0,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,

      229,  229,  229,  229,  229,  230,    0,    0,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  231,    0,    0,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  233,    0,    0,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  237,    0,    0,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  238,    0,    0,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,

      238,  238,  238,  238,  238,  239,    0,    0,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  241,  241,  241,    0,    0,
      241,    0,    0,    0,  241,  244,  244,  244,    0,    0,
        0,    0,    0,    0,  244,  245,  245,  245,    0,  245,
        0,    0,    0,    0,  245,  246,  246,  246,    0,    0,
        0,    0,    0,    0,  246,  247,  247,  247,    0,    0,
        0,    0,    0,    0,  247,  248,  248,  248,    0,    0,
        0,    0,    0,    0,  248,  249,  249,  249,    0,  249,
        0,    0,    0,    0,  249,  251,  251,  251,    0,    0,

      251,    0,    0,    0,  251,  254,  254,  254,    0,    0,
        0,    0,    0,    0,  254,  257,  257,  257,    0,    0,
        0,    0,    0,    0,  257,  258,    0,    0,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  259,    0,    0,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  261,  261,  261,    0,    0,
        0,    0,    0,    0,  261,  262,    0,    0,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  264,    0,    0,  264,  264,

      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  266,  266,  266,    0,    0,
      266,    0,    0,    0,  266,  268,  268,  268,    0,    0,
        0,    0,    0,    0,  268,  269,  269,  269,    0,  269,
        0,    0,    0,    0,  269,  270,  270,  270,    0,    0,
        0,    0,    0,    0,  270,  272,    0,    0,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  274,  274,  274,    0,    0,
        0,    0,    0,    0,  274,  276,    0,    0,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,

      276,  276,  276,  276,  276,  277,    0,    0,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  287,    0,    0,    0,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  288,    0,    0,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  289,    0,    0,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  291,  291,  291,    0,    0,
      291,  301,  301,  301,    0,    0,  301,  302,    0,    0,

      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  303,    0,    0,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  304,  304,  304,
        0,    0,  304,  306,  306,  306,    0,    0,  306,  308,
        0,    0,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  310,
      310,  310,    0,    0,  310,  312,    0,    0,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  316,  316,  316,    0,    0,

      316,  317,    0,    0,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  318,  318,  318,    0,    0,  318,  321,  321,  321,
        0,    0,  321,  322,  322,  322,    0,    0,  322,  323,
      323,  323,    0,  323,  323,  324,  324,  324,    0,    0,
      324,  328,    0,    0,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  332,    0,    0,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  338,    0,    0,  338,  338,  338,  338,  338,  338,

      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  340,  340,  340,    0,  340,  340,  342,  342,  342,
        0,    0,  342,  343,  343,  343,    0,  343,  343,    0,
        0,    0,  343,  344,  344,  344,    0,    0,  344,    0,
        0,    0,  344,  345,  345,  345,    0,    0,  345,    0,
        0,    0,  345,  346,  346,  346,    0,    0,  346,  349,
      349,  349,    0,    0,  349,    0,    0,    0,  349,  350,
      350,  350,    0,    0,  350,    0,    0,    0,  350,  351,
      351,  351,    0,  351,  351,    0,    0,    0,  351,  352,
      352,  352,    0,    0,  352,    0,    0,    0,  352,  353,

      353,  353,    0,    0,  353,    0,    0,    0,  353,  354,
      354,  354,    0,    0,  354,    0,    0,    0,  354,  355,
      355,  355,    0,  355,  355,    0,    0,    0,  355,  356,
      356,  356,    0,    0,  356,    0,    0,    0,  356,  357,
      357,  357,    0,    0,  357,    0,    0,    0,  357,  358,
      358,  358,    0,    0,  358,    0,    0,    0,  358,  359,
      359,  359,    0,    0,  359,    0,    0,    0,  359,  361,
      361,  361,    0,    0,  361,    0,    0,    0,  361,  363,
        0,    0,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  364,

        0,    0,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  366,
      366,  366,    0,    0,  366,    0,    0,    0,  366,  367,
        0,    0,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  368,
        0,    0,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  375,
        0,    0,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  376,
      376,  376,    0,    0,  376,    0,    0,    0,  376,  378,

      378,  378,    0,    0,  378,    0,    0,    0,  378,  379,
      379,  379,    0,    0,  379,    0,    0,    0,  379,  381,
        0,    0,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  385,
        0,    0,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  387,
        0,    0,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  392,
        0,    0,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  393,

        0,    0,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  395,
      395,  395,    0,    0,  395,    0,    0,    0,  395,  396,
        0,    0,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  397,
        0,    0,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  399,
        0,    0,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  404,
        0,    0,  404,  404,  404,  404,  404,  404,  404,  404,

      404,  404,  404,  404,  404,  404,  404,  404,  404,  405,
        0,    0,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  406,
        0,    0,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  412,
        0,    0,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  417,
        0,    0,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  418,
      418,  418,    0,    0,  418,    0,    0,    0,  418,  421,

      421,  421,    0,    0,    0,    0,    0,    0,  421,  422,
      422,  422,    0,  422,    0,    0,    0,    0,  422,  423,
      423,  423,    0,    0,    0,    0,    0,    0,  423,  424,
      424,  424,    0,    0,    0,    0,    0,    0,  424,  425,
      425,  425,    0,    0,    0,    0,    0,    0,  425,  426,
      426,  426,    0,  426,    0,    0,    0,    0,  426,  427,
      427,  427,    0,    0,    0,    0,    0,    0,  427,  428,
      428,  428,    0,    0,  428,    0,    0,    0,  428,  431,
        0,    0,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  432,

        0,    0,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  434,
      434,  434,    0,    0,    0,    0,    0,    0,  434,  435,
        0,    0,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  436,
        0,    0,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  437,
      437,  437,    0,    0,    0,    0,    0,    0,  437,  438,
      438,  438,    0,  438,    0,    0,    0,    0,  438,  441,
        0,    0,  441,  441,  441,  441,  441,  441,  441,  441,

      441,  441,  441,  441,  441,  441,  441,  441,  441,  445,
        0,    0,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  448,
      448,  448,    0,    0,  448,    0,    0,    0,  448,  449,
        0,    0,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  450,
        0,    0,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  451,
      451,  451,    0,    0,    0,    0,    0,    0,  451,  455,
        0,    0,  455,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  455,  455,  455,  455,  455,  455,  455,  461,
        0,    0,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  465,
        0,    0,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  466,
        0,    0,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  468,
      468,  468,    0,    0,  468,  469,    0,    0,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  470,  470,  470,    0,    0,

      470,  471,  471,  471,    0,    0,  471,  472,  472,  472,
        0,  472,  472,  473,  473,  473,    0,    0,  473,  474,
        0,    0,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  475,
      475,  475,    0,    0,  475,  476,  476,  476,    0,  476,
      476,  477,  477,  477,    0,    0,  477,  478,  478,  478,
        0,    0,  478,  481,  481,  481,    0,    0,  481,  482,
        0,    0,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  483,
        0,    0,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  483,  483,  485,
      485,  485,    0,    0,  485,  487,    0,    0,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  488,    0,    0,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  490,  490,  490,    0,    0,
      490,    0,    0,    0,  490,  492,    0,    0,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  501,  501,  501,    0,    0,
      501,  502,  502,  502,    0,  502,  502,    0,    0,    0,

      502,  504,  504,  504,    0,    0,  504,    0,    0,    0,
      504,  505,  505,  505,    0,    0,  505,    0,    0,    0,
      505,  506,  506,  506,    0,  506,  506,    0,    0,    0,
      506,  507,  507,  507,    0,    0,  507,    0,    0,    0,
      507,  508,  508,  508,    0,    0,  508,    0,    0,    0,
      508,  509,  509,  509,    0,    0,  509,    0,    0,    0,
      509,  510,  510,  510,    0,    0,  510,    0,    0,    0,
      510,  511,  511,  511,    0,  511,  511,    0,    0,    0,
      511,  512,  512,  512,    0,    0,  512,    0,    0,    0,
      512,  514,  514,  514,    0,    0,  514,    0,    0,    0,

      514,  515,  515,  515,    0,  515,  515,    0,    0,    0,
      515,  518,  518,  518,    0,    0,  518,    0,    0,    0,
      518,  519,  519,  519,    0,    0,  519,    0,    0,    0,
      519,  522,  522,  522,    0,    0,  522,    0,    0,    0,
      522,  523,  523,  523,    0,    0,  523,    0,    0,    0,
      523,  527,  527,  527,    0,    0,  527,    0,    0,    0,
      527,  528,  528,  528,    0,  528,  528,    0,    0,    0,
      528,  529,  529,  529,    0,    0,  529,    0,    0,    0,
      529,  530,  530,  530,    0,    0,  530,    0,    0,    0,
      530,  531,  531,  531,    0,    0,  531,    0,    0,    0,

      531,  535,  535,  535,    0,    0,  535,    0,    0,    0,
      535,  536,    0,    0,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  537,    0,    0,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  539,  539,  539,    0,    0,  539,    0,    0,    0,
      539,  540,    0,    0,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  541,    0,    0,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,

      541,  542,  542,  542,    0,    0,  542,    0,    0,    0,
      542,  543,  543,  543,    0,  543,  543,    0,    0,    0,
      543,  544,  544,  544,    0,    0,  544,    0,    0,    0,
      544,  545,  545,  545,    0,    0,  545,    0,    0,    0,
      545,  546,    0,    0,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  547,    0,    0,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  549,  549,  549,    0,    0,  549,    0,    0,    0,
      549,  551,    0,    0,  551,  551,  551,  551,  551,  551,

      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  552,    0,    0,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  553,    0,    0,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  554,    0,    0,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  559,    0,    0,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  560,    0,    0,  560,  560,  560,  560,  560,  560,

      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  562,  562,  562,    0,    0,  562,    0,    0,    0,
      562,  565,    0,    0,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  572,    0,    0,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  573,    0,    0,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  577,    0,    0,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,

      577,  579,    0,    0,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  584,    0,    0,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  591,    0,    0,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  592,    0,    0,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  594,  594,  594,    0,    0,  594,    0,    0,    0,
      594,  597,  597,  597,    0,    0,    0,    0,    0,    0,

      597,  598,  598,  598,    0,    0,  598,    0,    0,    0,
      598,  601,    0,    0,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  604,  604,  604,    0,    0,  604,    0,    0,    0,
      604,  612,    0,    0,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  638,  638,  638,    0,    0,  638,  639,  639,  639,
        0,  639,  639,  640,  640,  640,    0,    0,  640,  641,
      641,  641,    0,    0,  641,  642,    0,    0,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,

      642,  642,  642,  642,  642,  643,    0,    0,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  645,  645,  645,    0,    0,
      645,  647,  647,  647,    0,    0,  647,  648,  648,  648,
        0,  648,  648,  649,  649,  649,    0,    0,  649,  650,
      650,  650,    0,    0,  650,    0,    0,    0,  650,  654,
      654,  654,    0,    0,  654,    0,    0,    0,  654,  655,
      655,  655,    0,    0,  655,    0,    0,    0,  655,  659,
      659,  659,    0,    0,  659,    0,    0,    0,  659,  662,
      662,  662,    0,    0,  662,    0,    0,    0,  662,  663,

      663,  663,    0,    0,  663,    0,    0,    0,  663,  667,
      667,  667,    0,    0,  667,    0,    0,    0,  667,  669,
      669,  669,    0,  669,  669,    0,    0,    0,  669,  672,
      672,  672,    0,    0,  672,    0,    0,    0,  672,  675,
      675,  675,    0,    0,  675,    0,    0,    0,  675,  678,
      678,  678,    0,    0,  678,    0,    0,    0,  678,  680,
      680,  680,    0,    0,  680,    0,    0,    0,  680,  685,
      685,  685,    0,    0,  685,    0,    0,    0,  685,  687,
      687,  687,    0,    0,  687,    0,    0,    0,  687,  689,
      689,  689,    0,    0,  689,    0,    0,    0,  689,  698,

        0,    0,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  700,
        0,    0,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  705,
        0,    0,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  710,
        0,    0,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  717,
        0,    0,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  718,

        0,    0,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  719,
        0,    0,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  731,
        0,    0,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  732,
        0,    0,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  740,
        0,    0,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  741,

        0,    0,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  743,
      743,  743,    0,    0,  743,    0,    0,    0,  743,  744,
        0,    0,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  745,
        0,    0,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  747,
      747,  747,    0,    0,  747,  754,  754,  754,    0,    0,
      754,    0,    0,    0,  754,  758,  758,  758,    0,    0,
      758,    0,    0,    0,  758,  763,  763,  763,    0,    0,

      763,    0,    0,    0,  763,  767,  767,  767,    0,    0,
      767,    0,    0,    0,  767,  772,  772,  772,    0,    0,
      772,    0,    0,    0,  772,  778,  778,  778,    0,  778,
      778,    0,    0,    0,  778,  787,    0,    0,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  801,  801,  801,    0,    0,
      801,    0,    0,    0,  801,  825,    0,  825,  827,    0,
      827,  828,    0,  828,  829,    0,  829,  830,    0,  830,
      831,    0,  831,  833,    0,  833,  834,    0,  834,  835,
        0,  835,  836,    0,  836,  837,    0,  837,  838,    0,

      838,  839,    0,  839,  840,    0,  840,  841,    0,  841,
      843,    0,  843,  844,    0,  844,  845,    0,  845,  846,
        0,  846,  847,    0,  847,  848,    0,  848,  849,    0,
      849,  850,    0,  850,  851,    0,  851,  852,    0,  852,
      853,    0,  853,  854,    0,  854,  855,    0,  855,  856,
        0,  856,  857,    0,  857,  858,    0,  858,  859,    0,
      859,  860,    0,  860,  861,    0,  861,  862,    0,  862,
      863,    0,  863,  864,    0,  864,  865,    0,  865,  866,
        0,  866,  867,    0,  867,  868,    0,  868,  869,    0,
      869,  870,    0,  870,  871,    0,  871,  872,    0,  872,

      873,    0,  873,  874,    0,  874,  875,    0,  875,  876,
        0,  876,  877,    0,  877,  878,    0,  878,  879,    0,
      879,  880,    0,  880,  881,    0,  881,  882,    0,  882,
      883,    0,  883,  884,    0,  884,  885,    0,  885,  886,
        0,  886,  887,    0,  887,  888,    0,  888,  889,    0,
      889,  890,    0,  890,  891,    0,  891,  892,    0,  892,
      893,    0,  893,  894,    0,  894,  895,    0,  895,  896,
        0,  896,  897,    0,  897,  898,    0,  898,  899,    0,
      899,  900,    0,  900,  901,    0,  901,  902,    0,  902,
      903,    0,  903,  904,    0,  904,  905,    0,  905,  906,

        0,  906,  907,    0,  907,  908,    0,  908,  909,    0,
      909,  910,    0,  910,  911,    0,  911,  912,    0,  912,
      913,    0,  913,  914,    0,  914,  915,    0,  915,  916,
        0,  916,  917,    0,  917,  918,    0,  918,  919,    0,
      919,  920,    0,  920,  921,    0,  921,  922,    0,  922,
      923,    0,  923,  924,    0,  924,  925,    0,  925,  926,
        0,  926,  927,    0,  927,  928,    0,  928,  929,    0,
      929,  930,    0,  930,  931,    0,  931,  932,    0,  932,
      933,    0,  933,  934,    0,  934,  935,    0,  935,  936,
        0,  936,  937,    0,  937,  938,    0,  938,  939,    0,

      939,  940,    0,  940,  941,    0,  941,  942,    0,  942,
      943,    0,  943,  944,    0,  944,  945,    0,  945,  946,
        0,  946,  947,    0,  947,  948,    0,  948,  949,    0,
      949,  950,    0,  950,  951,    0,  951,  952,    0,  952,
      954,    0,  954,  955,    0,  955,  956,    0,  956,  957,
        0,  957,  958,    0,  958,  959,    0,  959,  960,    0,
      960,  961,    0,  961,  962,    0,  962,  963,    0,  963,
      964,    0,  964,  965,    0,  965,  966,    0,  966,  967,
        0,  967,  968,    0,  968,  969,    0,  969,  970,    0,
      970,  971,    0,  971,  972,    0,  972,  974,    0,  974,

      975,    0,  975,  976,    0,  976,  977,    0,  977,  978,
        0,  978,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[17] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
/*
 *
 * CS-252 
 * shell.l: lexical analyzer for shell
 * You have to extend it.
 *
 */
#line 11 "shell.l"

#include <cstring>
#include "y.tab.hh"

#define MAX_INCLUDE_DEPTH 10
YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

static  void yyunput (int c,char *buf_ptr  );

void myunputc(int c) {
  unput(c);
}

void remove_character(char* s, char c) {
  int j, n = strlen(s);
  int escaped = 0; 

  for (int i = j = 0; i < n; i++) {
    if (s[i] != c || escaped) {
      s[j++] = s[i];
      escaped = 0;
    } else {
      escaped = 1;
    }
  }   

  s[j] = '\0';
}

void source(char *s) {
  FILE *yyin = fopen(s, "r");

  if (!yyin) {
    fprintf( stderr, "No File" );
  } else {
    yypush_buffer_state( yy_create_buffer( yyin, YY_BUF_SIZE ) );
    yyparse();
    yypop_buffer_state();
    fclose(yyin);
  }
}

void removeStartAndEnd(char* s) {
  int j, n = strlen(s);

  s[0] = '\0';
  for (int i = 1; i < n; i++) {
    s[i - 1] = s[i];
  }   
  s[n - 2] = '\0';
}

#line 1964 "lex.yy.cc"
#line 1965 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 68 "shell.l"


#line 2185 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 825 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5113 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 70 "shell.l"
{
  return NEWLINE;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 74 "shell.l"
{
  /* Discard spaces and tabs */
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 78 "shell.l"
{
  return GREAT;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 82 "shell.l"
{
  return GREATGREAT;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 86 "shell.l"
{
  return LESS;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 90 "shell.l"
{
  return PIPE;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 94 "shell.l"
{
  return AMPERSAND;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 98 "shell.l"
{
  return TWOGREAT;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 102 "shell.l"
{
  return GREATAMPERSAND;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 106 "shell.l"
{
  return GREATGREATAMPERSAND;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 110 "shell.l"
{
  printf("source!")
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 114 "shell.l"
{ 
  remove_character(yytext, '$');
  remove_character(yytext, '(');
  remove_character(yytext, ')');

  int pin[2], pout[2];
  pipe(pin); pipe(pout);

  int ret = fork();
  if (ret == 0) {
      close(pin[1]);
      close(pout[0]);

      dup2(pin[0], 0);
      close(pin[0]);

      dup2(pout[1], 1);
      close(pout[1]);
      
      // Execute shell executable
      execvp("/proc/self/exe", NULL);
      perror("Error in Child Process");
      exit(1);
  } else if (ret < 0) {
      perror("Error Forking Child");
      exit(1);
  }

  close(pin[0]);
  close(pout[1]);

  write(pin[1], strcat(yytext, "\n"), strlen(yytext) + 1);
  write(pin[1], "exit\n", 6);
  close(pin[1]);
  
  int size = 1024;
  char* buffer = (char*) malloc(sizeof(char) * size);
  char* iterator = buffer;
  int n = read(pout[0], iterator++, 1);
  while (n > 0) {
    n = read(pout[0], iterator++, 1);
    if (strlen(buffer) == size) {
      size = size * 2;
      realloc(buffer, size);
    }
  }

  *iterator = '\0';
  close(pout[0]);

  for (int i = strlen(buffer) - 1; i >= 0; i--) {
    char c = ' ';
    if (buffer[i] == '\n') {
      myunputc(' ');
    } else {
      myunputc(buffer[i]);
    }
  }
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 174 "shell.l"
{ 
  remove_character(yytext, '\\');
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 180 "shell.l"
{
  removeStartAndEnd(yytext);
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 186 "shell.l"
{
  /* Assume that file names have only alpha chars */
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 192 "shell.l"
{
  if ( !YY_CURRENT_BUFFER )
      {
      yyterminate();
      }
  }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 198 "shell.l"
ECHO;
	YY_BREAK
#line 2434 "lex.yy.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 825 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 825 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 824);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 198 "shell.l"
