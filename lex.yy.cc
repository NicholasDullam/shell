#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 16
#define YY_END_OF_BUFFER 17
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[952] =
    {   0,
        0,    0,   17,   15,    2,    1,   15,   16,    7,   15,
        5,    3,   12,   16,    6,   15,   15,    0,    0,   12,
       15,    0,   15,    0,    0,    0,    0,   12,    0,    8,
        9,    4,   12,   12,   12,   12,   12,   15,    0,   14,
        0,    0,   14,   15,    0,   14,    0,    0,   14,    0,
        0,    0,    0,    0,    0,   12,   12,   12,    0,    0,
        0,   12,   10,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   14,   14,   14,   14,   14,   14,
       14,    0,    0,   14,    0,   14,    0,    0,    0,    0,
       11,   12,   11,    0,    0,    0,    0,   11,    0,   12,

       12,   12,   11,   12,   12,   12,   12,   12,    0,    0,
        0,   12,   13,    0,    0,    0,   13,    0,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   14,   14,   14,   14,   14,   14,    0,    0,   14,
        0,   11,   14,   11,   14,    0,   14,   14,   11,    0,
       11,   11,   11,   11,   11,   11,   11,    0,   14,    0,
       11,   11,   11,   11,   11,    0,    0,    0,    0,   11,
       12,   12,   12,   12,   11,   12,   12,   11,   11,   11,

       11,   11,   12,   12,   12,   11,   12,   12,   12,   12,
       12,   12,   12,    0,   14,    0,   13,    0,   14,    0,
       13,    0,    0,    0,    0,   12,   13,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   14,   14,   14,   14,   14,   11,
       11,   11,   11,   14,   14,   14,   11,   14,   11,   11,
       11,   11,    0,    0,   14,    0,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,   12,   12,

       11,   12,   12,   12,   12,   11,   12,   12,   11,   11,
       11,   11,   11,   12,   12,   12,   11,   12,   12,   12,
       12,   11,   12,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   12,   12,   12,   11,   12,   12,
       12,   12,   12,   12,   14,   14,   14,   13,    0,   14,
        0,   13,    0,    0,    0,   11,   12,   13,    0,    0,
        0,   11,   13,    0,   12,   12,   12,   11,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   11,   12,   12,   12,   12,
       12,   12,   11,   11,   11,   14,   14,   14,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   12,   12,   12,   11,   12,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   12,
       12,   12,   11,   12,   12,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   12,   12,   12,   11,   12,   12,   12,   12,   11,
       12,   14,   14,   14,   13,   14,    0,   14,    0,   11,

       13,   14,   14,   14,   11,   13,    0,   11,   11,   11,
       11,   11,   11,    0,   14,    0,   11,   13,   11,   11,
       11,   11,   11,    0,    0,    0,   11,   12,   13,   12,
       12,   12,   11,   12,   12,   12,   11,   11,   11,   11,
       11,   11,   12,   12,   12,   11,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   11,   12,   12,   11,   11,   11,   11,   11,   12,
       12,   12,   11,   12,   12,   12,   12,   12,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   12,
       12,   12,   12,   11,   12,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   14,   14,   14,   13,   14,
       14,   14,   11,   13,   14,   11,   11,   11,   11,   11,
        0,   14,    0,   11,   13,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,   12,   12,
       11,   12,   12,   12,   12,   12,   11,   12,   12,   12,
       11,   11,   11,   11,   11,   11,   12,   12,   12,   11,
       12,   12,   12,   12,   12,   11,   12,   12,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   12,   12,   12,   11,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   11,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   11,   12,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,   12,   12,
       11,   12,   14,   14,   14,   11,   13,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   12,   12,   12,   11,   12,   12,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   12,   12,   12,   11,   12,   12,   12,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   12,
       12,   12,   11,   12,   12,   12,   12,   12,   11,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   11,
       12,   12,   12,   11,   11,   11,   11,   11,   11,   12,
       12,   12,   11,   12,   12,   12,   12,   12,   12,   12,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       12,   12,   12,   12,   11,   12,   12,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   12,
       12,   12,   11,   12,   12,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   12,   12,
       12,   11,   12,   12,   11,   11,   11,   11,   11,   11,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    6,    1,    7,    1,    8,
        9,    1,    1,    1,    1,    1,    1,    1,    1,   10,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   11,
        1,   12,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   13,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   14,   15,   16,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[17] =
    {   0,
        1,    2,    2,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[1144] =
    {   0,
        0,    0,  595,   16, 5739, 5739,   32,   44,   54,  581,
        0,   44,   67,    0,    0,    0,    0,  584,    0,    0,
       83,  586,   99,  115,  580,  128,  138,  151,  160,    0,
        0,  580,    0,  176,  575,    0,  192,    0,  577,  208,
        0,  572,   14,    0,  574,    0,    0,  570,  224,  234,
      240,  250,  566,  260,  266,  276,  289,  302,  311,  324,
      336,  348,    0,  364,  380,  396,  566,  409,  422,    0,
      435,  565,    0,    0,  451,    0,  467,  563,   30,   49,
        0,  477,   56,  483,  489,    0,  562,  556,  495,    0,
      501,  511,   60,  556,   57,  521,    0,  527,  533,    0,

      543,  555,  553,  563,  576,  589,  602,    0,  553,  612,
        0,  624,    0,  637,  650,  663,  676,  682,    0,  698,
      552,  710,  722,    0,  735,    0,  547,    0,    0,    0,
        0,  546,    0,  751,  761,    0,    0,  774,  545,    0,
        0,    0,  787,  543,  797,    0,  810,  542,    0,    0,
      823,  836,  852,  865,  537,  878,  888,  536,  112,  891,
        0,  897,  903,  909,  915,  113,  921,  927,  933,  939,
      945,  955,  961,  535,  971,  122,  123,  533,    0,    0,
        0,    0,  981,  532,    0,  987,  526,  997, 1003,  526,
        0, 1013, 1023, 1033, 1043, 1053, 1063, 1073, 1083,  521,

        0, 1093,    0, 1103,  520, 1113,    0, 1123,    0, 1136,
        0, 1149,    0, 1159, 1172, 1185, 1198,  515, 1201,    0,
     1214, 1217, 1233, 1249,  514, 1265,  513, 1281, 1297,  511,
     1313, 1326, 1339, 1351, 1367, 1379,  510, 1391, 1404, 1420,
     1436,  505, 1449, 1462, 1475,  504, 1485,    0, 1495,    0,
     1508,  503,    0,    0, 1518, 1531,    0,  501,    0,    0,
        0, 1541,  500,    0, 1551, 1557, 1563, 1569, 1575, 1581,
     1587, 1593, 1599,  495, 1605,    0, 1611, 1617, 1623, 1629,
      494,    0, 1635,  125,    0, 1641, 1647, 1653, 1659,  488,
        0, 1665,    0, 1675,  483,    0, 1681,  482, 1687,    0,

     1697,    0,  477,    0,    0, 1707,    0, 1717,    0, 1727,
      476,    0, 1737,    0, 1747,  471, 1757,    0, 1767, 1777,
     1787, 1797,    0,    0, 1807,  470,    0,    0, 1817, 1827,
     1837, 1847,  466,  465,    0, 1857,  463,    0,    0, 1867,
     1877, 1887, 1897, 1907, 1917, 1930, 1943, 1956, 1962, 1978,
      462,  461, 1994, 2010,  446, 2026, 2042, 2055,    0, 2068,
      445, 2084,  430, 2100,    0, 2116,  429, 2132, 2148,  426,
     2164, 2180,  425, 2196, 2209,    0,    0,  424,    0, 2219,
     2232,    0, 2248,  423,    0, 2261,    0,    0,  422,    0,
      421,    0, 2274,  404,    0,    0, 2290, 2306, 2322, 2338,

      403, 2351, 2367, 2377, 2387,    0, 2400,  400,    0,    0,
        0,    0, 2410, 2420, 2430, 2440, 2450, 2460,    0, 2470,
      399,    0, 2480, 2486,    0, 2492, 2498, 2504, 2510, 2516,
     2522, 2528, 2534,  395, 2540, 2550, 2556,  394, 2566,  392,
     2576,    0,  391, 2582, 2592, 2602, 2612,    0, 2622, 2632,
      390,    0, 2642, 2652, 2662, 2672, 2682,  375,  374, 2692,
     2702,  359, 2712,    0, 2722, 2732, 2742,  358,    0,  355,
     2752, 2762,  352,    0, 2772,  351, 2782,    0,  350,  349,
     2792,    0,    0,  348,  347,    0, 2802, 2812, 2822, 2832,
      343, 2842, 2855, 2868, 2881, 2884, 2900, 2916,  340, 2932,

     2945, 2954,    0,  339, 2970, 2983, 2992, 3008, 3024,  338,
        0, 3040, 3053,    0,    0,  337,    0, 3063,    0, 3072,
      335,    0, 3085, 3094, 3110,  331,    0, 3126, 3139, 3152,
     3168,  329, 3184, 3200, 3213, 3226,    0, 3242,  328,    0,
     3258,    0, 3274, 3290,  327,    0,    0,  326, 3306, 3322,
      325, 3338, 3351,    0, 3364,  324,    0, 3377,    0, 3390,
      323,    0, 3403, 3416, 3432,    0,  318,    0, 3445,    0,
        0,  315,    0,  314, 3455, 3465, 3475, 3485,  313, 3495,
        0, 3505, 3515, 3525, 3535, 3545,  312,    0, 3555,    0,
     3565,  311, 3575,    0,    0, 3585,  310,    0, 3595, 3601,

     3607,  306, 3613,    0, 3623,  305,    0,    0, 3633, 3643,
     3653,  301, 3663,    0, 3673,  300,    0,    0, 3683, 3693,
     3703,    0, 3713, 3723,  298,    0,    0,  297,    0,    0,
     3733, 3743, 3753,  296,  293, 3766, 3782,  292, 3795,    0,
        0,  288, 3804, 3817, 3826,    0, 3842,  287,    0,  285,
     3858,    0,  284, 3874, 3887,    0, 3896,  283,    0, 3909,
     3918,    0,    0,  280,    0,  279, 3934, 3950, 3966,  278,
     3982, 3998, 4011,    0,    0,  276,    0,    0, 4021, 4034,
        0, 4050,  275,    0, 4066,  270,    0, 4082,  269,    0,
        0,  268, 4098, 4114,  265, 4130, 4146, 4159,    0, 4172,

      260,    0,    0,  259, 4188, 4204, 4220,  254,    0,    0,
      253,    0, 4236,  252,    0,    0,  250, 4252, 4268, 4284,
      249, 4300, 4313, 4326,    0, 4342,  244,    0, 4355, 4368,
        0,  243, 4384, 4400, 4413, 4426,    0,    0,  239,    0,
      238, 4439, 4449,  236, 4459, 4469, 4479, 4489,  235,    0,
     4499, 4509, 4519, 4529, 4539,  234,  228, 4549, 4559,  227,
     4569,    0, 4582, 4598,  223, 4614, 4627, 4636, 4652, 4668,
      222,    0, 4681, 4690, 4706,  220,    0, 4722, 4735,    0,
        0,  219,    0, 4745, 4754,    0,  218, 4770,    0, 4783,
        0, 4796,  203,    0, 4812,    0, 4828, 4844, 4860,  202,

        0,    0,  188,    0,    0,  187,    0,    0,    0, 4876,
        0,    0,  186,    0,    0, 4889,    0, 4902,  171,    0,
     4918, 4931,    0, 4944,  170,    0,    0,  167, 4960,    0,
        0,  164,    0,    0,  163, 4976, 4992,  162,    0,    0,
     5005, 5018,    0,  161,    0, 5031,    0,    0,  160,    0,
        0, 5041, 5054,    0,    0,  159,    0,    0,    0,    0,
        0,  155,    0,    0,    0,    0,    0,  154,    0,    0,
        0, 5067,  150,    0,    0,    0,    0,  149,    0, 5077,
     5086,    0,    0,  147,    0,    0,    0,    0,    0,  146,
        0,    0, 5099,    0,    0,  145,    0,    0,    0, 5112,

     5128,    0,    0,  142,    0,    0,  141,    0,    0,  140,
        0,    0,  139,    0, 5144,  138,    0,    0, 5157,    0,
        0,  137,    0,    0,    0,    0,    0,  132,    0,    0,
        0, 5170,    0,    0,  131,    0,    0,  127,    0,    0,
      111,    0,    0,    0,    0,    0,   94,    0,    0,    0,
     5739,  100, 5186, 5189,   85, 5192, 5195, 5198, 5201, 5204,
     5207,   84, 5210,   70, 5213, 5216, 5219, 5222, 5225, 5228,
     5231, 5234, 5237, 5240, 5243, 5246, 5249, 5252, 5255,   69,
       62, 5258, 5261, 5264, 5267, 5270, 5273, 5276, 5279, 5282,
     5285, 5288, 5291, 5294, 5297, 5300, 5303, 5306, 5309, 5312,

     5315, 5318, 5321, 5324, 5327, 5330, 5333, 5336, 5339, 5342,
     5345, 5348,   54,   19, 5351, 5354, 5357, 5360, 5363, 5366,
     5369, 5372, 5375, 5378, 5381, 5384, 5387, 5390, 5393, 5396,
     5399, 5402, 5405, 5408, 5411, 5414, 5417, 5420, 5423, 5426,
     5429, 5432, 5435, 5438, 5441, 5444, 5447, 5450, 5453, 5456,
     5459, 5462, 5465, 5468, 5471, 5474, 5477, 5480, 5483, 5486,
     5489, 5492, 5495, 5498, 5501, 5504, 5507, 5510, 5513, 5516,
     5519, 5522, 5525, 5528, 5531, 5534, 5537, 5540, 5543, 5546,
     5549, 5552, 5555, 5558, 5561, 5564, 5567, 5570, 5573, 5576,
     5579, 5582, 5585, 5588, 5591, 5594, 5597, 5600, 5603, 5606,

     5609, 5612, 5615, 5618, 5621, 5624, 5627, 5630, 5633, 5636,
     5639, 5642, 5645, 5648, 5651, 5654, 5657, 5660, 5663, 5666,
     5669, 5672, 5675, 5678, 5681, 5684, 5687, 5690, 5693, 5696,
     5699, 5702, 5705, 5708, 5711, 5714, 5717, 5720, 5723, 5726,
     5729, 5732, 5735
    } ;

static const flex_int16_t yy_def[1144] =
    {   0,
      951,    1,  951,  951,  951,  951,  951,  952,  952,    4,
        9,    9,  951,    9,    9,    4,    7,    9,    9,   13,
      951,  953,  951,   21,   24,    7,  954,   13,  955,    9,
        9,    9,   13,  951,   28,   28,  951,   21,  953,  951,
       24,   24,  956,   21,  953,   40,   24,   24,   40,  957,
       23,  958,  959,  960,  958,  961,   34,   37,  962,  963,
      962,  964,    9,  951,  951,   64,   66,  951,  965,   37,
      951,   58,   58,   37,  951,   40,   75,   77,  956,  956,
       49,  966,  967,  968,  966,   49,   55,  959,  960,   55,
      969,  961,  970,   85,  967,  971,   85,  972,  973,   92,

      974,   92,  975,  976,   65,   68,   71,   58,   61,  963,
       61,  964,    9,  977,  978,  977,  979,  951,  112,  951,
      112,  980,  981,   64,  951,   66,   66,   68,   64,  125,
       66,   66,   68,  125,  982,  106,   68,  951,  106,  106,
       68,   92,  974,   92,  976,   68,  951,  106,  106,   68,
      983,  951,   49,  152,  154,  153,  984,   85,  967,  985,
       85,  972,  986,  987,  988,  967,  985,  988,  989,  990,
      991,  992,  991,  173,  993,  994,  994,   85,  167,   85,
      162,  162,  995,  162,  162,  996,  997,  998,  996,  173,
       92,  999, 1000,  999, 1001, 1002, 1003,  993, 1004,  198,

      198, 1005,  145, 1006,  145, 1005,  145, 1007,  106,  138,
      106,  147,  106, 1008, 1009, 1008, 1010,  216, 1009,  216,
     1010, 1011,  951,  951,  223,  951,  189,  951,  951,  228,
      951, 1012,  951, 1013,  951, 1013,  236, 1014,  951,  951,
      239,  241,  951, 1007,  243,  194, 1015,  194, 1002,  243,
      210,  245,  245,  243, 1016,  106,  251,  106,  106,  256,
      145, 1006,  145,  145, 1017, 1018, 1017, 1019, 1019, 1020,
     1021, 1020, 1021,  267, 1018,  267, 1022, 1023, 1022, 1024,
      279,  279, 1025, 1026,  275, 1025, 1027, 1027, 1028,  288,
      288, 1029,  279, 1024,  279,  279, 1030,  194, 1015,  194,

     1031,  249,  194,  299,  194, 1031,  249, 1032,  306, 1033,
      306,  306, 1034,  249, 1035,  249, 1034,  249, 1036, 1037,
     1036, 1038,  145,  306, 1039,  306,  306,  317, 1040, 1041,
     1042, 1041,  332,  332,  249, 1043,  249,  317,  249, 1044,
     1045, 1046, 1045, 1047, 1048, 1049, 1048, 1050,  951,  951,
      349,  286,  951,  951,  353,  951,  951, 1051,  349,  951,
      349,  951,  286,  951,  357,  951,  357,  951,  951,  321,
      951,  951,  371,  951, 1052,  371,  372,  371,  374, 1052,
      951,  374,  951,  374,  374, 1047,  357,  366,  357,  369,
      321,  374,  951,  374,  374,  386,  951,  951,  951,  398,

      400,  951,  399, 1053, 1046,  402,  343,  405,  405,  402,
      343,  405, 1054, 1055, 1054, 1056, 1057, 1058,  249, 1059,
      249,  249, 1060, 1060,  424, 1061, 1062, 1061, 1063, 1064,
     1065, 1066, 1065,  433, 1067, 1068, 1067,  437, 1069,  433,
     1066,  433,  433, 1070, 1055, 1070, 1071,  249, 1056, 1072,
      449,  449, 1073, 1074, 1075, 1076, 1075,  457,  457, 1057,
     1059,  460, 1073,  460, 1077, 1071, 1072,  466,  466,  457,
     1069, 1078,  471,  471, 1079,  457, 1080,  457,  457,  457,
     1081,  249,  461,  249,  457,  249, 1082, 1083, 1082, 1079,
      489, 1084, 1085, 1084, 1086, 1087,  951,  951,  497,  951,

     1088,  951,  498,  502,  951, 1089,  951,  951,  951,  508,
      508,  951, 1090,  497,  498,  497,  500, 1088,  500,  951,
      500,  500, 1091,  951,  951,  524,  508,  951, 1092,  951,
      951,  530,  951,  951, 1093,  951,  512,  951,  512,  512,
      951,  471,  951,  951,  543,  541,  543,  489,  951,  951,
      549,  951, 1094,  530,  951,  530,  534, 1093,  552,  951,
      552,  552, 1095,  951,  951,  560,  565,  565, 1096,  543,
      544,  543,  543,  489, 1097, 1098, 1097, 1099,  577, 1098,
      577, 1100, 1099, 1101, 1100, 1102,  585,  585, 1103,  583,
     1104,  583, 1103,  583,  583, 1104,  583,  583, 1105, 1106,

     1105,  601, 1107,  593, 1108,  593,  593,  593, 1109, 1102,
     1109,  611, 1110,  593, 1108,  593,  593,  593, 1111, 1112,
     1113,  596, 1113, 1110,  623,  624,  615,  624,  624,  624,
     1114, 1115, 1114,  633,  633,  951,  951,  636, 1116,  636,
      637,  636,  951, 1116,  951,  643,  951,  643,  643,  601,
      951,  637,  651,  951, 1117,  654,  951,  654,  654, 1118,
      951,  643,  647,  643,  643,  601,  951,  951,  951,  668,
      951,  951, 1119,  668,  669,  668,  671,  672, 1119,  951,
      671,  951,  671,  671,  951,  611,  672,  951,  672,  685,
      672,  623,  951,  951,  693,  951,  951, 1120,  671,  951,

      671,  671,  685,  611,  951,  951,  951,  706,  706,  706,
      633,  672,  951,  672,  685,  672,  623,  951,  951,  951,
      719,  951, 1121,  951,  722,  951,  722,  722, 1122,  951,
      669,  730,  951,  951, 1123,  951,  672,  688,  672,  672,
      623, 1123, 1124,  742, 1125, 1126, 1125, 1127,  747,  747,
     1128, 1129, 1130, 1131, 1130,  755,  755, 1126, 1132,  758,
     1128,  758,  951,  951,  763,  951, 1133,  951,  951,  951,
      769,  769, 1134,  951,  951,  774,  774,  951, 1135,  769,
      770,  769,  769, 1134,  951,  669,  785,  951,  672, 1136,
      733,  951,  733,  733,  951,  747,  951,  951,  951,  798,

      798,  798,  755,  734,  688,  734,  795,  734,  758,  951,
      788,  792,  788,  788,  798, 1137,  778,  951,  778,  778,
      951, 1138,  798,  951,  798,  798,  798,  755,  951,  672,
      688,  672,  798,  672,  623,  951,  951,  836,  821,  836,
     1139,  951,  669,  842,  734, 1140,  842,  669,  842,  733,
      734, 1140,  951,  733,  792,  733,  733,  795,  747,  734,
      688,  734,  795,  734,  758,  734,  688,  734,  734,  758,
      761, 1141,  761,  761,  761,  766,  770,  766,  766, 1142,
      951,  795,  799,  795,  795,  795,  761,  788,  792,  788,
      788,  798, 1137,  795,  799,  795,  795,  795,  761,  951,

      951,  672,  688,  672,  798,  672,  623,  798,  799,  798,
      798,  798,  755,  821,  951,  821,  821,  821, 1143,  842,
      669,  842,  733,  734,  852,  733,  792,  733,  733,  795,
      747,  951,  798,  799,  798,  798,  798,  755,  734,  688,
      734,  795,  734,  758,  795,  799,  795,  795,  795,  761,
        0,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,

      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,

      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951
    } ;

static const flex_int16_t yy_nxt[5756] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,    4,    4,   10,
       11,   12,   13,   14,   15,   14,   16,   39,   80,   73,
       17,   18,   19,   16,   16,   16,   19,   19,   20,   19,
       19,   19,   21,   39,   80,   22,   23,   24,   25,   21,
       21,   21,   25,   25,   21,   25,   25,   25,   26,   18,
       31,   27,   39,   80,  234,   32,   28,   29,   26,   18,
      163,  163,   36,   88,  164,  164,   28,   33,  177,  234,
      119,   34,   35,   36,   33,   33,   33,   36,   36,   37,
       36,   36,   36,   38,  109,   59,   39,   40,   41,   42,
       38,   38,   38,   42,   42,   38,   42,   42,   42,   44,

       19,  932,   45,   46,   47,   48,   44,   44,   44,   48,
       48,   44,   48,   48,   48,   42,  163,  163,  901,   49,
      164,  164,   50,   42,   42,   88,   88,   42,   25,  163,
      177,  177,   51,  164,  455,   25,   25,   25,  900,  881,
       25,   53,   54,   55,  853,  829,  455,  900,  314,  810,
       56,   36,  932,  797,  932,   57,  768,  752,   36,   36,
       36,  901,  901,   58,   60,   61,  881,  853,  853,  718,
      314,  810,   62,   19,  455,   19,   64,  900,  705,   22,
       65,   66,   67,   64,   64,   64,   67,   67,   68,   67,
       67,   67,   70,  797,  901,  455,   71,   72,   73,   70,

       70,   70,   73,   73,   74,   73,   73,   73,   75,  900,
      881,   45,   76,   77,   78,   75,   75,   75,   78,   78,
       75,   78,   78,   78,   78,  680,  667,  661,   81,  667,
      645,   78,   78,   78,  620,  455,   78,   83,   84,   85,
       48,  455,  603,  584,   86,  314,  810,   48,   48,   48,
      853,  736,   48,   88,   89,   90,  724,  314,   91,  810,
      330,  829,   92,   95,   96,   97,  309,  797,   98,   88,
       89,   90,  536,   99,   91,  314,  810,  309,   92,   88,
      101,  102,  797,  680,  103,  680,  279,  768,  104,   67,
      667,  507,  279,  105,  768,  645,   67,   67,   67,  645,

      330,  106,   73,  330,  619,  314,  107,  752,  309,   73,
       73,   73,  752,  279,  108,  110,  111,  620,  620,  603,
      579,  203,  718,  112,   19,  564,  113,   22,  115,  116,
      736,  680,  724,  203,  718,  705,  680,   25,  364,  117,
      110,  111,  667,  118,  507,  661,  645,  507,  112,   19,
      203,  113,  120,  121,  455,  465,  455,  455,  455,  329,
      122,   36,  455,  123,  124,  454,  620,   39,  125,  126,
      127,  124,  124,  124,  127,  127,  128,  127,  127,  127,
      129,  455,  455,   45,  130,  131,  132,  129,  129,  129,
      132,  132,  133,  132,  132,  132,  127,  603,  182,  182,

      134,  171,  182,  135,  127,  127,  465,  418,  136,  137,
      401,  564,   39,  138,  139,  140,  137,  137,  137,  140,
      140,  141,  140,  140,  140,   53,  143,  144,  100,  536,
      564,  381,  381,  100,  145,  146,  536,  158,   22,  147,
      148,  149,  146,  146,  146,  149,  149,  150,  149,  149,
      149,  152,  507,  364,   39,  153,  154,  155,  152,  152,
      152,  155,  155,  152,  155,  155,  155,  155,  158,  507,
      465,  156,  330,  330,  157,  155,  155,  454,  465,  155,
      159,  160,  161,  454,  298,  162,  166,  167,  168,  298,
      430,  169,  159,  160,  161,  297,  170,  162,   95,   96,

       97,  430,  274,   98,   88,  172,  173,  340,  255,  174,
      418,  298,  401,  175,   88,  101,  102,  234,  381,  103,
       87,  364,  214,  104,  166,  179,  180,  340,  329,  181,
      159,  183,  184,  171,   93,  185,  187,  188,  189,  297,
      158,  190,  171,  158,  155,  191,   95,  193,  194,  255,
      197,  195,  255,  127,  127,  196,   88,  199,  200,  233,
      109,  201,  197,  158,   93,  202,   88,  204,  205,   87,
      155,  206,  151,  127,   93,  207,  132,   42,   43,   42,
      208,   43,   69,  132,  132,  132,   63,   42,  209,  140,
       43,   27,   30,  210,  951,  951,  140,  140,  140,  951,

      951,  211,  149,  951,  951,  951,  212,  951,  951,  149,
      149,  149,  951,  951,  213,   22,  115,  116,  951,  951,
      951,  951,  951,  951,  951,   25,  951,  117,  120,  121,
      951,  951,  951,  951,  951,  951,  122,   36,  951,  123,
       39,  215,  216,  951,  951,  951,  951,  951,  951,  951,
       42,  951,  217,   45,  219,  220,  951,  951,  951,  951,
      951,  951,  951,   48,  951,  221,   39,  215,  216,  951,
      222,  951,  951,  951,  951,  951,   42,  951,  217,   39,
       49,   41,  223,  951,  951,   53,  224,  225,  223,  223,
      223,  223,  223,  223,  226,   52,  223,  227,  228,  951,

      951,   22,  229,  230,  228,  228,  228,  228,  228,  228,
      231,   67,  228,  232,  235,  236,  951,  951,  951,  951,
      951,  951,  237,   73,  951,  238,   57,   35,  951,  951,
      951,  951,  951,  951,   58,  239,  951,  951,   45,  240,
      241,  242,  239,  239,  239,  242,  242,  243,  242,  242,
      242,  242,  951,  951,  951,  244,  951,  951,  242,  242,
      242,  951,  951,  245,   83,  247,  248,  951,  951,  951,
      951,  951,  951,  249,  250,  951,  951,   45,  251,  252,
      253,  250,  250,  250,  253,  253,  254,  253,  253,  253,
       95,  193,  194,  951,  951,  195,  951,  951,  951,  196,

       88,  204,  205,  951,  951,  206,  951,  951,  951,  207,
      256,  951,  951,   45,  257,  258,  259,  256,  256,  256,
      259,  259,  260,  259,  259,  259,   53,  262,  263,  951,
      951,  951,  951,  951,  951,  264,  152,  951,  951,   39,
      153,  154,  155,  152,  152,  152,  155,  155,  152,  155,
      155,  155,   75,  951,  951,  951,   76,  951,  951,   75,
       75,   75,  951,  951,   75,  155,  951,  951,  951,  156,
      951,  951,  157,  155,  155,  951,  951,  155,   78,  951,
      951,  951,   81,  951,  951,   78,   78,   78,  951,  951,
       78,   83,  266,  267,  166,  167,  168,  951,  951,  169,

      159,  183,  184,  951,  951,  185,  159,  269,  951,  951,
      951,  270,  159,  272,  951,  951,  951,  273,  159,  275,
      276,  951,  951,  277,  166,  167,  168,  951,  951,  169,
      159,  275,  276,  951,  278,  277,  159,  280,  281,  951,
      951,  282,  284,  285,  286,  951,  951,  287,   88,  172,
      173,  951,  951,  174,  951,  951,  951,  175,   95,  289,
      290,  951,  951,  291,   88,  172,  173,  951,  292,  174,
      951,  951,  951,  175,   88,  199,  200,  951,  951,  201,
      951,  951,  951,  202,  166,  294,  295,  951,  951,  296,
       88,   89,   90,  951,  951,   91,  951,  951,  951,   92,

       95,   96,   97,  951,  951,   98,   88,   89,   90,  951,
       99,   91,  951,  951,  951,   92,  159,  299,  300,  951,
      951,  301,  951,  951,  951,  302,  166,  304,  305,  951,
      951,  306,  951,  951,  951,  307,  159,  299,  300,  951,
      308,  301,  951,  951,  951,  302,  159,  310,  311,  951,
      951,  312,  951,  951,  951,  313,  159,  315,  316,  951,
      951,  317,  951,  951,  951,  318,  187,  320,  321,  951,
      951,  322,  951,  951,  951,  323,   88,  199,  200,  951,
      951,  201,  951,  951,  951,  202,   95,  325,  326,  951,
      951,  327,  951,  951,  951,  328,   88,  331,  332,  951,

      951,  333,  951,  951,  951,  334,   95,  336,  337,  951,
      951,  338,  951,  951,  951,  339,   88,  331,  332,  951,
      951,  333,  951,  951,  951,  334,   45,  244,  241,  951,
      951,  951,  951,  951,  951,  245,  253,  951,  951,  951,
      341,  951,  951,  253,  253,  253,  951,  951,  342,  259,
      951,  951,  951,  343,  951,  951,  259,  259,  259,  951,
      951,  344,   39,  215,  216,  951,  951,  951,  951,  951,
      951,  951,   42,  951,  217,   45,  346,  347,  951,  951,
      951,  951,  951,  951,  951,   78,  951,  348,   39,  215,
      216,  951,  222,  951,  951,  951,  951,  951,   42,  951,

      217,   39,   49,   41,   45,  346,  347,  951,  951,  951,
      951,  951,  951,  951,   78,  951,  348,   39,   49,   41,
       83,  350,  351,  951,  951,  951,  951,  951,  951,  951,
       82,  951,  352,  353,  951,  951,   88,  354,  355,  353,
      353,  356,  353,  353,  353,  357,   87,  353,  358,  359,
      951,  951,   95,  360,  361,  359,  359,  362,  359,  359,
      359,  359,   94,  359,  363,  365,  951,  951,   88,  366,
      367,  365,  365,  368,  365,  365,  365,  369,  100,  365,
      370,  371,  951,  951,   39,  372,  373,  371,  371,  371,
      371,  371,  371,  374,  127,  371,  375,  376,  951,  951,

       45,  377,  378,  376,  376,  376,  376,  376,  376,  379,
      132,  376,  380,  382,  951,  951,   39,  383,  384,  382,
      382,  382,  382,  382,  382,  385,  140,  382,  386,   39,
      134,  126,  951,  951,  951,  951,  951,  951,  136,  387,
      951,  951,   53,  388,  389,  387,  387,  387,  387,  387,
      387,  390,  142,  387,  391,  235,  236,  951,  951,  951,
      951,  951,  951,  237,   73,  951,  238,  392,  951,  951,
       22,  393,  394,  392,  392,  392,  392,  392,  392,  395,
      149,  392,  396,  235,  236,  951,  397,  951,  951,  951,
      951,  237,   73,  951,  238,  107,   72,  951,  951,  951,

      951,  951,  951,  108,  398,  951,  951,   39,  399,  400,
      401,  398,  398,  398,  401,  401,  402,  401,  401,  401,
      239,  951,  951,   45,  240,  241,  242,  239,  239,  239,
      242,  242,  243,  242,  242,  242,  401,  951,  951,  951,
      403,  951,  951,  404,  401,  401,  951,  951,  405,  406,
      951,  951,   39,  407,  408,  409,  406,  406,  406,  409,
      409,  410,  409,  409,  409,   45,  244,  241,  951,  951,
      951,  951,  951,  951,  245,  409,  951,  951,  951,  411,
      951,  951,  409,  409,  409,  951,  951,  412,  166,  414,
      415,  951,  951,  416,  951,  951,  951,  417,  159,  315,

      316,  951,  951,  317,  951,  951,  951,  318,  250,  951,
      951,  951,  251,  951,  951,  250,  250,  250,  951,  951,
      254,   83,  420,  421,  951,  951,  951,  951,  951,  951,
      422,  137,  951,  951,  951,  138,  951,  951,  137,  137,
      137,  951,  951,  141,   95,  336,  337,  951,  951,  338,
      951,  951,  951,  339,  159,  275,  276,  951,  951,  277,
      166,  167,  168,  951,  951,  169,  159,  275,  276,  951,
      278,  277,  159,  269,  951,  951,  951,  270,  159,  269,
      951,  951,  951,  270,  159,  424,  951,  951,  951,  425,
      159,  272,  951,  951,  951,  273,  159,  424,  951,  951,

      951,  425,  159,  272,  951,  951,  951,  273,  166,  167,
      168,  951,  951,  169,  159,  280,  281,  951,  951,  282,
      284,  427,  428,  951,  951,  429,  159,  280,  281,  951,
      951,  282,  166,  294,  295,  951,  951,  296,  159,  160,
      161,  951,  951,  162,  159,  160,  161,  951,  170,  162,
      159,  183,  184,  951,  951,  185,  159,  183,  184,  951,
      951,  185,  166,  432,  433,  951,  951,  434,  187,  436,
      437,  951,  951,  438,  951,  951,  951,  439,  166,  294,
      295,  951,  951,  296,  284,  441,  442,  951,  951,  443,
      166,  414,  415,  951,  951,  416,  951,  951,  951,  417,

      159,  310,  311,  951,  951,  312,  951,  951,  951,  313,
      159,  310,  311,  951,  951,  312,  951,  951,  951,  313,
      284,  445,  446,  951,  951,  447,  951,  951,  951,  448,
      166,  450,  451,  951,  951,  452,  951,  951,  951,  453,
      159,  456,  457,  951,  951,  458,  951,  951,  951,  459,
      166,  461,  462,  951,  951,  463,  951,  951,  951,  464,
      159,  456,  457,  951,  951,  458,  951,  951,  951,  459,
       88,  101,  102,  951,  951,  103,  951,  951,  951,  104,
       95,  193,  194,  951,  951,  195,  951,  951,  951,  196,
       88,  101,  102,  951,  197,  103,  951,  951,  951,  104,

       88,  199,  200,  951,  951,  201,  951,  951,  951,  202,
      166,  467,  468,  951,  951,  469,  951,  951,  951,  470,
      187,  472,  473,  951,  951,  474,  951,  951,  951,  475,
       88,  331,  332,  951,  951,  333,  951,  951,  951,  334,
       95,  477,  478,  951,  951,  479,  951,  951,  951,  480,
       88,  331,  332,  951,  481,  333,  951,  951,  951,  334,
      166,  483,  484,  951,  951,  485,  951,  951,  951,  486,
      187,  488,  489,  951,  951,  490,  951,  951,  951,  491,
       45,  341,  252,  951,  951,  951,  951,  951,  951,  342,
       39,  411,  408,  951,  951,  951,  951,  951,  951,  412,

       45,  341,  252,  951,  951,  951,  951,  951,  951,  342,
       39,  210,  139,  951,  951,  951,  951,  951,  951,  211,
       39,  493,  494,  951,  951,  951,  951,  951,  951,  951,
      155,  951,  495,   45,  346,  347,  951,  951,  951,  951,
      951,  951,  951,   78,  951,  348,   39,  493,  494,  951,
      496,  951,  951,  951,  951,  951,  155,  951,  495,   39,
      156,  154,  497,  951,  951,  159,  498,  499,  497,  497,
      500,  497,  497,  497,  497,  158,  497,  501,  502,  951,
      951,  166,  503,  504,  502,  502,  505,  502,  502,  502,
      502,  165,  502,  506,  353,  951,  951,   88,  354,  355,

      353,  353,  356,  353,  353,  353,  357,   87,  353,  358,
      359,  951,  951,   95,  360,  361,  359,  359,  362,  359,
      359,  359,  359,   94,  359,  363,  508,  951,  951,   88,
      509,  510,  508,  508,  511,  508,  508,  508,  512,  171,
      508,  513,  365,  951,  951,   88,  366,  367,  365,  365,
      368,  365,  365,  365,  369,  100,  365,  370,   88,   89,
       90,  951,  951,   91,  951,  951,  951,   92,  514,  951,
      951,  166,  515,  516,  514,  514,  517,  514,  514,  514,
      514,  178,  514,  518,  519,  951,  951,  159,  520,  521,
      519,  519,  522,  519,  519,  519,  519,  182,  519,  523,

      524,  951,  951,  187,  525,  526,  524,  524,  527,  524,
      524,  524,  528,  186,  524,  529,  530,  951,  951,   95,
      531,  532,  530,  530,  533,  530,  530,  530,  534,  192,
      530,  535,  537,  951,  951,   88,  538,  539,  537,  537,
      540,  537,  537,  537,  541,  198,  537,  542,  543,  951,
      951,   88,  544,  545,  543,  543,  546,  543,  543,  543,
      547,  203,  543,  548,  371,  951,  951,   39,  372,  373,
      371,  371,  371,  371,  371,  371,  374,  127,  371,  375,
      549,  951,  951,   45,  550,  551,  549,  549,  549,  549,
      549,  549,  552,  242,  549,  553,  382,  951,  951,   39,

      383,  384,  382,  382,  382,  382,  382,  382,  385,  140,
      382,  386,   39,  134,  126,  951,  951,  951,  951,  951,
      951,  136,   39,  134,  126,  951,  951,  951,  951,  951,
      951,  136,  554,  951,  951,   83,  555,  556,  554,  554,
      554,  554,  554,  554,  557,  246,  554,  558,  559,  951,
      951,   45,  560,  561,  559,  559,  559,  559,  559,  559,
      562,  253,  559,  563,   39,  210,  139,  951,  951,  951,
      951,  951,  951,  211,  565,  951,  951,   45,  566,  567,
      565,  565,  565,  565,  565,  565,  568,  259,  565,  569,
      570,  951,  951,   53,  571,  572,  570,  570,  570,  570,

      570,  570,  573,  261,  570,  574,  398,  951,  951,   39,
      399,  400,  401,  398,  398,  398,  401,  401,  402,  401,
      401,  401,  239,  951,  951,   45,  240,  241,  242,  239,
      239,  239,  242,  242,  243,  242,  242,  242,  401,  951,
      951,  951,  403,  951,  951,  404,  401,  401,  951,  951,
      405,  406,  951,  951,   39,  407,  408,  409,  406,  406,
      406,  409,  409,  410,  409,  409,  409,  242,  951,  951,
      951,  244,  951,  951,  242,  242,  242,  951,  951,  245,
       83,  576,  577,  951,  951,  951,  951,  951,  951,  578,
       39,  411,  408,  951,  951,  951,  951,  951,  951,  412,

      250,  951,  951,  951,  251,  951,  951,  250,  250,  250,
      951,  951,  254,  159,  580,  581,  951,  951,  582,  951,
      951,  951,  583,  166,  414,  415,  951,  951,  416,  951,
      951,  951,  417,  159,  580,  581,  951,  584,  582,  951,
      951,  951,  583,  159,  586,  587,  951,  951,  588,  951,
      951,  951,  589,  159,  591,  592,  951,  951,  593,  951,
      951,  951,  594,   83,  596,  597,  951,  951,  951,  951,
      951,  951,  598,  166,  461,  462,  951,  951,  463,  951,
      951,  951,  464,  159,  424,  951,  951,  951,  425,  159,
      424,  951,  951,  951,  425,  159,  275,  276,  951,  951,

      277,  166,  167,  168,  951,  951,  169,  159,  275,  276,
      951,  278,  277,  159,  280,  281,  951,  951,  282,  284,
      600,  601,  951,  951,  602,  159,  183,  184,  951,  951,
      185,  166,  294,  295,  951,  951,  296,  159,  183,  184,
      951,  297,  185,   88,  172,  173,  951,  951,  174,  951,
      951,  951,  175,   95,  289,  290,  951,  951,  291,   88,
      172,  173,  951,  292,  174,  951,  951,  951,  175,   88,
      199,  200,  951,  951,  201,  951,  951,  951,  202,  166,
      294,  295,  951,  951,  296,  159,  299,  300,  951,  951,
      301,  951,  951,  951,  302,  166,  414,  415,  951,  951,

      416,  951,  951,  951,  417,  159,  299,  300,  951,  308,
      301,  951,  951,  951,  302,  159,  310,  311,  951,  951,
      312,  951,  951,  951,  313,  159,  586,  587,  951,  951,
      588,  951,  951,  951,  589,  166,  450,  451,  951,  951,
      452,  951,  951,  951,  453,  159,  605,  606,  951,  951,
      607,  951,  951,  951,  608,  284,  610,  611,  951,  951,
      612,  951,  951,  951,  613,  159,  456,  457,  951,  951,
      458,  951,  951,  951,  459,  166,  615,  616,  951,  951,
      617,  951,  951,  951,  618,  159,  456,  457,  951,  619,
      458,  951,  951,  951,  459,  159,  591,  592,  951,  951,

      593,  951,  951,  951,  594,  166,  461,  462,  951,  951,
      463,  951,  951,  951,  464,  159,  605,  606,  951,  951,
      607,  951,  951,  951,  608,  284,  622,  623,  951,  951,
      624,  951,  951,  951,  625,  159,  310,  311,  951,  951,
      312,  951,  951,  951,  313,  166,  450,  451,  951,  951,
      452,  951,  951,  951,  453,   88,  199,  200,  951,  951,
      201,  951,  951,  951,  202,   95,  325,  326,  951,  951,
      327,  951,  951,  951,  328,   88,  331,  332,  951,  951,
      333,  951,  951,  951,  334,  166,  627,  628,  951,  951,
      629,  951,  951,  951,  630,  187,  632,  633,  951,  951,

      634,  951,  951,  951,  635,   88,  204,  205,  951,  951,
      206,  951,  951,  951,  207,   95,  336,  337,  951,  951,
      338,  951,  951,  951,  339,   88,  204,  205,  951,  340,
      206,  951,  951,  951,  207,   88,  331,  332,  951,  951,
      333,  951,  951,  951,  334,   39,  493,  494,  951,  951,
      951,  951,  951,  951,  951,  155,  951,  495,   45,  346,
      347,  951,  951,  951,  951,  951,  951,  951,   78,  951,
      348,   39,  493,  494,  951,  496,  951,  951,  951,  951,
      951,  155,  951,  495,   39,  156,  154,   83,  637,  638,
      951,  951,  951,  951,  951,  951,  951,  265,  951,  639,

      497,  951,  951,  159,  498,  499,  497,  497,  500,  497,
      497,  497,  497,  158,  497,  501,  502,  951,  951,  166,
      503,  504,  502,  502,  505,  502,  502,  502,  502,  165,
      502,  506,  519,  951,  951,  159,  520,  521,  519,  519,
      522,  519,  519,  519,  519,  182,  519,  523,  159,  160,
      161,  951,  951,  162,  640,  951,  951,  159,  641,  642,
      640,  640,  643,  640,  640,  640,  640,  274,  640,  644,
      646,  951,  951,  159,  647,  648,  646,  646,  649,  646,
      646,  646,  646,  279,  646,  650,  159,  275,  276,  951,
      951,  277,  651,  951,  951,  284,  652,  653,  651,  651,

      654,  651,  651,  651,  651,  283,  651,  655,  508,  951,
      951,   88,  509,  510,  508,  508,  511,  508,  508,  508,
      512,  171,  508,  513,  656,  951,  951,   95,  657,  658,
      656,  656,  659,  656,  656,  656,  656,  288,  656,  660,
      537,  951,  951,   88,  538,  539,  537,  537,  540,  537,
      537,  537,  541,  198,  537,  542,   88,  172,  173,  951,
      951,  174,  951,  951,  951,  175,  159,  160,  161,  951,
      951,  162,  662,  951,  951,  166,  663,  664,  662,  662,
      665,  662,  662,  662,  662,  293,  662,  666,  159,  183,
      184,  951,  951,  185,  353,  951,  951,   88,  354,  355,

      353,  353,  356,  353,  353,  353,  357,   87,  353,  358,
      359,  951,  951,   95,  360,  361,  359,  359,  362,  359,
      359,  359,  359,   94,  359,  363,  365,  951,  951,   88,
      366,  367,  365,  365,  368,  365,  365,  365,  369,  100,
      365,  370,   88,   89,   90,  951,  951,   91,  951,  951,
      951,   92,  668,  951,  951,  159,  669,  670,  668,  668,
      671,  668,  668,  668,  672,  298,  668,  673,  674,  951,
      951,  166,  675,  676,  674,  674,  677,  674,  674,  674,
      678,  303,  674,  679,  681,  951,  951,  159,  682,  683,
      681,  681,  684,  681,  681,  681,  685,  309,  681,  686,

      687,  951,  951,  159,  688,  689,  687,  687,  690,  687,
      687,  687,  691,  314,  687,  692,  159,  299,  300,  951,
      951,  301,  951,  951,  951,  302,  693,  951,  951,  187,
      694,  695,  693,  693,  696,  693,  693,  693,  697,  319,
      693,  698,  699,  951,  951,   95,  700,  701,  699,  699,
      702,  699,  699,  699,  703,  324,  699,  704,  706,  951,
      951,   88,  707,  708,  706,  706,  709,  706,  706,  706,
      710,  330,  706,  711,  543,  951,  951,   88,  544,  545,
      543,  543,  546,  543,  543,  543,  547,  203,  543,  548,
      712,  951,  951,   95,  713,  714,  712,  712,  715,  712,

      712,  712,  716,  335,  712,  717,  719,  951,  951,   39,
      720,  721,  719,  719,  719,  719,  719,  719,  722,  401,
      719,  723,  549,  951,  951,   45,  550,  551,  549,  549,
      549,  549,  549,  549,  552,  242,  549,  553,  725,  951,
      951,   39,  726,  727,  725,  725,  725,  725,  725,  725,
      728,  409,  725,  729,   39,  403,  400,  951,  951,  951,
      951,  951,  951,  405,  730,  951,  951,  166,  731,  732,
      730,  730,  733,  730,  730,  730,  734,  413,  730,  735,
      159,  299,  300,  951,  951,  301,  951,  951,  951,  302,
      559,  951,  951,   45,  560,  561,  559,  559,  559,  559,

      559,  559,  562,  253,  559,  563,   39,  411,  408,  951,
      951,  951,  951,  951,  951,  412,  737,  951,  951,   83,
      738,  739,  737,  737,  737,  737,  737,  737,  740,  419,
      737,  741,  382,  951,  951,   39,  383,  384,  382,  382,
      382,  382,  382,  382,  385,  140,  382,  386,   39,  210,
      139,  951,  951,  951,  951,  951,  951,  211,  159,  580,
      581,  951,  951,  582,  951,  951,  951,  583,  166,  414,
      415,  951,  951,  416,  951,  951,  951,  417,  159,  580,
      581,  951,  584,  582,  951,  951,  951,  583,  159,  591,
      592,  951,  951,  593,  951,  951,  951,  594,  166,  414,

      415,  951,  951,  416,  951,  951,  951,  417,  159,  586,
      587,  951,  951,  588,  951,  951,  951,  589,  159,  591,
      592,  951,  951,  593,  951,  951,  951,  594,  284,  743,
      744,  951,  951,  745,  951,  951,  951,  746,  159,  586,
      587,  951,  951,  588,  951,  951,  951,  589,  166,  450,
      451,  951,  951,  452,  951,  951,  951,  453,  159,  605,
      606,  951,  951,  607,  951,  951,  951,  608,  166,  461,
      462,  951,  951,  463,  951,  951,  951,  464,  159,  605,
      606,  951,  951,  607,  951,  951,  951,  608,  166,  461,
      462,  951,  951,  463,  951,  951,  951,  464,  159,  280,

      281,  951,  951,  282,  166,  294,  295,  951,  951,  296,
      159,  280,  281,  951,  430,  282,  284,  748,  749,  951,
      951,  750,  951,  951,  951,  751,  166,  615,  616,  951,
      951,  617,  951,  951,  951,  618,  159,  310,  311,  951,
      951,  312,  951,  951,  951,  313,  166,  450,  451,  951,
      951,  452,  951,  951,  951,  453,  159,  310,  311,  951,
      454,  312,  951,  951,  951,  313,  159,  456,  457,  951,
      951,  458,  951,  951,  951,  459,  166,  615,  616,  951,
      951,  617,  951,  951,  951,  618,  284,  754,  755,  951,
      951,  756,  951,  951,  951,  757,  284,  759,  760,  951,

      951,  761,  951,  951,  951,  762,  159,  315,  316,  951,
      951,  317,  951,  951,  951,  318,  159,  315,  316,  951,
      465,  317,  951,  951,  951,  318,  159,  456,  457,  951,
      951,  458,  951,  951,  951,  459,   88,  331,  332,  951,
      951,  333,  951,  951,  951,  334,   95,  477,  478,  951,
      951,  479,  951,  951,  951,  480,   88,  331,  332,  951,
      481,  333,  951,  951,  951,  334,  640,  951,  951,  159,
      641,  642,  640,  640,  643,  640,  640,  640,  640,  274,
      640,  644,  502,  951,  951,  166,  503,  504,  502,  502,
      505,  502,  502,  502,  502,  165,  502,  506,  159,  275,

      276,  951,  951,  277,  646,  951,  951,  159,  647,  648,
      646,  646,  649,  646,  646,  646,  646,  279,  646,  650,
      159,  275,  276,  951,  951,  277,  763,  951,  951,  284,
      764,  765,  763,  763,  766,  763,  763,  763,  763,  426,
      763,  767,  662,  951,  951,  166,  663,  664,  662,  662,
      665,  662,  662,  662,  662,  293,  662,  666,  497,  951,
      951,  159,  498,  499,  497,  497,  500,  497,  497,  497,
      497,  158,  497,  501,  519,  951,  951,  159,  520,  521,
      519,  519,  522,  519,  519,  519,  519,  182,  519,  523,
      159,  160,  161,  951,  951,  162,  769,  951,  951,  166,

      770,  771,  769,  769,  772,  769,  769,  769,  769,  431,
      769,  773,  159,  183,  184,  951,  951,  185,  774,  951,
      951,  187,  775,  776,  774,  774,  777,  774,  774,  774,
      778,  435,  774,  779,  780,  951,  951,  284,  781,  782,
      780,  780,  783,  780,  780,  780,  780,  440,  780,  784,
      668,  951,  951,  159,  669,  670,  668,  668,  671,  668,
      668,  668,  672,  298,  668,  673,  730,  951,  951,  166,
      731,  732,  730,  730,  733,  730,  730,  730,  734,  413,
      730,  735,  681,  951,  951,  159,  682,  683,  681,  681,
      684,  681,  681,  681,  685,  309,  681,  686,  687,  951,

      951,  159,  688,  689,  687,  687,  690,  687,  687,  687,
      691,  314,  687,  692,  159,  299,  300,  951,  951,  301,
      951,  951,  951,  302,  159,  299,  300,  951,  951,  301,
      951,  951,  951,  302,  785,  951,  951,  284,  786,  787,
      785,  785,  788,  785,  785,  785,  789,  444,  785,  790,
      791,  951,  951,  166,  792,  793,  791,  791,  794,  791,
      791,  791,  795,  449,  791,  796,  798,  951,  951,  159,
      799,  800,  798,  798,  801,  798,  798,  798,  802,  455,
      798,  803,  804,  951,  951,  166,  805,  806,  804,  804,
      807,  804,  804,  804,  808,  460,  804,  809,  365,  951,

      951,   88,  366,  367,  365,  365,  368,  365,  365,  365,
      369,  100,  365,  370,  530,  951,  951,   95,  531,  532,
      530,  530,  533,  530,  530,  530,  534,  192,  530,  535,
      537,  951,  951,   88,  538,  539,  537,  537,  540,  537,
      537,  537,  541,  198,  537,  542,  543,  951,  951,   88,
      544,  545,  543,  543,  546,  543,  543,  543,  547,  203,
      543,  548,   88,  101,  102,  951,  951,  103,  951,  951,
      951,  104,  811,  951,  951,  166,  812,  813,  811,  811,
      814,  811,  811,  811,  815,  466,  811,  816,  817,  951,
      951,  187,  818,  819,  817,  817,  820,  817,  817,  817,

      821,  471,  817,  822,  706,  951,  951,   88,  707,  708,
      706,  706,  709,  706,  706,  706,  710,  330,  706,  711,
      823,  951,  951,   95,  824,  825,  823,  823,  826,  823,
      823,  823,  827,  476,  823,  828,  830,  951,  951,  166,
      831,  832,  830,  830,  833,  830,  830,  830,  834,  482,
      830,  835,  836,  951,  951,  187,  837,  838,  836,  836,
      839,  836,  836,  836,  840,  487,  836,  841,  719,  951,
      951,   39,  720,  721,  719,  719,  719,  719,  719,  719,
      722,  401,  719,  723,  549,  951,  951,   45,  550,  551,
      549,  549,  549,  549,  549,  549,  552,  242,  549,  553,

      725,  951,  951,   39,  726,  727,  725,  725,  725,  725,
      725,  725,  728,  409,  725,  729,   39,  403,  400,  951,
      951,  951,  951,  951,  951,  405,  842,  951,  951,   83,
      843,  844,  842,  842,  842,  842,  842,  842,  845,  575,
      842,  846,  559,  951,  951,   45,  560,  561,  559,  559,
      559,  559,  559,  559,  562,  253,  559,  563,   39,  411,
      408,  951,  951,  951,  951,  951,  951,  412,  847,  951,
      951,  159,  848,  849,  847,  847,  850,  847,  847,  847,
      851,  579,  847,  852,  854,  951,  951,  159,  855,  856,
      854,  854,  857,  854,  854,  854,  858,  585,  854,  859,

      860,  951,  951,  159,  861,  862,  860,  860,  863,  860,
      860,  860,  864,  590,  860,  865,  159,  580,  581,  951,
      951,  582,  951,  951,  951,  583,  866,  951,  951,   83,
      867,  868,  866,  866,  866,  866,  866,  866,  869,  595,
      866,  870,  159,  580,  581,  951,  951,  582,  951,  951,
      951,  583,  166,  414,  415,  951,  951,  416,  951,  951,
      951,  417,  159,  586,  587,  951,  951,  588,  951,  951,
      951,  589,  159,  591,  592,  951,  951,  593,  951,  951,
      951,  594,  159,  586,  587,  951,  951,  588,  951,  951,
      951,  589,  166,  450,  451,  951,  951,  452,  951,  951,

      951,  453,  159,  605,  606,  951,  951,  607,  951,  951,
      951,  608,  284,  872,  873,  951,  951,  874,  951,  951,
      951,  875,  159,  456,  457,  951,  951,  458,  951,  951,
      951,  459,  166,  615,  616,  951,  951,  617,  951,  951,
      951,  618,  159,  456,  457,  951,  619,  458,  951,  951,
      951,  459,  159,  591,  592,  951,  951,  593,  951,  951,
      951,  594,  166,  461,  462,  951,  951,  463,  951,  951,
      951,  464,  159,  605,  606,  951,  951,  607,  951,  951,
      951,  608,  640,  951,  951,  159,  641,  642,  640,  640,
      643,  640,  640,  640,  640,  274,  640,  644,  502,  951,

      951,  166,  503,  504,  502,  502,  505,  502,  502,  502,
      502,  165,  502,  506,  646,  951,  951,  159,  647,  648,
      646,  646,  649,  646,  646,  646,  646,  279,  646,  650,
      159,  275,  276,  951,  951,  277,  876,  951,  951,  284,
      877,  878,  876,  876,  879,  876,  876,  876,  876,  599,
      876,  880,  519,  951,  951,  159,  520,  521,  519,  519,
      522,  519,  519,  519,  519,  182,  519,  523,  662,  951,
      951,  166,  663,  664,  662,  662,  665,  662,  662,  662,
      662,  293,  662,  666,  159,  183,  184,  951,  951,  185,
      508,  951,  951,   88,  509,  510,  508,  508,  511,  508,

      508,  508,  512,  171,  508,  513,  656,  951,  951,   95,
      657,  658,  656,  656,  659,  656,  656,  656,  656,  288,
      656,  660,  537,  951,  951,   88,  538,  539,  537,  537,
      540,  537,  537,  537,  541,  198,  537,  542,   88,  172,
      173,  951,  951,  174,  951,  951,  951,  175,  159,  183,
      184,  951,  951,  185,  668,  951,  951,  159,  669,  670,
      668,  668,  671,  668,  668,  668,  672,  298,  668,  673,
      681,  951,  951,  159,  682,  683,  681,  681,  684,  681,
      681,  681,  685,  309,  681,  686,  159,  299,  300,  951,
      951,  301,  951,  951,  951,  302,  791,  951,  951,  166,

      792,  793,  791,  791,  794,  791,  791,  791,  795,  449,
      791,  796,  882,  951,  951,  159,  883,  884,  882,  882,
      885,  882,  882,  882,  886,  604,  882,  887,  888,  951,
      951,  284,  889,  890,  888,  888,  891,  888,  888,  888,
      892,  609,  888,  893,  798,  951,  951,  159,  799,  800,
      798,  798,  801,  798,  798,  798,  802,  455,  798,  803,
      894,  951,  951,  166,  895,  896,  894,  894,  897,  894,
      894,  894,  898,  614,  894,  899,  902,  951,  951,  284,
      903,  904,  902,  902,  905,  902,  902,  902,  906,  621,
      902,  907,  159,  310,  311,  951,  951,  312,  951,  951,

      951,  313,  699,  951,  951,   95,  700,  701,  699,  699,
      702,  699,  699,  699,  703,  324,  699,  704,  706,  951,
      951,   88,  707,  708,  706,  706,  709,  706,  706,  706,
      710,  330,  706,  711,   88,  199,  200,  951,  951,  201,
      951,  951,  951,  202,  908,  951,  951,  166,  909,  910,
      908,  908,  911,  908,  908,  908,  912,  626,  908,  913,
      914,  951,  951,  187,  915,  916,  914,  914,  917,  914,
      914,  914,  918,  631,  914,  919,  543,  951,  951,   88,
      544,  545,  543,  543,  546,  543,  543,  543,  547,  203,
      543,  548,  712,  951,  951,   95,  713,  714,  712,  712,

      715,  712,  712,  712,  716,  335,  712,  717,   88,  204,
      205,  951,  951,  206,  951,  951,  951,  207,  847,  951,
      951,  159,  848,  849,  847,  847,  850,  847,  847,  847,
      851,  579,  847,  852,  159,  580,  581,  951,  951,  582,
      951,  951,  951,  583,  159,  580,  581,  951,  951,  582,
      951,  951,  951,  583,  920,  951,  951,  284,  921,  922,
      920,  920,  923,  920,  920,  920,  924,  742,  920,  925,
      166,  615,  616,  951,  951,  617,  951,  951,  951,  618,
      159,  280,  281,  951,  951,  282,  926,  951,  951,  284,
      927,  928,  926,  926,  929,  926,  926,  926,  930,  747,

      926,  931,  159,  310,  311,  951,  951,  312,  951,  951,
      951,  313,  933,  951,  951,  284,  934,  935,  933,  933,
      936,  933,  933,  933,  937,  753,  933,  938,  939,  951,
      951,  284,  940,  941,  939,  939,  942,  939,  939,  939,
      943,  758,  939,  944,  823,  951,  951,   95,  824,  825,
      823,  823,  826,  823,  823,  823,  827,  476,  823,  828,
       88,  331,  332,  951,  951,  333,  951,  951,  951,  334,
      945,  951,  951,  284,  946,  947,  945,  945,  948,  945,
      945,  945,  949,  871,  945,  950,   39,  951,   39,   52,
      951,   52,   79,  951,   79,   82,  951,   82,   87,  951,

       87,   88,  951,   88,   94,  951,   94,  100,  951,  100,
      114,  951,  114,  142,  951,  142,  158,  951,  158,  159,
      951,  159,  165,  951,  165,  171,  951,  171,  176,  951,
      176,  178,  951,  178,  182,  951,  182,  186,  951,  186,
      192,  951,  192,  198,  951,  198,  203,  951,  203,  214,
      951,  214,  218,  951,  218,   42,  951,   42,  246,  951,
      246,  261,  951,  261,  265,  951,  265,  165,  951,  165,
      268,  951,  268,  271,  951,  271,  274,  951,  274,  279,
      951,  279,  283,  951,  283,  171,  951,  171,  288,  951,
      288,  198,  951,  198,  176,  951,  176,  293,  951,  293,

       87,  951,   87,   88,  951,   88,   94,  951,   94,  298,
      951,  298,  303,  951,  303,  309,  951,  309,  314,  951,
      314,  319,  951,  319,  324,  951,  324,  330,  951,  330,
      335,  951,  335,  242,  951,  242,  214,  951,  214,  345,
      951,  345,   42,  951,   42,  349,  951,  349,  127,  951,
      127,  413,  951,  413,  419,  951,  419,  274,  951,  274,
      165,  951,  165,  268,  951,  268,  423,  951,  423,  271,
      951,  271,  279,  951,  279,  426,  951,  426,  293,  951,
      293,  158,  951,  158,  159,  951,  159,  182,  951,  182,
      431,  951,  431,  435,  951,  435,  440,  951,  440,  309,

      951,  309,  444,  951,  444,  449,  951,  449,  455,  951,
      455,  460,  951,  460,  100,  951,  100,  192,  951,  192,
      198,  951,  198,  466,  951,  466,  471,  951,  471,  330,
      951,  330,  476,  951,  476,  482,  951,  482,  487,  951,
      487,  253,  951,  253,  409,  951,  409,  140,  951,  140,
      492,  951,  492,  345,  951,  345,  155,  951,  155,   87,
      951,   87,  127,  951,  127,  575,  951,  575,  579,  951,
      579,  413,  951,  413,  585,  951,  585,  590,  951,  590,
      595,  951,  595,  460,  951,  460,  423,  951,  423,  274,
      951,  274,  165,  951,  165,  279,  951,  279,  599,  951,

      599,  182,  951,  182,  293,  951,  293,  171,  951,  171,
      288,  951,  288,  198,  951,  198,  298,  951,  298,  309,
      951,  309,  449,  951,  449,  604,  951,  604,  609,  951,
      609,  455,  951,  455,  614,  951,  614,  621,  951,  621,
      324,  951,  324,  330,  951,  330,  626,  951,  626,  631,
      951,  631,  203,  951,  203,  335,  951,  335,  492,  951,
      492,  345,  951,  345,  155,  951,  155,  636,  951,  636,
      158,  951,  158,  274,  951,  274,  171,  951,  171,  182,
      951,  182,   87,  951,   87,  298,  951,  298,  401,  951,
      401,  409,  951,  409,  140,  951,  140,  579,  951,  579,

      413,  951,  413,  590,  951,  590,  585,  951,  585,  742,
      951,  742,  449,  951,  449,  604,  951,  604,  460,  951,
      460,  279,  951,  279,  293,  951,  293,  747,  951,  747,
      614,  951,  614,  309,  951,  309,  455,  951,  455,  753,
      951,  753,  758,  951,  758,  314,  951,  314,  330,  951,
      330,  476,  951,  476,  274,  951,  274,  158,  951,  158,
      182,  951,  182,  298,  951,  298,  100,  951,  100,  401,
      951,  401,  409,  951,  409,  579,  951,  579,  413,  951,
      413,  585,  951,  585,  590,  951,  590,  449,  951,  449,
      604,  951,  604,  871,  951,  871,  455,  951,  455,  614,

      951,  614,  460,  951,  460,  274,  951,  274,  182,  951,
      182,  171,  951,  171,  298,  951,  298,  309,  951,  309,
      198,  951,  198,  203,  951,  203,  579,  951,  579,  614,
      951,  614,  279,  951,  279,  330,  951,  330,    3,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951
    } ;

static const flex_int16_t yy_chk[5756] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    4,   43,   43, 1014,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    7,   79,   79,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    8,    8,
       12,    8,   80,   80, 1013,   12,    8,    8,    9,    9,
       83,   95,  981,   93,   83,   95,    9,   13,   93,  980,
      964,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   21,  962,  955,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   23,

      952,  947,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   24,  159,  166,  941,   24,
      159,  166,   24,   24,   24,  176,  177,   24,   26,  284,
      176,  177,   26,  284,  938,   26,   26,   26,  935,  928,
       26,   27,   27,   27,  922,  916,  913,  910,  907,  904,
       27,   28,  896,  890,  884,   28,  878,  873,   28,   28,
       28,  868,  862,   28,   29,   29,  856,  849,  844,  838,
      835,  832,   29,   29,  828,   29,   34,  825,  819,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   37,  813,  806,  803,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   40,  800,
      793,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   49,  787,  782,  776,   49,  771,
      765,   49,   49,   49,  760,  757,   49,   50,   50,   50,
       51,  756,  749,  744,   51,  741,  739,   51,   51,   51,
      732,  727,   51,   52,   52,   52,  721,  717,   52,  714,
      711,  708,   52,   54,   54,   54,  704,  701,   54,   55,
       55,   55,  695,   55,   55,  692,  689,  686,   55,   56,
       56,   56,  683,  676,   56,  670,  666,  664,   56,   57,
      658,  653,  650,   57,  648,  642,   57,   57,   57,  638,

      635,   57,   58,  634,  628,  625,   58,  616,  612,   58,
       58,   58,  606,  602,   58,   59,   59,  597,  592,  587,
      579,  574,  572,   59,   59,  567,   59,   60,   60,   60,
      561,  556,  551,  548,  545,  539,  532,   60,  526,   60,
       61,   61,  521,   61,  516,  510,  504,  499,   61,   61,
      491,   61,   62,   62,  485,  484,  480,  479,  476,  473,
       62,   62,  470,   62,   64,  468,  462,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       65,  459,  458,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   66,  451,  443,  440,

       66,  438,  434,   66,   66,   66,  421,  408,   66,   68,
      401,  394,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   69,   69,   69,  391,  389,
      384,  378,  373,  370,   69,   71,  367,  363,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   75,  361,  355,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   77,  352,  351,
      337,   77,  334,  333,   77,   77,   77,  326,  316,   77,
       82,   82,   82,  311,  303,   82,   84,   84,   84,  298,
      295,   84,   85,   85,   85,  290,   85,   85,   89,   89,

       89,  281,  274,   89,   91,   91,   91,  263,  258,   91,
      252,  246,  242,   91,   92,   92,   92,  237,  230,   92,
      227,  225,  218,   92,   96,   96,   96,  205,  200,   96,
       98,   98,   98,  190,  187,   98,   99,   99,   99,  184,
      178,   99,  174,  158,  155,   99,  101,  101,  101,  148,
      144,  101,  139,  132,  127,  101,  103,  103,  103,  121,
      109,  103,  102,   94,   88,  103,  104,  104,  104,   87,
       78,  104,   72,   67,   53,  104,  105,   48,   45,   42,
      105,   39,   35,  105,  105,  105,   32,   25,  105,  106,
       22,   18,   10,  106,    3,    0,  106,  106,  106,    0,

        0,  106,  107,    0,    0,    0,  107,    0,    0,  107,
      107,  107,    0,    0,  107,  110,  110,  110,    0,    0,
        0,    0,    0,    0,    0,  110,    0,  110,  112,  112,
        0,    0,    0,    0,    0,    0,  112,  112,    0,  112,
      114,  114,  114,    0,    0,    0,    0,    0,    0,    0,
      114,    0,  114,  115,  115,  115,    0,    0,    0,    0,
        0,    0,    0,  115,    0,  115,  116,  116,  116,    0,
      116,    0,    0,    0,    0,    0,  116,    0,  116,  117,
      117,  117,  118,    0,    0,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  120,    0,

        0,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  122,  122,    0,    0,    0,    0,
        0,    0,  122,  122,    0,  122,  123,  123,    0,    0,
        0,    0,    0,    0,  123,  125,    0,    0,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  134,    0,    0,    0,  134,    0,    0,  134,  134,
      134,    0,    0,  134,  135,  135,  135,    0,    0,    0,
        0,    0,    0,  135,  138,    0,    0,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      143,  143,  143,    0,    0,  143,    0,    0,    0,  143,

      145,  145,  145,    0,    0,  145,    0,    0,    0,  145,
      147,    0,    0,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  151,  151,  151,    0,
        0,    0,    0,    0,    0,  151,  152,    0,    0,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  153,    0,    0,    0,  153,    0,    0,  153,
      153,  153,    0,    0,  153,  154,    0,    0,    0,  154,
        0,    0,  154,  154,  154,    0,    0,  154,  156,    0,
        0,    0,  156,    0,    0,  156,  156,  156,    0,    0,
      156,  157,  157,  157,  160,  160,  160,    0,    0,  160,

      162,  162,  162,    0,    0,  162,  163,  163,    0,    0,
        0,  163,  164,  164,    0,    0,    0,  164,  165,  165,
      165,    0,    0,  165,  167,  167,  167,    0,    0,  167,
      168,  168,  168,    0,  168,  168,  169,  169,  169,    0,
        0,  169,  170,  170,  170,    0,    0,  170,  171,  171,
      171,    0,    0,  171,    0,    0,    0,  171,  172,  172,
      172,    0,    0,  172,  173,  173,  173,    0,  173,  173,
        0,    0,    0,  173,  175,  175,  175,    0,    0,  175,
        0,    0,    0,  175,  183,  183,  183,    0,    0,  183,
      186,  186,  186,    0,    0,  186,    0,    0,    0,  186,

      188,  188,  188,    0,    0,  188,  189,  189,  189,    0,
      189,  189,    0,    0,    0,  189,  192,  192,  192,    0,
        0,  192,    0,    0,    0,  192,  193,  193,  193,    0,
        0,  193,    0,    0,    0,  193,  194,  194,  194,    0,
      194,  194,    0,    0,    0,  194,  195,  195,  195,    0,
        0,  195,    0,    0,    0,  195,  196,  196,  196,    0,
        0,  196,    0,    0,    0,  196,  197,  197,  197,    0,
        0,  197,    0,    0,    0,  197,  198,  198,  198,    0,
        0,  198,    0,    0,    0,  198,  199,  199,  199,    0,
        0,  199,    0,    0,    0,  199,  202,  202,  202,    0,

        0,  202,    0,    0,    0,  202,  204,  204,  204,    0,
        0,  204,    0,    0,    0,  204,  206,  206,  206,    0,
        0,  206,    0,    0,    0,  206,  208,  208,  208,    0,
        0,    0,    0,    0,    0,  208,  210,    0,    0,    0,
      210,    0,    0,  210,  210,  210,    0,    0,  210,  212,
        0,    0,    0,  212,    0,    0,  212,  212,  212,    0,
        0,  212,  214,  214,  214,    0,    0,    0,    0,    0,
        0,    0,  214,    0,  214,  215,  215,  215,    0,    0,
        0,    0,    0,    0,    0,  215,    0,  215,  216,  216,
      216,    0,  216,    0,    0,    0,    0,    0,  216,    0,

      216,  217,  217,  217,  219,  219,  219,    0,    0,    0,
        0,    0,    0,    0,  219,    0,  219,  221,  221,  221,
      222,  222,  222,    0,    0,    0,    0,    0,    0,    0,
      222,    0,  222,  223,    0,    0,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  224,
        0,    0,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  226,    0,    0,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  228,    0,    0,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  229,    0,    0,

      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  231,    0,    0,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  232,
      232,  232,    0,    0,    0,    0,    0,    0,  232,  233,
        0,    0,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  234,  234,    0,    0,    0,
        0,    0,    0,  234,  234,    0,  234,  235,    0,    0,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  236,  236,    0,  236,    0,    0,    0,
        0,  236,  236,    0,  236,  238,  238,    0,    0,    0,

        0,    0,    0,  238,  239,    0,    0,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      240,    0,    0,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  241,    0,    0,    0,
      241,    0,    0,  241,  241,  241,    0,    0,  241,  243,
        0,    0,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  244,  244,  244,    0,    0,
        0,    0,    0,    0,  244,  245,    0,    0,    0,  245,
        0,    0,  245,  245,  245,    0,    0,  245,  247,  247,
      247,    0,    0,  247,    0,    0,    0,  247,  249,  249,

      249,    0,    0,  249,    0,    0,    0,  249,  251,    0,
        0,    0,  251,    0,    0,  251,  251,  251,    0,    0,
      251,  255,  255,  255,    0,    0,    0,    0,    0,    0,
      255,  256,    0,    0,    0,  256,    0,    0,  256,  256,
      256,    0,    0,  256,  262,  262,  262,    0,    0,  262,
        0,    0,    0,  262,  265,  265,  265,    0,    0,  265,
      266,  266,  266,    0,    0,  266,  267,  267,  267,    0,
      267,  267,  268,  268,    0,    0,    0,  268,  269,  269,
        0,    0,    0,  269,  270,  270,    0,    0,    0,  270,
      271,  271,    0,    0,    0,  271,  272,  272,    0,    0,

        0,  272,  273,  273,    0,    0,    0,  273,  275,  275,
      275,    0,    0,  275,  277,  277,  277,    0,    0,  277,
      278,  278,  278,    0,    0,  278,  279,  279,  279,    0,
        0,  279,  280,  280,  280,    0,    0,  280,  283,  283,
      283,    0,    0,  283,  286,  286,  286,    0,  286,  286,
      287,  287,  287,    0,    0,  287,  288,  288,  288,    0,
        0,  288,  289,  289,  289,    0,    0,  289,  292,  292,
      292,    0,    0,  292,    0,    0,    0,  292,  294,  294,
      294,    0,    0,  294,  297,  297,  297,    0,    0,  297,
      299,  299,  299,    0,    0,  299,    0,    0,    0,  299,

      301,  301,  301,    0,    0,  301,    0,    0,    0,  301,
      306,  306,  306,    0,    0,  306,    0,    0,    0,  306,
      308,  308,  308,    0,    0,  308,    0,    0,    0,  308,
      310,  310,  310,    0,    0,  310,    0,    0,    0,  310,
      313,  313,  313,    0,    0,  313,    0,    0,    0,  313,
      315,  315,  315,    0,    0,  315,    0,    0,    0,  315,
      317,  317,  317,    0,    0,  317,    0,    0,    0,  317,
      319,  319,  319,    0,    0,  319,    0,    0,    0,  319,
      320,  320,  320,    0,    0,  320,    0,    0,    0,  320,
      321,  321,  321,    0,  321,  321,    0,    0,    0,  321,

      322,  322,  322,    0,    0,  322,    0,    0,    0,  322,
      325,  325,  325,    0,    0,  325,    0,    0,    0,  325,
      329,  329,  329,    0,    0,  329,    0,    0,    0,  329,
      330,  330,  330,    0,    0,  330,    0,    0,    0,  330,
      331,  331,  331,    0,    0,  331,    0,    0,    0,  331,
      332,  332,  332,    0,  332,  332,    0,    0,    0,  332,
      336,  336,  336,    0,    0,  336,    0,    0,    0,  336,
      340,  340,  340,    0,    0,  340,    0,    0,    0,  340,
      341,  341,  341,    0,    0,    0,    0,    0,    0,  341,
      342,  342,  342,    0,    0,    0,    0,    0,    0,  342,

      343,  343,  343,    0,    0,    0,    0,    0,    0,  343,
      344,  344,  344,    0,    0,    0,    0,    0,    0,  344,
      345,  345,  345,    0,    0,    0,    0,    0,    0,    0,
      345,    0,  345,  346,  346,  346,    0,    0,    0,    0,
        0,    0,    0,  346,    0,  346,  347,  347,  347,    0,
      347,    0,    0,    0,    0,    0,  347,    0,  347,  348,
      348,  348,  349,    0,    0,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  350,    0,
        0,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  353,    0,    0,  353,  353,  353,

      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      354,    0,    0,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  356,    0,    0,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  357,    0,    0,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  358,  358,
      358,    0,    0,  358,    0,    0,    0,  358,  360,    0,
        0,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  362,    0,    0,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,

      364,    0,    0,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  366,    0,    0,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  368,    0,    0,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  369,    0,
        0,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  371,    0,    0,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      372,    0,    0,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  374,    0,    0,  374,

      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  375,  375,  375,    0,    0,    0,    0,    0,
        0,  375,  380,  380,  380,    0,    0,    0,    0,    0,
        0,  380,  381,    0,    0,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  383,    0,
        0,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  386,  386,  386,    0,    0,    0,
        0,    0,    0,  386,  393,    0,    0,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      397,    0,    0,  397,  397,  397,  397,  397,  397,  397,

      397,  397,  397,  397,  397,  397,  398,    0,    0,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  399,    0,    0,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  400,    0,
        0,    0,  400,    0,    0,  400,  400,  400,    0,    0,
      400,  402,    0,    0,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  403,    0,    0,
        0,  403,    0,    0,  403,  403,  403,    0,    0,  403,
      404,  404,  404,    0,    0,    0,    0,    0,    0,  404,
      405,  405,  405,    0,    0,    0,    0,    0,    0,  405,

      407,    0,    0,    0,  407,    0,    0,  407,  407,  407,
        0,    0,  407,  413,  413,  413,    0,    0,  413,    0,
        0,    0,  413,  414,  414,  414,    0,    0,  414,    0,
        0,    0,  414,  415,  415,  415,    0,  415,  415,    0,
        0,    0,  415,  416,  416,  416,    0,    0,  416,    0,
        0,    0,  416,  417,  417,  417,    0,    0,  417,    0,
        0,    0,  417,  418,  418,  418,    0,    0,    0,    0,
        0,    0,  418,  420,  420,  420,    0,    0,  420,    0,
        0,    0,  420,  423,  423,    0,    0,    0,  423,  424,
      424,    0,    0,    0,  424,  426,  426,  426,    0,    0,

      426,  427,  427,  427,    0,    0,  427,  428,  428,  428,
        0,  428,  428,  429,  429,  429,    0,    0,  429,  430,
      430,  430,    0,    0,  430,  431,  431,  431,    0,    0,
      431,  432,  432,  432,    0,    0,  432,  433,  433,  433,
        0,  433,  433,  435,  435,  435,    0,    0,  435,    0,
        0,    0,  435,  436,  436,  436,    0,    0,  436,  437,
      437,  437,    0,  437,  437,    0,    0,    0,  437,  439,
      439,  439,    0,    0,  439,    0,    0,    0,  439,  441,
      441,  441,    0,    0,  441,  444,  444,  444,    0,    0,
      444,    0,    0,    0,  444,  445,  445,  445,    0,    0,

      445,    0,    0,    0,  445,  446,  446,  446,    0,  446,
      446,    0,    0,    0,  446,  447,  447,  447,    0,    0,
      447,    0,    0,    0,  447,  449,  449,  449,    0,    0,
      449,    0,    0,    0,  449,  450,  450,  450,    0,    0,
      450,    0,    0,    0,  450,  453,  453,  453,    0,    0,
      453,    0,    0,    0,  453,  454,  454,  454,    0,    0,
      454,    0,    0,    0,  454,  455,  455,  455,    0,    0,
      455,    0,    0,    0,  455,  456,  456,  456,    0,    0,
      456,    0,    0,    0,  456,  457,  457,  457,    0,  457,
      457,    0,    0,    0,  457,  460,  460,  460,    0,    0,

      460,    0,    0,    0,  460,  461,  461,  461,    0,    0,
      461,    0,    0,    0,  461,  463,  463,  463,    0,    0,
      463,    0,    0,    0,  463,  465,  465,  465,    0,    0,
      465,    0,    0,    0,  465,  466,  466,  466,    0,    0,
      466,    0,    0,    0,  466,  467,  467,  467,    0,    0,
      467,    0,    0,    0,  467,  471,  471,  471,    0,    0,
      471,    0,    0,    0,  471,  472,  472,  472,    0,    0,
      472,    0,    0,    0,  472,  475,  475,  475,    0,    0,
      475,    0,    0,    0,  475,  477,  477,  477,    0,    0,
      477,    0,    0,    0,  477,  481,  481,  481,    0,    0,

      481,    0,    0,    0,  481,  487,  487,  487,    0,    0,
      487,    0,    0,    0,  487,  488,  488,  488,    0,    0,
      488,    0,    0,    0,  488,  489,  489,  489,    0,  489,
      489,    0,    0,    0,  489,  490,  490,  490,    0,    0,
      490,    0,    0,    0,  490,  492,  492,  492,    0,    0,
        0,    0,    0,    0,    0,  492,    0,  492,  493,  493,
      493,    0,    0,    0,    0,    0,    0,    0,  493,    0,
      493,  494,  494,  494,    0,  494,    0,    0,    0,    0,
        0,  494,    0,  494,  495,  495,  495,  496,  496,  496,
        0,    0,    0,    0,    0,    0,    0,  496,    0,  496,

      497,    0,    0,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  498,    0,    0,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  500,    0,    0,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  501,  501,
      501,    0,    0,  501,  502,    0,    0,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      505,    0,    0,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  506,  506,  506,    0,
        0,  506,  507,    0,    0,  507,  507,  507,  507,  507,

      507,  507,  507,  507,  507,  507,  507,  507,  508,    0,
        0,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  509,    0,    0,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      512,    0,    0,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  513,  513,  513,    0,
        0,  513,    0,    0,    0,  513,  518,  518,  518,    0,
        0,  518,  520,    0,    0,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  523,  523,
      523,    0,    0,  523,  524,    0,    0,  524,  524,  524,

      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      525,    0,    0,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  528,    0,    0,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  529,  529,  529,    0,    0,  529,    0,    0,
        0,  529,  530,    0,    0,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  531,    0,
        0,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  533,    0,    0,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,

      534,    0,    0,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  535,  535,  535,    0,
        0,  535,    0,    0,    0,  535,  536,    0,    0,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  538,    0,    0,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  541,    0,
        0,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  543,    0,    0,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      544,    0,    0,  544,  544,  544,  544,  544,  544,  544,

      544,  544,  544,  544,  544,  544,  549,    0,    0,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  550,    0,    0,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  552,    0,
        0,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  553,  553,  553,    0,    0,    0,
        0,    0,    0,  553,  555,    0,    0,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      558,  558,  558,    0,    0,  558,    0,    0,    0,  558,
      560,    0,    0,  560,  560,  560,  560,  560,  560,  560,

      560,  560,  560,  560,  560,  560,  563,  563,  563,    0,
        0,    0,    0,    0,    0,  563,  564,    0,    0,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  565,    0,    0,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  569,  569,
      569,    0,    0,    0,    0,    0,    0,  569,  575,  575,
      575,    0,    0,  575,    0,    0,    0,  575,  576,  576,
      576,    0,    0,  576,    0,    0,    0,  576,  577,  577,
      577,    0,  577,  577,    0,    0,    0,  577,  578,  578,
      578,    0,    0,  578,    0,    0,    0,  578,  580,  580,

      580,    0,    0,  580,    0,    0,    0,  580,  582,  582,
      582,    0,    0,  582,    0,    0,    0,  582,  583,  583,
      583,    0,    0,  583,    0,    0,    0,  583,  584,  584,
      584,    0,    0,  584,    0,    0,    0,  584,  585,  585,
      585,    0,    0,  585,    0,    0,    0,  585,  586,  586,
      586,    0,    0,  586,    0,    0,    0,  586,  589,  589,
      589,    0,    0,  589,    0,    0,    0,  589,  591,  591,
      591,    0,    0,  591,    0,    0,    0,  591,  593,  593,
      593,    0,    0,  593,    0,    0,    0,  593,  596,  596,
      596,    0,    0,  596,    0,    0,    0,  596,  599,  599,

      599,    0,    0,  599,  600,  600,  600,    0,    0,  600,
      601,  601,  601,    0,  601,  601,  603,  603,  603,    0,
        0,  603,    0,    0,    0,  603,  605,  605,  605,    0,
        0,  605,    0,    0,    0,  605,  609,  609,  609,    0,
        0,  609,    0,    0,    0,  609,  610,  610,  610,    0,
        0,  610,    0,    0,    0,  610,  611,  611,  611,    0,
      611,  611,    0,    0,    0,  611,  613,  613,  613,    0,
        0,  613,    0,    0,    0,  613,  615,  615,  615,    0,
        0,  615,    0,    0,    0,  615,  619,  619,  619,    0,
        0,  619,    0,    0,    0,  619,  620,  620,  620,    0,

        0,  620,    0,    0,    0,  620,  621,  621,  621,    0,
        0,  621,    0,    0,    0,  621,  623,  623,  623,    0,
      623,  623,    0,    0,    0,  623,  624,  624,  624,    0,
        0,  624,    0,    0,    0,  624,  631,  631,  631,    0,
        0,  631,    0,    0,    0,  631,  632,  632,  632,    0,
        0,  632,    0,    0,    0,  632,  633,  633,  633,    0,
      633,  633,    0,    0,    0,  633,  636,    0,    0,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  637,    0,    0,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  639,  639,

      639,    0,    0,  639,  643,    0,    0,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      644,  644,  644,    0,    0,  644,  645,    0,    0,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  647,    0,    0,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  651,    0,
        0,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  654,    0,    0,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      655,  655,  655,    0,    0,  655,  657,    0,    0,  657,

      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  660,  660,  660,    0,    0,  660,  661,    0,
        0,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  667,    0,    0,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      668,    0,    0,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  669,    0,    0,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  671,    0,    0,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  672,    0,

        0,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  673,  673,  673,    0,    0,  673,
        0,    0,    0,  673,  679,  679,  679,    0,    0,  679,
        0,    0,    0,  679,  680,    0,    0,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      682,    0,    0,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  685,    0,    0,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  688,    0,    0,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  693,    0,

        0,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  694,    0,    0,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      696,    0,    0,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  697,    0,    0,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  698,  698,  698,    0,    0,  698,    0,    0,
        0,  698,  700,    0,    0,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  705,    0,
        0,  705,  705,  705,  705,  705,  705,  705,  705,  705,

      705,  705,  705,  705,  706,    0,    0,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      707,    0,    0,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  713,    0,    0,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  718,    0,    0,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  719,    0,
        0,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  720,    0,    0,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,

      722,    0,    0,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  723,  723,  723,    0,
        0,    0,    0,    0,    0,  723,  724,    0,    0,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  726,    0,    0,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  729,  729,
      729,    0,    0,    0,    0,    0,    0,  729,  730,    0,
        0,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  733,    0,    0,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,

      734,    0,    0,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  735,  735,  735,    0,
        0,  735,    0,    0,    0,  735,  736,    0,    0,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  742,  742,  742,    0,    0,  742,    0,    0,
        0,  742,  743,  743,  743,    0,    0,  743,    0,    0,
        0,  743,  745,  745,  745,    0,    0,  745,    0,    0,
        0,  745,  746,  746,  746,    0,    0,  746,    0,    0,
        0,  746,  747,  747,  747,    0,    0,  747,    0,    0,
        0,  747,  748,  748,  748,    0,    0,  748,    0,    0,

        0,  748,  751,  751,  751,    0,    0,  751,    0,    0,
        0,  751,  752,  752,  752,    0,    0,  752,    0,    0,
        0,  752,  753,  753,  753,    0,    0,  753,    0,    0,
        0,  753,  754,  754,  754,    0,    0,  754,    0,    0,
        0,  754,  755,  755,  755,    0,  755,  755,    0,    0,
        0,  755,  758,  758,  758,    0,    0,  758,    0,    0,
        0,  758,  759,  759,  759,    0,    0,  759,    0,    0,
        0,  759,  761,  761,  761,    0,    0,  761,    0,    0,
        0,  761,  763,    0,    0,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  764,    0,

        0,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  766,    0,    0,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      767,  767,  767,    0,    0,  767,  768,    0,    0,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  769,    0,    0,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  770,    0,
        0,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  773,  773,  773,    0,    0,  773,
      774,    0,    0,  774,  774,  774,  774,  774,  774,  774,

      774,  774,  774,  774,  774,  774,  775,    0,    0,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  778,    0,    0,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  779,  779,
      779,    0,    0,  779,    0,    0,    0,  779,  784,  784,
      784,    0,    0,  784,  785,    0,    0,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      788,    0,    0,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  790,  790,  790,    0,
        0,  790,    0,    0,    0,  790,  792,    0,    0,  792,

      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  795,    0,    0,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  797,    0,
        0,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  798,    0,    0,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      799,    0,    0,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  810,    0,    0,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  816,  816,  816,    0,    0,  816,    0,    0,

        0,  816,  818,    0,    0,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  821,    0,
        0,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  822,  822,  822,    0,    0,  822,
        0,    0,    0,  822,  824,    0,    0,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      829,    0,    0,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  836,    0,    0,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  837,    0,    0,  837,  837,  837,  837,  837,

      837,  837,  837,  837,  837,  837,  837,  837,  841,  841,
      841,    0,    0,  841,    0,    0,    0,  841,  842,    0,
        0,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  846,  846,  846,    0,    0,  846,
        0,    0,    0,  846,  852,  852,  852,    0,    0,  852,
        0,    0,    0,  852,  853,    0,    0,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      872,  872,  872,    0,    0,  872,    0,    0,    0,  872,
      880,  880,  880,    0,    0,  880,  881,    0,    0,  881,
      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,

      881,  881,  893,  893,  893,    0,    0,  893,    0,    0,
        0,  893,  900,    0,    0,  900,  900,  900,  900,  900,
      900,  900,  900,  900,  900,  900,  900,  900,  901,    0,
        0,  901,  901,  901,  901,  901,  901,  901,  901,  901,
      901,  901,  901,  901,  915,    0,    0,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      919,  919,  919,    0,    0,  919,    0,    0,    0,  919,
      932,    0,    0,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  932,  932,  932,  932,  953,    0,  953,  954,
        0,  954,  956,    0,  956,  957,    0,  957,  958,    0,

      958,  959,    0,  959,  960,    0,  960,  961,    0,  961,
      963,    0,  963,  965,    0,  965,  966,    0,  966,  967,
        0,  967,  968,    0,  968,  969,    0,  969,  970,    0,
      970,  971,    0,  971,  972,    0,  972,  973,    0,  973,
      974,    0,  974,  975,    0,  975,  976,    0,  976,  977,
        0,  977,  978,    0,  978,  979,    0,  979,  982,    0,
      982,  983,    0,  983,  984,    0,  984,  985,    0,  985,
      986,    0,  986,  987,    0,  987,  988,    0,  988,  989,
        0,  989,  990,    0,  990,  991,    0,  991,  992,    0,
      992,  993,    0,  993,  994,    0,  994,  995,    0,  995,

      996,    0,  996,  997,    0,  997,  998,    0,  998,  999,
        0,  999, 1000,    0, 1000, 1001,    0, 1001, 1002,    0,
     1002, 1003,    0, 1003, 1004,    0, 1004, 1005,    0, 1005,
     1006,    0, 1006, 1007,    0, 1007, 1008,    0, 1008, 1009,
        0, 1009, 1010,    0, 1010, 1011,    0, 1011, 1012,    0,
     1012, 1015,    0, 1015, 1016,    0, 1016, 1017,    0, 1017,
     1018,    0, 1018, 1019,    0, 1019, 1020,    0, 1020, 1021,
        0, 1021, 1022,    0, 1022, 1023,    0, 1023, 1024,    0,
     1024, 1025,    0, 1025, 1026,    0, 1026, 1027,    0, 1027,
     1028,    0, 1028, 1029,    0, 1029, 1030,    0, 1030, 1031,

        0, 1031, 1032,    0, 1032, 1033,    0, 1033, 1034,    0,
     1034, 1035,    0, 1035, 1036,    0, 1036, 1037,    0, 1037,
     1038,    0, 1038, 1039,    0, 1039, 1040,    0, 1040, 1041,
        0, 1041, 1042,    0, 1042, 1043,    0, 1043, 1044,    0,
     1044, 1045,    0, 1045, 1046,    0, 1046, 1047,    0, 1047,
     1048,    0, 1048, 1049,    0, 1049, 1050,    0, 1050, 1051,
        0, 1051, 1052,    0, 1052, 1053,    0, 1053, 1054,    0,
     1054, 1055,    0, 1055, 1056,    0, 1056, 1057,    0, 1057,
     1058,    0, 1058, 1059,    0, 1059, 1060,    0, 1060, 1061,
        0, 1061, 1062,    0, 1062, 1063,    0, 1063, 1064,    0,

     1064, 1065,    0, 1065, 1066,    0, 1066, 1067,    0, 1067,
     1068,    0, 1068, 1069,    0, 1069, 1070,    0, 1070, 1071,
        0, 1071, 1072,    0, 1072, 1073,    0, 1073, 1074,    0,
     1074, 1075,    0, 1075, 1076,    0, 1076, 1077,    0, 1077,
     1078,    0, 1078, 1079,    0, 1079, 1080,    0, 1080, 1081,
        0, 1081, 1082,    0, 1082, 1083,    0, 1083, 1084,    0,
     1084, 1085,    0, 1085, 1086,    0, 1086, 1087,    0, 1087,
     1088,    0, 1088, 1089,    0, 1089, 1090,    0, 1090, 1091,
        0, 1091, 1092,    0, 1092, 1093,    0, 1093, 1094,    0,
     1094, 1095,    0, 1095, 1096,    0, 1096, 1097,    0, 1097,

     1098,    0, 1098, 1099,    0, 1099, 1100,    0, 1100, 1101,
        0, 1101, 1102,    0, 1102, 1103,    0, 1103, 1104,    0,
     1104, 1105,    0, 1105, 1106,    0, 1106, 1107,    0, 1107,
     1108,    0, 1108, 1109,    0, 1109, 1110,    0, 1110, 1111,
        0, 1111, 1112,    0, 1112, 1113,    0, 1113, 1114,    0,
     1114, 1115,    0, 1115, 1116,    0, 1116, 1117,    0, 1117,
     1118,    0, 1118, 1119,    0, 1119, 1120,    0, 1120, 1121,
        0, 1121, 1122,    0, 1122, 1123,    0, 1123, 1124,    0,
     1124, 1125,    0, 1125, 1126,    0, 1126, 1127,    0, 1127,
     1128,    0, 1128, 1129,    0, 1129, 1130,    0, 1130, 1131,

        0, 1131, 1132,    0, 1132, 1133,    0, 1133, 1134,    0,
     1134, 1135,    0, 1135, 1136,    0, 1136, 1137,    0, 1137,
     1138,    0, 1138, 1139,    0, 1139, 1140,    0, 1140, 1141,
        0, 1141, 1142,    0, 1142, 1143,    0, 1143,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[17] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
/*
 *
 * CS-252 
 * shell.l: lexical analyzer for shell
 * You have to extend it.
 *
 */
#line 11 "shell.l"

#include <cstring>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include "y.tab.hh"
/*
#include <string.h>
#include "y.tab.h"

////////////  Start added code ///////////


extern “C” char * read_line();

int mygetc(FILE * f) {
  static char *p;
  char ch;

     if (!isatty(0)) {
  // stdin is not a tty. Call real getc
    return getc(f);
  }

  // stdin is a tty. Call our read_line.
  if (p==NULL || *p == 0) {
    char * s = read_line();
    p = s;
  }

  ch = *p;
  p++;

  return ch;
}

#undef getc
#define getc(f) mygetc(f)

/////////// End added code ///////////*/

#define MAX_INCLUDE_DEPTH 10
YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

static  void yyunput (int c,char *buf_ptr  );

char *getenv(const char *name);

void myunputc(int c) {
  unput(c);
}

void remove_character(char* s, char c) {
  int j, n = strlen(s);
  int escaped = 0; 

  for (int i = j = 0; i < n; i++) {
    if (s[i] != c || escaped) {
      s[j++] = s[i];
      escaped = 0;
    } else {
      escaped = 1;
    }
  }   

  s[j] = '\0';
}

/*void source(char *s) {
  FILE *yyin = fopen(s, "r");

  if (!yyin) {
    fprintf( stderr, "No File" );
  } else {
    yypush_buffer_state( yy_create_buffer( yyin, YY_BUF_SIZE ) );
    yyparse();
    fclose(yyin);
  }
}*/

void removeStartAndEnd(char* s) {
  int j, n = strlen(s);

  s[0] = '\0';
  for (int i = 1; i < n; i++) {
    s[i - 1] = s[i];
  }   
  s[n - 2] = '\0';
}

#line 2190 "lex.yy.cc"
#line 2191 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 106 "shell.l"


#line 2411 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 952 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5739 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 108 "shell.l"
{
  return NEWLINE;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 112 "shell.l"
{
  /* Discard spaces and tabs */
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 116 "shell.l"
{
  return GREAT;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 120 "shell.l"
{
  return GREATGREAT;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 124 "shell.l"
{
  return LESS;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 128 "shell.l"
{
  return PIPE;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 132 "shell.l"
{
  return AMPERSAND;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 136 "shell.l"
{
  return TWOGREAT;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 140 "shell.l"
{
  return GREATAMPERSAND;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 144 "shell.l"
{
  return GREATGREATAMPERSAND;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 148 "shell.l"
{ 
  remove_character(yytext, '$');
  remove_character(yytext, '(');
  remove_character(yytext, ')');

  int pin[2], pout[2];
  pipe(pin); pipe(pout);

  int ret = fork();
  if (ret == 0) {
      close(pin[1]);
      close(pout[0]);

      dup2(pin[0], 0);
      close(pin[0]);

      dup2(pout[1], 1);
      close(pout[1]);
      
      // Execute shell executable
      execvp("/proc/self/exe", NULL);
      perror("Error in Child Process");
      exit(1);
  } else if (ret < 0) {
      perror("Error Forking Child");
      exit(1);
  }

  close(pin[0]);
  close(pout[1]);

  write(pin[1], strcat(yytext, "\n"), strlen(yytext) + 1);
  write(pin[1], "exit\n", 6);
  close(pin[1]);
  
  int size = 1024;
  char* buffer = (char*) malloc(sizeof(char) * size);
  char* iterator = buffer;
  int n = read(pout[0], iterator++, 1);
  while (n > 0) {
    n = read(pout[0], iterator++, 1);
    if (strlen(buffer) == size) {
      size = size * 2;
      realloc(buffer, size);
    }
  }

  *iterator = '\0';
  close(pout[0]);

  for (int i = strlen(buffer) - 1; i >= 0; i--) {
    char c = ' ';
    if (buffer[i] == '\n') {
      myunputc(' ');
    } else {
      myunputc(buffer[i]);
    }
  }
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 208 "shell.l"
{ 
  remove_character(yytext, '\\');
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 214 "shell.l"
{
  remove_character(yytext, '$');
  remove_character(yytext, '{');
  remove_character(yytext, '}');

  int size = 1024;
  char* buffer = (char*) malloc(sizeof(char) * size);

  if (!strcmp(yytext, "$")) {
    printf("testing");
    sprintf(buffer, "%d", getpid());
  } else if (!strcmp(yytext, "?")) {

  } else if (!strcmp(yytext, "!")) {

  } else if (!strcmp(yytext, "_")) {

  } else if (!strcmp(yytext, "SHELL")) {

  } else {
    buffer = getenv(yytext);
  }

  if(buffer) {
    for (int i = strlen(buffer) - 1; i >= 0; i--) {
      myunputc(buffer[i]);
    }
  }
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 244 "shell.l"
{
  removeStartAndEnd(yytext);
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 250 "shell.l"
{
  /* Assume that file names have only alpha chars */
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 255 "shell.l"
ECHO;
	YY_BREAK
#line 2677 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 952 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 952 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 951);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 255 "shell.l"
